
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model guideline
 * 
 */
export type guideline = $Result.DefaultSelection<Prisma.$guidelinePayload>
/**
 * Model location
 * 
 */
export type location = $Result.DefaultSelection<Prisma.$locationPayload>
/**
 * Model reply
 * 
 */
export type reply = $Result.DefaultSelection<Prisma.$replyPayload>
/**
 * Model report
 * 
 */
export type report = $Result.DefaultSelection<Prisma.$reportPayload>
/**
 * Model user
 * 
 */
export type user = $Result.DefaultSelection<Prisma.$userPayload>
/**
 * Model discussion
 * 
 */
export type discussion = $Result.DefaultSelection<Prisma.$discussionPayload>
/**
 * Model visit
 * 
 */
export type visit = $Result.DefaultSelection<Prisma.$visitPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Guidelines
 * const guidelines = await prisma.guideline.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Guidelines
   * const guidelines = await prisma.guideline.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.guideline`: Exposes CRUD operations for the **guideline** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Guidelines
    * const guidelines = await prisma.guideline.findMany()
    * ```
    */
  get guideline(): Prisma.guidelineDelegate<ExtArgs>;

  /**
   * `prisma.location`: Exposes CRUD operations for the **location** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Locations
    * const locations = await prisma.location.findMany()
    * ```
    */
  get location(): Prisma.locationDelegate<ExtArgs>;

  /**
   * `prisma.reply`: Exposes CRUD operations for the **reply** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Replies
    * const replies = await prisma.reply.findMany()
    * ```
    */
  get reply(): Prisma.replyDelegate<ExtArgs>;

  /**
   * `prisma.report`: Exposes CRUD operations for the **report** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Reports
    * const reports = await prisma.report.findMany()
    * ```
    */
  get report(): Prisma.reportDelegate<ExtArgs>;

  /**
   * `prisma.user`: Exposes CRUD operations for the **user** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.userDelegate<ExtArgs>;

  /**
   * `prisma.discussion`: Exposes CRUD operations for the **discussion** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Discussions
    * const discussions = await prisma.discussion.findMany()
    * ```
    */
  get discussion(): Prisma.discussionDelegate<ExtArgs>;

  /**
   * `prisma.visit`: Exposes CRUD operations for the **visit** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Visits
    * const visits = await prisma.visit.findMany()
    * ```
    */
  get visit(): Prisma.visitDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.17.0
   * Query Engine version: 393aa359c9ad4a4bb28630fb5613f9c281cde053
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    guideline: 'guideline',
    location: 'location',
    reply: 'reply',
    report: 'report',
    user: 'user',
    discussion: 'discussion',
    visit: 'visit'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "guideline" | "location" | "reply" | "report" | "user" | "discussion" | "visit"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      guideline: {
        payload: Prisma.$guidelinePayload<ExtArgs>
        fields: Prisma.guidelineFieldRefs
        operations: {
          findUnique: {
            args: Prisma.guidelineFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$guidelinePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.guidelineFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$guidelinePayload>
          }
          findFirst: {
            args: Prisma.guidelineFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$guidelinePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.guidelineFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$guidelinePayload>
          }
          findMany: {
            args: Prisma.guidelineFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$guidelinePayload>[]
          }
          create: {
            args: Prisma.guidelineCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$guidelinePayload>
          }
          createMany: {
            args: Prisma.guidelineCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.guidelineCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$guidelinePayload>[]
          }
          delete: {
            args: Prisma.guidelineDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$guidelinePayload>
          }
          update: {
            args: Prisma.guidelineUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$guidelinePayload>
          }
          deleteMany: {
            args: Prisma.guidelineDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.guidelineUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.guidelineUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$guidelinePayload>
          }
          aggregate: {
            args: Prisma.GuidelineAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateGuideline>
          }
          groupBy: {
            args: Prisma.guidelineGroupByArgs<ExtArgs>
            result: $Utils.Optional<GuidelineGroupByOutputType>[]
          }
          count: {
            args: Prisma.guidelineCountArgs<ExtArgs>
            result: $Utils.Optional<GuidelineCountAggregateOutputType> | number
          }
        }
      }
      location: {
        payload: Prisma.$locationPayload<ExtArgs>
        fields: Prisma.locationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.locationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$locationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.locationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$locationPayload>
          }
          findFirst: {
            args: Prisma.locationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$locationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.locationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$locationPayload>
          }
          findMany: {
            args: Prisma.locationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$locationPayload>[]
          }
          create: {
            args: Prisma.locationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$locationPayload>
          }
          createMany: {
            args: Prisma.locationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.locationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$locationPayload>[]
          }
          delete: {
            args: Prisma.locationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$locationPayload>
          }
          update: {
            args: Prisma.locationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$locationPayload>
          }
          deleteMany: {
            args: Prisma.locationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.locationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.locationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$locationPayload>
          }
          aggregate: {
            args: Prisma.LocationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateLocation>
          }
          groupBy: {
            args: Prisma.locationGroupByArgs<ExtArgs>
            result: $Utils.Optional<LocationGroupByOutputType>[]
          }
          count: {
            args: Prisma.locationCountArgs<ExtArgs>
            result: $Utils.Optional<LocationCountAggregateOutputType> | number
          }
        }
      }
      reply: {
        payload: Prisma.$replyPayload<ExtArgs>
        fields: Prisma.replyFieldRefs
        operations: {
          findUnique: {
            args: Prisma.replyFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$replyPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.replyFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$replyPayload>
          }
          findFirst: {
            args: Prisma.replyFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$replyPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.replyFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$replyPayload>
          }
          findMany: {
            args: Prisma.replyFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$replyPayload>[]
          }
          create: {
            args: Prisma.replyCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$replyPayload>
          }
          createMany: {
            args: Prisma.replyCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.replyCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$replyPayload>[]
          }
          delete: {
            args: Prisma.replyDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$replyPayload>
          }
          update: {
            args: Prisma.replyUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$replyPayload>
          }
          deleteMany: {
            args: Prisma.replyDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.replyUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.replyUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$replyPayload>
          }
          aggregate: {
            args: Prisma.ReplyAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateReply>
          }
          groupBy: {
            args: Prisma.replyGroupByArgs<ExtArgs>
            result: $Utils.Optional<ReplyGroupByOutputType>[]
          }
          count: {
            args: Prisma.replyCountArgs<ExtArgs>
            result: $Utils.Optional<ReplyCountAggregateOutputType> | number
          }
        }
      }
      report: {
        payload: Prisma.$reportPayload<ExtArgs>
        fields: Prisma.reportFieldRefs
        operations: {
          findUnique: {
            args: Prisma.reportFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$reportPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.reportFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$reportPayload>
          }
          findFirst: {
            args: Prisma.reportFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$reportPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.reportFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$reportPayload>
          }
          findMany: {
            args: Prisma.reportFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$reportPayload>[]
          }
          create: {
            args: Prisma.reportCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$reportPayload>
          }
          createMany: {
            args: Prisma.reportCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.reportCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$reportPayload>[]
          }
          delete: {
            args: Prisma.reportDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$reportPayload>
          }
          update: {
            args: Prisma.reportUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$reportPayload>
          }
          deleteMany: {
            args: Prisma.reportDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.reportUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.reportUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$reportPayload>
          }
          aggregate: {
            args: Prisma.ReportAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateReport>
          }
          groupBy: {
            args: Prisma.reportGroupByArgs<ExtArgs>
            result: $Utils.Optional<ReportGroupByOutputType>[]
          }
          count: {
            args: Prisma.reportCountArgs<ExtArgs>
            result: $Utils.Optional<ReportCountAggregateOutputType> | number
          }
        }
      }
      user: {
        payload: Prisma.$userPayload<ExtArgs>
        fields: Prisma.userFieldRefs
        operations: {
          findUnique: {
            args: Prisma.userFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.userFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userPayload>
          }
          findFirst: {
            args: Prisma.userFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.userFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userPayload>
          }
          findMany: {
            args: Prisma.userFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userPayload>[]
          }
          create: {
            args: Prisma.userCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userPayload>
          }
          createMany: {
            args: Prisma.userCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.userCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userPayload>[]
          }
          delete: {
            args: Prisma.userDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userPayload>
          }
          update: {
            args: Prisma.userUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userPayload>
          }
          deleteMany: {
            args: Prisma.userDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.userUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.userUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.userGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.userCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      discussion: {
        payload: Prisma.$discussionPayload<ExtArgs>
        fields: Prisma.discussionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.discussionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$discussionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.discussionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$discussionPayload>
          }
          findFirst: {
            args: Prisma.discussionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$discussionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.discussionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$discussionPayload>
          }
          findMany: {
            args: Prisma.discussionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$discussionPayload>[]
          }
          create: {
            args: Prisma.discussionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$discussionPayload>
          }
          createMany: {
            args: Prisma.discussionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.discussionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$discussionPayload>[]
          }
          delete: {
            args: Prisma.discussionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$discussionPayload>
          }
          update: {
            args: Prisma.discussionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$discussionPayload>
          }
          deleteMany: {
            args: Prisma.discussionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.discussionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.discussionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$discussionPayload>
          }
          aggregate: {
            args: Prisma.DiscussionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDiscussion>
          }
          groupBy: {
            args: Prisma.discussionGroupByArgs<ExtArgs>
            result: $Utils.Optional<DiscussionGroupByOutputType>[]
          }
          count: {
            args: Prisma.discussionCountArgs<ExtArgs>
            result: $Utils.Optional<DiscussionCountAggregateOutputType> | number
          }
        }
      }
      visit: {
        payload: Prisma.$visitPayload<ExtArgs>
        fields: Prisma.visitFieldRefs
        operations: {
          findUnique: {
            args: Prisma.visitFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$visitPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.visitFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$visitPayload>
          }
          findFirst: {
            args: Prisma.visitFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$visitPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.visitFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$visitPayload>
          }
          findMany: {
            args: Prisma.visitFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$visitPayload>[]
          }
          create: {
            args: Prisma.visitCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$visitPayload>
          }
          createMany: {
            args: Prisma.visitCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.visitCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$visitPayload>[]
          }
          delete: {
            args: Prisma.visitDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$visitPayload>
          }
          update: {
            args: Prisma.visitUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$visitPayload>
          }
          deleteMany: {
            args: Prisma.visitDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.visitUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.visitUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$visitPayload>
          }
          aggregate: {
            args: Prisma.VisitAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateVisit>
          }
          groupBy: {
            args: Prisma.visitGroupByArgs<ExtArgs>
            result: $Utils.Optional<VisitGroupByOutputType>[]
          }
          count: {
            args: Prisma.visitCountArgs<ExtArgs>
            result: $Utils.Optional<VisitCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type LocationCountOutputType
   */

  export type LocationCountOutputType = {
    discussion: number
    guideline: number
    other_location: number
    report: number
    user: number
    visit: number
  }

  export type LocationCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    discussion?: boolean | LocationCountOutputTypeCountDiscussionArgs
    guideline?: boolean | LocationCountOutputTypeCountGuidelineArgs
    other_location?: boolean | LocationCountOutputTypeCountOther_locationArgs
    report?: boolean | LocationCountOutputTypeCountReportArgs
    user?: boolean | LocationCountOutputTypeCountUserArgs
    visit?: boolean | LocationCountOutputTypeCountVisitArgs
  }

  // Custom InputTypes
  /**
   * LocationCountOutputType without action
   */
  export type LocationCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LocationCountOutputType
     */
    select?: LocationCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * LocationCountOutputType without action
   */
  export type LocationCountOutputTypeCountDiscussionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: discussionWhereInput
  }

  /**
   * LocationCountOutputType without action
   */
  export type LocationCountOutputTypeCountGuidelineArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: guidelineWhereInput
  }

  /**
   * LocationCountOutputType without action
   */
  export type LocationCountOutputTypeCountOther_locationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: locationWhereInput
  }

  /**
   * LocationCountOutputType without action
   */
  export type LocationCountOutputTypeCountReportArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: reportWhereInput
  }

  /**
   * LocationCountOutputType without action
   */
  export type LocationCountOutputTypeCountUserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: userWhereInput
  }

  /**
   * LocationCountOutputType without action
   */
  export type LocationCountOutputTypeCountVisitArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: visitWhereInput
  }


  /**
   * Count Type ReplyCountOutputType
   */

  export type ReplyCountOutputType = {
    other_reply: number
  }

  export type ReplyCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    other_reply?: boolean | ReplyCountOutputTypeCountOther_replyArgs
  }

  // Custom InputTypes
  /**
   * ReplyCountOutputType without action
   */
  export type ReplyCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReplyCountOutputType
     */
    select?: ReplyCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ReplyCountOutputType without action
   */
  export type ReplyCountOutputTypeCountOther_replyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: replyWhereInput
  }


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    discussion: number
    reply: number
    visit: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    discussion?: boolean | UserCountOutputTypeCountDiscussionArgs
    reply?: boolean | UserCountOutputTypeCountReplyArgs
    visit?: boolean | UserCountOutputTypeCountVisitArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountDiscussionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: discussionWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountReplyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: replyWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountVisitArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: visitWhereInput
  }


  /**
   * Count Type DiscussionCountOutputType
   */

  export type DiscussionCountOutputType = {
    reply: number
  }

  export type DiscussionCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    reply?: boolean | DiscussionCountOutputTypeCountReplyArgs
  }

  // Custom InputTypes
  /**
   * DiscussionCountOutputType without action
   */
  export type DiscussionCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DiscussionCountOutputType
     */
    select?: DiscussionCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * DiscussionCountOutputType without action
   */
  export type DiscussionCountOutputTypeCountReplyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: replyWhereInput
  }


  /**
   * Models
   */

  /**
   * Model guideline
   */

  export type AggregateGuideline = {
    _count: GuidelineCountAggregateOutputType | null
    _avg: GuidelineAvgAggregateOutputType | null
    _sum: GuidelineSumAggregateOutputType | null
    _min: GuidelineMinAggregateOutputType | null
    _max: GuidelineMaxAggregateOutputType | null
  }

  export type GuidelineAvgAggregateOutputType = {
    id: number | null
    locId: number | null
  }

  export type GuidelineSumAggregateOutputType = {
    id: number | null
    locId: number | null
  }

  export type GuidelineMinAggregateOutputType = {
    id: number | null
    locId: number | null
    created: Date | null
    title: string | null
    content: string | null
  }

  export type GuidelineMaxAggregateOutputType = {
    id: number | null
    locId: number | null
    created: Date | null
    title: string | null
    content: string | null
  }

  export type GuidelineCountAggregateOutputType = {
    id: number
    locId: number
    tags: number
    created: number
    title: number
    content: number
    _all: number
  }


  export type GuidelineAvgAggregateInputType = {
    id?: true
    locId?: true
  }

  export type GuidelineSumAggregateInputType = {
    id?: true
    locId?: true
  }

  export type GuidelineMinAggregateInputType = {
    id?: true
    locId?: true
    created?: true
    title?: true
    content?: true
  }

  export type GuidelineMaxAggregateInputType = {
    id?: true
    locId?: true
    created?: true
    title?: true
    content?: true
  }

  export type GuidelineCountAggregateInputType = {
    id?: true
    locId?: true
    tags?: true
    created?: true
    title?: true
    content?: true
    _all?: true
  }

  export type GuidelineAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which guideline to aggregate.
     */
    where?: guidelineWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of guidelines to fetch.
     */
    orderBy?: guidelineOrderByWithRelationInput | guidelineOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: guidelineWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` guidelines from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` guidelines.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned guidelines
    **/
    _count?: true | GuidelineCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: GuidelineAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: GuidelineSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GuidelineMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GuidelineMaxAggregateInputType
  }

  export type GetGuidelineAggregateType<T extends GuidelineAggregateArgs> = {
        [P in keyof T & keyof AggregateGuideline]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGuideline[P]>
      : GetScalarType<T[P], AggregateGuideline[P]>
  }




  export type guidelineGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: guidelineWhereInput
    orderBy?: guidelineOrderByWithAggregationInput | guidelineOrderByWithAggregationInput[]
    by: GuidelineScalarFieldEnum[] | GuidelineScalarFieldEnum
    having?: guidelineScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GuidelineCountAggregateInputType | true
    _avg?: GuidelineAvgAggregateInputType
    _sum?: GuidelineSumAggregateInputType
    _min?: GuidelineMinAggregateInputType
    _max?: GuidelineMaxAggregateInputType
  }

  export type GuidelineGroupByOutputType = {
    id: number
    locId: number
    tags: string[]
    created: Date
    title: string
    content: string
    _count: GuidelineCountAggregateOutputType | null
    _avg: GuidelineAvgAggregateOutputType | null
    _sum: GuidelineSumAggregateOutputType | null
    _min: GuidelineMinAggregateOutputType | null
    _max: GuidelineMaxAggregateOutputType | null
  }

  type GetGuidelineGroupByPayload<T extends guidelineGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<GuidelineGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GuidelineGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GuidelineGroupByOutputType[P]>
            : GetScalarType<T[P], GuidelineGroupByOutputType[P]>
        }
      >
    >


  export type guidelineSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    locId?: boolean
    tags?: boolean
    created?: boolean
    title?: boolean
    content?: boolean
    location?: boolean | locationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["guideline"]>

  export type guidelineSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    locId?: boolean
    tags?: boolean
    created?: boolean
    title?: boolean
    content?: boolean
    location?: boolean | locationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["guideline"]>

  export type guidelineSelectScalar = {
    id?: boolean
    locId?: boolean
    tags?: boolean
    created?: boolean
    title?: boolean
    content?: boolean
  }

  export type guidelineInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    location?: boolean | locationDefaultArgs<ExtArgs>
  }
  export type guidelineIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    location?: boolean | locationDefaultArgs<ExtArgs>
  }

  export type $guidelinePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "guideline"
    objects: {
      location: Prisma.$locationPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      locId: number
      tags: string[]
      created: Date
      title: string
      content: string
    }, ExtArgs["result"]["guideline"]>
    composites: {}
  }

  type guidelineGetPayload<S extends boolean | null | undefined | guidelineDefaultArgs> = $Result.GetResult<Prisma.$guidelinePayload, S>

  type guidelineCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<guidelineFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: GuidelineCountAggregateInputType | true
    }

  export interface guidelineDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['guideline'], meta: { name: 'guideline' } }
    /**
     * Find zero or one Guideline that matches the filter.
     * @param {guidelineFindUniqueArgs} args - Arguments to find a Guideline
     * @example
     * // Get one Guideline
     * const guideline = await prisma.guideline.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends guidelineFindUniqueArgs>(args: SelectSubset<T, guidelineFindUniqueArgs<ExtArgs>>): Prisma__guidelineClient<$Result.GetResult<Prisma.$guidelinePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Guideline that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {guidelineFindUniqueOrThrowArgs} args - Arguments to find a Guideline
     * @example
     * // Get one Guideline
     * const guideline = await prisma.guideline.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends guidelineFindUniqueOrThrowArgs>(args: SelectSubset<T, guidelineFindUniqueOrThrowArgs<ExtArgs>>): Prisma__guidelineClient<$Result.GetResult<Prisma.$guidelinePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Guideline that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {guidelineFindFirstArgs} args - Arguments to find a Guideline
     * @example
     * // Get one Guideline
     * const guideline = await prisma.guideline.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends guidelineFindFirstArgs>(args?: SelectSubset<T, guidelineFindFirstArgs<ExtArgs>>): Prisma__guidelineClient<$Result.GetResult<Prisma.$guidelinePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Guideline that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {guidelineFindFirstOrThrowArgs} args - Arguments to find a Guideline
     * @example
     * // Get one Guideline
     * const guideline = await prisma.guideline.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends guidelineFindFirstOrThrowArgs>(args?: SelectSubset<T, guidelineFindFirstOrThrowArgs<ExtArgs>>): Prisma__guidelineClient<$Result.GetResult<Prisma.$guidelinePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Guidelines that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {guidelineFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Guidelines
     * const guidelines = await prisma.guideline.findMany()
     * 
     * // Get first 10 Guidelines
     * const guidelines = await prisma.guideline.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const guidelineWithIdOnly = await prisma.guideline.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends guidelineFindManyArgs>(args?: SelectSubset<T, guidelineFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$guidelinePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Guideline.
     * @param {guidelineCreateArgs} args - Arguments to create a Guideline.
     * @example
     * // Create one Guideline
     * const Guideline = await prisma.guideline.create({
     *   data: {
     *     // ... data to create a Guideline
     *   }
     * })
     * 
     */
    create<T extends guidelineCreateArgs>(args: SelectSubset<T, guidelineCreateArgs<ExtArgs>>): Prisma__guidelineClient<$Result.GetResult<Prisma.$guidelinePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Guidelines.
     * @param {guidelineCreateManyArgs} args - Arguments to create many Guidelines.
     * @example
     * // Create many Guidelines
     * const guideline = await prisma.guideline.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends guidelineCreateManyArgs>(args?: SelectSubset<T, guidelineCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Guidelines and returns the data saved in the database.
     * @param {guidelineCreateManyAndReturnArgs} args - Arguments to create many Guidelines.
     * @example
     * // Create many Guidelines
     * const guideline = await prisma.guideline.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Guidelines and only return the `id`
     * const guidelineWithIdOnly = await prisma.guideline.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends guidelineCreateManyAndReturnArgs>(args?: SelectSubset<T, guidelineCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$guidelinePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Guideline.
     * @param {guidelineDeleteArgs} args - Arguments to delete one Guideline.
     * @example
     * // Delete one Guideline
     * const Guideline = await prisma.guideline.delete({
     *   where: {
     *     // ... filter to delete one Guideline
     *   }
     * })
     * 
     */
    delete<T extends guidelineDeleteArgs>(args: SelectSubset<T, guidelineDeleteArgs<ExtArgs>>): Prisma__guidelineClient<$Result.GetResult<Prisma.$guidelinePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Guideline.
     * @param {guidelineUpdateArgs} args - Arguments to update one Guideline.
     * @example
     * // Update one Guideline
     * const guideline = await prisma.guideline.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends guidelineUpdateArgs>(args: SelectSubset<T, guidelineUpdateArgs<ExtArgs>>): Prisma__guidelineClient<$Result.GetResult<Prisma.$guidelinePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Guidelines.
     * @param {guidelineDeleteManyArgs} args - Arguments to filter Guidelines to delete.
     * @example
     * // Delete a few Guidelines
     * const { count } = await prisma.guideline.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends guidelineDeleteManyArgs>(args?: SelectSubset<T, guidelineDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Guidelines.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {guidelineUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Guidelines
     * const guideline = await prisma.guideline.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends guidelineUpdateManyArgs>(args: SelectSubset<T, guidelineUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Guideline.
     * @param {guidelineUpsertArgs} args - Arguments to update or create a Guideline.
     * @example
     * // Update or create a Guideline
     * const guideline = await prisma.guideline.upsert({
     *   create: {
     *     // ... data to create a Guideline
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Guideline we want to update
     *   }
     * })
     */
    upsert<T extends guidelineUpsertArgs>(args: SelectSubset<T, guidelineUpsertArgs<ExtArgs>>): Prisma__guidelineClient<$Result.GetResult<Prisma.$guidelinePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Guidelines.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {guidelineCountArgs} args - Arguments to filter Guidelines to count.
     * @example
     * // Count the number of Guidelines
     * const count = await prisma.guideline.count({
     *   where: {
     *     // ... the filter for the Guidelines we want to count
     *   }
     * })
    **/
    count<T extends guidelineCountArgs>(
      args?: Subset<T, guidelineCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GuidelineCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Guideline.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GuidelineAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GuidelineAggregateArgs>(args: Subset<T, GuidelineAggregateArgs>): Prisma.PrismaPromise<GetGuidelineAggregateType<T>>

    /**
     * Group by Guideline.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {guidelineGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends guidelineGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: guidelineGroupByArgs['orderBy'] }
        : { orderBy?: guidelineGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, guidelineGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGuidelineGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the guideline model
   */
  readonly fields: guidelineFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for guideline.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__guidelineClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    location<T extends locationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, locationDefaultArgs<ExtArgs>>): Prisma__locationClient<$Result.GetResult<Prisma.$locationPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the guideline model
   */ 
  interface guidelineFieldRefs {
    readonly id: FieldRef<"guideline", 'Int'>
    readonly locId: FieldRef<"guideline", 'Int'>
    readonly tags: FieldRef<"guideline", 'String[]'>
    readonly created: FieldRef<"guideline", 'DateTime'>
    readonly title: FieldRef<"guideline", 'String'>
    readonly content: FieldRef<"guideline", 'String'>
  }
    

  // Custom InputTypes
  /**
   * guideline findUnique
   */
  export type guidelineFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the guideline
     */
    select?: guidelineSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: guidelineInclude<ExtArgs> | null
    /**
     * Filter, which guideline to fetch.
     */
    where: guidelineWhereUniqueInput
  }

  /**
   * guideline findUniqueOrThrow
   */
  export type guidelineFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the guideline
     */
    select?: guidelineSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: guidelineInclude<ExtArgs> | null
    /**
     * Filter, which guideline to fetch.
     */
    where: guidelineWhereUniqueInput
  }

  /**
   * guideline findFirst
   */
  export type guidelineFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the guideline
     */
    select?: guidelineSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: guidelineInclude<ExtArgs> | null
    /**
     * Filter, which guideline to fetch.
     */
    where?: guidelineWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of guidelines to fetch.
     */
    orderBy?: guidelineOrderByWithRelationInput | guidelineOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for guidelines.
     */
    cursor?: guidelineWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` guidelines from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` guidelines.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of guidelines.
     */
    distinct?: GuidelineScalarFieldEnum | GuidelineScalarFieldEnum[]
  }

  /**
   * guideline findFirstOrThrow
   */
  export type guidelineFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the guideline
     */
    select?: guidelineSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: guidelineInclude<ExtArgs> | null
    /**
     * Filter, which guideline to fetch.
     */
    where?: guidelineWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of guidelines to fetch.
     */
    orderBy?: guidelineOrderByWithRelationInput | guidelineOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for guidelines.
     */
    cursor?: guidelineWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` guidelines from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` guidelines.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of guidelines.
     */
    distinct?: GuidelineScalarFieldEnum | GuidelineScalarFieldEnum[]
  }

  /**
   * guideline findMany
   */
  export type guidelineFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the guideline
     */
    select?: guidelineSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: guidelineInclude<ExtArgs> | null
    /**
     * Filter, which guidelines to fetch.
     */
    where?: guidelineWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of guidelines to fetch.
     */
    orderBy?: guidelineOrderByWithRelationInput | guidelineOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing guidelines.
     */
    cursor?: guidelineWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` guidelines from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` guidelines.
     */
    skip?: number
    distinct?: GuidelineScalarFieldEnum | GuidelineScalarFieldEnum[]
  }

  /**
   * guideline create
   */
  export type guidelineCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the guideline
     */
    select?: guidelineSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: guidelineInclude<ExtArgs> | null
    /**
     * The data needed to create a guideline.
     */
    data: XOR<guidelineCreateInput, guidelineUncheckedCreateInput>
  }

  /**
   * guideline createMany
   */
  export type guidelineCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many guidelines.
     */
    data: guidelineCreateManyInput | guidelineCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * guideline createManyAndReturn
   */
  export type guidelineCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the guideline
     */
    select?: guidelineSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many guidelines.
     */
    data: guidelineCreateManyInput | guidelineCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: guidelineIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * guideline update
   */
  export type guidelineUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the guideline
     */
    select?: guidelineSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: guidelineInclude<ExtArgs> | null
    /**
     * The data needed to update a guideline.
     */
    data: XOR<guidelineUpdateInput, guidelineUncheckedUpdateInput>
    /**
     * Choose, which guideline to update.
     */
    where: guidelineWhereUniqueInput
  }

  /**
   * guideline updateMany
   */
  export type guidelineUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update guidelines.
     */
    data: XOR<guidelineUpdateManyMutationInput, guidelineUncheckedUpdateManyInput>
    /**
     * Filter which guidelines to update
     */
    where?: guidelineWhereInput
  }

  /**
   * guideline upsert
   */
  export type guidelineUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the guideline
     */
    select?: guidelineSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: guidelineInclude<ExtArgs> | null
    /**
     * The filter to search for the guideline to update in case it exists.
     */
    where: guidelineWhereUniqueInput
    /**
     * In case the guideline found by the `where` argument doesn't exist, create a new guideline with this data.
     */
    create: XOR<guidelineCreateInput, guidelineUncheckedCreateInput>
    /**
     * In case the guideline was found with the provided `where` argument, update it with this data.
     */
    update: XOR<guidelineUpdateInput, guidelineUncheckedUpdateInput>
  }

  /**
   * guideline delete
   */
  export type guidelineDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the guideline
     */
    select?: guidelineSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: guidelineInclude<ExtArgs> | null
    /**
     * Filter which guideline to delete.
     */
    where: guidelineWhereUniqueInput
  }

  /**
   * guideline deleteMany
   */
  export type guidelineDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which guidelines to delete
     */
    where?: guidelineWhereInput
  }

  /**
   * guideline without action
   */
  export type guidelineDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the guideline
     */
    select?: guidelineSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: guidelineInclude<ExtArgs> | null
  }


  /**
   * Model location
   */

  export type AggregateLocation = {
    _count: LocationCountAggregateOutputType | null
    _avg: LocationAvgAggregateOutputType | null
    _sum: LocationSumAggregateOutputType | null
    _min: LocationMinAggregateOutputType | null
    _max: LocationMaxAggregateOutputType | null
  }

  export type LocationAvgAggregateOutputType = {
    id: number | null
    parentId: number | null
  }

  export type LocationSumAggregateOutputType = {
    id: number | null
    parentId: number | null
  }

  export type LocationMinAggregateOutputType = {
    id: number | null
    name: string | null
    lat: string | null
    lon: string | null
    type: string | null
    parentId: number | null
    alias: string | null
  }

  export type LocationMaxAggregateOutputType = {
    id: number | null
    name: string | null
    lat: string | null
    lon: string | null
    type: string | null
    parentId: number | null
    alias: string | null
  }

  export type LocationCountAggregateOutputType = {
    id: number
    name: number
    lat: number
    lon: number
    type: number
    parentId: number
    alias: number
    _all: number
  }


  export type LocationAvgAggregateInputType = {
    id?: true
    parentId?: true
  }

  export type LocationSumAggregateInputType = {
    id?: true
    parentId?: true
  }

  export type LocationMinAggregateInputType = {
    id?: true
    name?: true
    lat?: true
    lon?: true
    type?: true
    parentId?: true
    alias?: true
  }

  export type LocationMaxAggregateInputType = {
    id?: true
    name?: true
    lat?: true
    lon?: true
    type?: true
    parentId?: true
    alias?: true
  }

  export type LocationCountAggregateInputType = {
    id?: true
    name?: true
    lat?: true
    lon?: true
    type?: true
    parentId?: true
    alias?: true
    _all?: true
  }

  export type LocationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which location to aggregate.
     */
    where?: locationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of locations to fetch.
     */
    orderBy?: locationOrderByWithRelationInput | locationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: locationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` locations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` locations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned locations
    **/
    _count?: true | LocationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LocationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LocationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LocationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LocationMaxAggregateInputType
  }

  export type GetLocationAggregateType<T extends LocationAggregateArgs> = {
        [P in keyof T & keyof AggregateLocation]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLocation[P]>
      : GetScalarType<T[P], AggregateLocation[P]>
  }




  export type locationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: locationWhereInput
    orderBy?: locationOrderByWithAggregationInput | locationOrderByWithAggregationInput[]
    by: LocationScalarFieldEnum[] | LocationScalarFieldEnum
    having?: locationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LocationCountAggregateInputType | true
    _avg?: LocationAvgAggregateInputType
    _sum?: LocationSumAggregateInputType
    _min?: LocationMinAggregateInputType
    _max?: LocationMaxAggregateInputType
  }

  export type LocationGroupByOutputType = {
    id: number
    name: string
    lat: string
    lon: string
    type: string
    parentId: number | null
    alias: string
    _count: LocationCountAggregateOutputType | null
    _avg: LocationAvgAggregateOutputType | null
    _sum: LocationSumAggregateOutputType | null
    _min: LocationMinAggregateOutputType | null
    _max: LocationMaxAggregateOutputType | null
  }

  type GetLocationGroupByPayload<T extends locationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LocationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LocationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LocationGroupByOutputType[P]>
            : GetScalarType<T[P], LocationGroupByOutputType[P]>
        }
      >
    >


  export type locationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    lat?: boolean
    lon?: boolean
    type?: boolean
    parentId?: boolean
    alias?: boolean
    discussion?: boolean | location$discussionArgs<ExtArgs>
    guideline?: boolean | location$guidelineArgs<ExtArgs>
    location?: boolean | location$locationArgs<ExtArgs>
    other_location?: boolean | location$other_locationArgs<ExtArgs>
    report?: boolean | location$reportArgs<ExtArgs>
    user?: boolean | location$userArgs<ExtArgs>
    visit?: boolean | location$visitArgs<ExtArgs>
    _count?: boolean | LocationCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["location"]>

  export type locationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    lat?: boolean
    lon?: boolean
    type?: boolean
    parentId?: boolean
    alias?: boolean
    location?: boolean | location$locationArgs<ExtArgs>
  }, ExtArgs["result"]["location"]>

  export type locationSelectScalar = {
    id?: boolean
    name?: boolean
    lat?: boolean
    lon?: boolean
    type?: boolean
    parentId?: boolean
    alias?: boolean
  }

  export type locationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    discussion?: boolean | location$discussionArgs<ExtArgs>
    guideline?: boolean | location$guidelineArgs<ExtArgs>
    location?: boolean | location$locationArgs<ExtArgs>
    other_location?: boolean | location$other_locationArgs<ExtArgs>
    report?: boolean | location$reportArgs<ExtArgs>
    user?: boolean | location$userArgs<ExtArgs>
    visit?: boolean | location$visitArgs<ExtArgs>
    _count?: boolean | LocationCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type locationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    location?: boolean | location$locationArgs<ExtArgs>
  }

  export type $locationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "location"
    objects: {
      discussion: Prisma.$discussionPayload<ExtArgs>[]
      guideline: Prisma.$guidelinePayload<ExtArgs>[]
      location: Prisma.$locationPayload<ExtArgs> | null
      other_location: Prisma.$locationPayload<ExtArgs>[]
      report: Prisma.$reportPayload<ExtArgs>[]
      user: Prisma.$userPayload<ExtArgs>[]
      visit: Prisma.$visitPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      lat: string
      lon: string
      type: string
      parentId: number | null
      alias: string
    }, ExtArgs["result"]["location"]>
    composites: {}
  }

  type locationGetPayload<S extends boolean | null | undefined | locationDefaultArgs> = $Result.GetResult<Prisma.$locationPayload, S>

  type locationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<locationFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: LocationCountAggregateInputType | true
    }

  export interface locationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['location'], meta: { name: 'location' } }
    /**
     * Find zero or one Location that matches the filter.
     * @param {locationFindUniqueArgs} args - Arguments to find a Location
     * @example
     * // Get one Location
     * const location = await prisma.location.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends locationFindUniqueArgs>(args: SelectSubset<T, locationFindUniqueArgs<ExtArgs>>): Prisma__locationClient<$Result.GetResult<Prisma.$locationPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Location that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {locationFindUniqueOrThrowArgs} args - Arguments to find a Location
     * @example
     * // Get one Location
     * const location = await prisma.location.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends locationFindUniqueOrThrowArgs>(args: SelectSubset<T, locationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__locationClient<$Result.GetResult<Prisma.$locationPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Location that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {locationFindFirstArgs} args - Arguments to find a Location
     * @example
     * // Get one Location
     * const location = await prisma.location.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends locationFindFirstArgs>(args?: SelectSubset<T, locationFindFirstArgs<ExtArgs>>): Prisma__locationClient<$Result.GetResult<Prisma.$locationPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Location that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {locationFindFirstOrThrowArgs} args - Arguments to find a Location
     * @example
     * // Get one Location
     * const location = await prisma.location.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends locationFindFirstOrThrowArgs>(args?: SelectSubset<T, locationFindFirstOrThrowArgs<ExtArgs>>): Prisma__locationClient<$Result.GetResult<Prisma.$locationPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Locations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {locationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Locations
     * const locations = await prisma.location.findMany()
     * 
     * // Get first 10 Locations
     * const locations = await prisma.location.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const locationWithIdOnly = await prisma.location.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends locationFindManyArgs>(args?: SelectSubset<T, locationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$locationPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Location.
     * @param {locationCreateArgs} args - Arguments to create a Location.
     * @example
     * // Create one Location
     * const Location = await prisma.location.create({
     *   data: {
     *     // ... data to create a Location
     *   }
     * })
     * 
     */
    create<T extends locationCreateArgs>(args: SelectSubset<T, locationCreateArgs<ExtArgs>>): Prisma__locationClient<$Result.GetResult<Prisma.$locationPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Locations.
     * @param {locationCreateManyArgs} args - Arguments to create many Locations.
     * @example
     * // Create many Locations
     * const location = await prisma.location.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends locationCreateManyArgs>(args?: SelectSubset<T, locationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Locations and returns the data saved in the database.
     * @param {locationCreateManyAndReturnArgs} args - Arguments to create many Locations.
     * @example
     * // Create many Locations
     * const location = await prisma.location.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Locations and only return the `id`
     * const locationWithIdOnly = await prisma.location.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends locationCreateManyAndReturnArgs>(args?: SelectSubset<T, locationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$locationPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Location.
     * @param {locationDeleteArgs} args - Arguments to delete one Location.
     * @example
     * // Delete one Location
     * const Location = await prisma.location.delete({
     *   where: {
     *     // ... filter to delete one Location
     *   }
     * })
     * 
     */
    delete<T extends locationDeleteArgs>(args: SelectSubset<T, locationDeleteArgs<ExtArgs>>): Prisma__locationClient<$Result.GetResult<Prisma.$locationPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Location.
     * @param {locationUpdateArgs} args - Arguments to update one Location.
     * @example
     * // Update one Location
     * const location = await prisma.location.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends locationUpdateArgs>(args: SelectSubset<T, locationUpdateArgs<ExtArgs>>): Prisma__locationClient<$Result.GetResult<Prisma.$locationPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Locations.
     * @param {locationDeleteManyArgs} args - Arguments to filter Locations to delete.
     * @example
     * // Delete a few Locations
     * const { count } = await prisma.location.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends locationDeleteManyArgs>(args?: SelectSubset<T, locationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Locations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {locationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Locations
     * const location = await prisma.location.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends locationUpdateManyArgs>(args: SelectSubset<T, locationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Location.
     * @param {locationUpsertArgs} args - Arguments to update or create a Location.
     * @example
     * // Update or create a Location
     * const location = await prisma.location.upsert({
     *   create: {
     *     // ... data to create a Location
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Location we want to update
     *   }
     * })
     */
    upsert<T extends locationUpsertArgs>(args: SelectSubset<T, locationUpsertArgs<ExtArgs>>): Prisma__locationClient<$Result.GetResult<Prisma.$locationPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Locations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {locationCountArgs} args - Arguments to filter Locations to count.
     * @example
     * // Count the number of Locations
     * const count = await prisma.location.count({
     *   where: {
     *     // ... the filter for the Locations we want to count
     *   }
     * })
    **/
    count<T extends locationCountArgs>(
      args?: Subset<T, locationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LocationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Location.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LocationAggregateArgs>(args: Subset<T, LocationAggregateArgs>): Prisma.PrismaPromise<GetLocationAggregateType<T>>

    /**
     * Group by Location.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {locationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends locationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: locationGroupByArgs['orderBy'] }
        : { orderBy?: locationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, locationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLocationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the location model
   */
  readonly fields: locationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for location.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__locationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    discussion<T extends location$discussionArgs<ExtArgs> = {}>(args?: Subset<T, location$discussionArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$discussionPayload<ExtArgs>, T, "findMany"> | Null>
    guideline<T extends location$guidelineArgs<ExtArgs> = {}>(args?: Subset<T, location$guidelineArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$guidelinePayload<ExtArgs>, T, "findMany"> | Null>
    location<T extends location$locationArgs<ExtArgs> = {}>(args?: Subset<T, location$locationArgs<ExtArgs>>): Prisma__locationClient<$Result.GetResult<Prisma.$locationPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    other_location<T extends location$other_locationArgs<ExtArgs> = {}>(args?: Subset<T, location$other_locationArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$locationPayload<ExtArgs>, T, "findMany"> | Null>
    report<T extends location$reportArgs<ExtArgs> = {}>(args?: Subset<T, location$reportArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$reportPayload<ExtArgs>, T, "findMany"> | Null>
    user<T extends location$userArgs<ExtArgs> = {}>(args?: Subset<T, location$userArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "findMany"> | Null>
    visit<T extends location$visitArgs<ExtArgs> = {}>(args?: Subset<T, location$visitArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$visitPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the location model
   */ 
  interface locationFieldRefs {
    readonly id: FieldRef<"location", 'Int'>
    readonly name: FieldRef<"location", 'String'>
    readonly lat: FieldRef<"location", 'String'>
    readonly lon: FieldRef<"location", 'String'>
    readonly type: FieldRef<"location", 'String'>
    readonly parentId: FieldRef<"location", 'Int'>
    readonly alias: FieldRef<"location", 'String'>
  }
    

  // Custom InputTypes
  /**
   * location findUnique
   */
  export type locationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the location
     */
    select?: locationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: locationInclude<ExtArgs> | null
    /**
     * Filter, which location to fetch.
     */
    where: locationWhereUniqueInput
  }

  /**
   * location findUniqueOrThrow
   */
  export type locationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the location
     */
    select?: locationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: locationInclude<ExtArgs> | null
    /**
     * Filter, which location to fetch.
     */
    where: locationWhereUniqueInput
  }

  /**
   * location findFirst
   */
  export type locationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the location
     */
    select?: locationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: locationInclude<ExtArgs> | null
    /**
     * Filter, which location to fetch.
     */
    where?: locationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of locations to fetch.
     */
    orderBy?: locationOrderByWithRelationInput | locationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for locations.
     */
    cursor?: locationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` locations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` locations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of locations.
     */
    distinct?: LocationScalarFieldEnum | LocationScalarFieldEnum[]
  }

  /**
   * location findFirstOrThrow
   */
  export type locationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the location
     */
    select?: locationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: locationInclude<ExtArgs> | null
    /**
     * Filter, which location to fetch.
     */
    where?: locationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of locations to fetch.
     */
    orderBy?: locationOrderByWithRelationInput | locationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for locations.
     */
    cursor?: locationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` locations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` locations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of locations.
     */
    distinct?: LocationScalarFieldEnum | LocationScalarFieldEnum[]
  }

  /**
   * location findMany
   */
  export type locationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the location
     */
    select?: locationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: locationInclude<ExtArgs> | null
    /**
     * Filter, which locations to fetch.
     */
    where?: locationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of locations to fetch.
     */
    orderBy?: locationOrderByWithRelationInput | locationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing locations.
     */
    cursor?: locationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` locations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` locations.
     */
    skip?: number
    distinct?: LocationScalarFieldEnum | LocationScalarFieldEnum[]
  }

  /**
   * location create
   */
  export type locationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the location
     */
    select?: locationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: locationInclude<ExtArgs> | null
    /**
     * The data needed to create a location.
     */
    data: XOR<locationCreateInput, locationUncheckedCreateInput>
  }

  /**
   * location createMany
   */
  export type locationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many locations.
     */
    data: locationCreateManyInput | locationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * location createManyAndReturn
   */
  export type locationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the location
     */
    select?: locationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many locations.
     */
    data: locationCreateManyInput | locationCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: locationIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * location update
   */
  export type locationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the location
     */
    select?: locationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: locationInclude<ExtArgs> | null
    /**
     * The data needed to update a location.
     */
    data: XOR<locationUpdateInput, locationUncheckedUpdateInput>
    /**
     * Choose, which location to update.
     */
    where: locationWhereUniqueInput
  }

  /**
   * location updateMany
   */
  export type locationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update locations.
     */
    data: XOR<locationUpdateManyMutationInput, locationUncheckedUpdateManyInput>
    /**
     * Filter which locations to update
     */
    where?: locationWhereInput
  }

  /**
   * location upsert
   */
  export type locationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the location
     */
    select?: locationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: locationInclude<ExtArgs> | null
    /**
     * The filter to search for the location to update in case it exists.
     */
    where: locationWhereUniqueInput
    /**
     * In case the location found by the `where` argument doesn't exist, create a new location with this data.
     */
    create: XOR<locationCreateInput, locationUncheckedCreateInput>
    /**
     * In case the location was found with the provided `where` argument, update it with this data.
     */
    update: XOR<locationUpdateInput, locationUncheckedUpdateInput>
  }

  /**
   * location delete
   */
  export type locationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the location
     */
    select?: locationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: locationInclude<ExtArgs> | null
    /**
     * Filter which location to delete.
     */
    where: locationWhereUniqueInput
  }

  /**
   * location deleteMany
   */
  export type locationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which locations to delete
     */
    where?: locationWhereInput
  }

  /**
   * location.discussion
   */
  export type location$discussionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the discussion
     */
    select?: discussionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: discussionInclude<ExtArgs> | null
    where?: discussionWhereInput
    orderBy?: discussionOrderByWithRelationInput | discussionOrderByWithRelationInput[]
    cursor?: discussionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DiscussionScalarFieldEnum | DiscussionScalarFieldEnum[]
  }

  /**
   * location.guideline
   */
  export type location$guidelineArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the guideline
     */
    select?: guidelineSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: guidelineInclude<ExtArgs> | null
    where?: guidelineWhereInput
    orderBy?: guidelineOrderByWithRelationInput | guidelineOrderByWithRelationInput[]
    cursor?: guidelineWhereUniqueInput
    take?: number
    skip?: number
    distinct?: GuidelineScalarFieldEnum | GuidelineScalarFieldEnum[]
  }

  /**
   * location.location
   */
  export type location$locationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the location
     */
    select?: locationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: locationInclude<ExtArgs> | null
    where?: locationWhereInput
  }

  /**
   * location.other_location
   */
  export type location$other_locationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the location
     */
    select?: locationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: locationInclude<ExtArgs> | null
    where?: locationWhereInput
    orderBy?: locationOrderByWithRelationInput | locationOrderByWithRelationInput[]
    cursor?: locationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LocationScalarFieldEnum | LocationScalarFieldEnum[]
  }

  /**
   * location.report
   */
  export type location$reportArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the report
     */
    select?: reportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: reportInclude<ExtArgs> | null
    where?: reportWhereInput
    orderBy?: reportOrderByWithRelationInput | reportOrderByWithRelationInput[]
    cursor?: reportWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReportScalarFieldEnum | ReportScalarFieldEnum[]
  }

  /**
   * location.user
   */
  export type location$userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userInclude<ExtArgs> | null
    where?: userWhereInput
    orderBy?: userOrderByWithRelationInput | userOrderByWithRelationInput[]
    cursor?: userWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * location.visit
   */
  export type location$visitArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the visit
     */
    select?: visitSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: visitInclude<ExtArgs> | null
    where?: visitWhereInput
    orderBy?: visitOrderByWithRelationInput | visitOrderByWithRelationInput[]
    cursor?: visitWhereUniqueInput
    take?: number
    skip?: number
    distinct?: VisitScalarFieldEnum | VisitScalarFieldEnum[]
  }

  /**
   * location without action
   */
  export type locationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the location
     */
    select?: locationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: locationInclude<ExtArgs> | null
  }


  /**
   * Model reply
   */

  export type AggregateReply = {
    _count: ReplyCountAggregateOutputType | null
    _avg: ReplyAvgAggregateOutputType | null
    _sum: ReplySumAggregateOutputType | null
    _min: ReplyMinAggregateOutputType | null
    _max: ReplyMaxAggregateOutputType | null
  }

  export type ReplyAvgAggregateOutputType = {
    id: number | null
    creatorId: number | null
    discussionId: number | null
    parentId: number | null
  }

  export type ReplySumAggregateOutputType = {
    id: number | null
    creatorId: number | null
    discussionId: number | null
    parentId: number | null
  }

  export type ReplyMinAggregateOutputType = {
    id: number | null
    content: string | null
    created_at: Date | null
    creatorId: number | null
    discussionId: number | null
    parentId: number | null
  }

  export type ReplyMaxAggregateOutputType = {
    id: number | null
    content: string | null
    created_at: Date | null
    creatorId: number | null
    discussionId: number | null
    parentId: number | null
  }

  export type ReplyCountAggregateOutputType = {
    id: number
    content: number
    created_at: number
    creatorId: number
    discussionId: number
    parentId: number
    _all: number
  }


  export type ReplyAvgAggregateInputType = {
    id?: true
    creatorId?: true
    discussionId?: true
    parentId?: true
  }

  export type ReplySumAggregateInputType = {
    id?: true
    creatorId?: true
    discussionId?: true
    parentId?: true
  }

  export type ReplyMinAggregateInputType = {
    id?: true
    content?: true
    created_at?: true
    creatorId?: true
    discussionId?: true
    parentId?: true
  }

  export type ReplyMaxAggregateInputType = {
    id?: true
    content?: true
    created_at?: true
    creatorId?: true
    discussionId?: true
    parentId?: true
  }

  export type ReplyCountAggregateInputType = {
    id?: true
    content?: true
    created_at?: true
    creatorId?: true
    discussionId?: true
    parentId?: true
    _all?: true
  }

  export type ReplyAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which reply to aggregate.
     */
    where?: replyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of replies to fetch.
     */
    orderBy?: replyOrderByWithRelationInput | replyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: replyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` replies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` replies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned replies
    **/
    _count?: true | ReplyCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ReplyAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ReplySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ReplyMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ReplyMaxAggregateInputType
  }

  export type GetReplyAggregateType<T extends ReplyAggregateArgs> = {
        [P in keyof T & keyof AggregateReply]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateReply[P]>
      : GetScalarType<T[P], AggregateReply[P]>
  }




  export type replyGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: replyWhereInput
    orderBy?: replyOrderByWithAggregationInput | replyOrderByWithAggregationInput[]
    by: ReplyScalarFieldEnum[] | ReplyScalarFieldEnum
    having?: replyScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ReplyCountAggregateInputType | true
    _avg?: ReplyAvgAggregateInputType
    _sum?: ReplySumAggregateInputType
    _min?: ReplyMinAggregateInputType
    _max?: ReplyMaxAggregateInputType
  }

  export type ReplyGroupByOutputType = {
    id: number
    content: string
    created_at: Date
    creatorId: number
    discussionId: number | null
    parentId: number | null
    _count: ReplyCountAggregateOutputType | null
    _avg: ReplyAvgAggregateOutputType | null
    _sum: ReplySumAggregateOutputType | null
    _min: ReplyMinAggregateOutputType | null
    _max: ReplyMaxAggregateOutputType | null
  }

  type GetReplyGroupByPayload<T extends replyGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ReplyGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ReplyGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ReplyGroupByOutputType[P]>
            : GetScalarType<T[P], ReplyGroupByOutputType[P]>
        }
      >
    >


  export type replySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    content?: boolean
    created_at?: boolean
    creatorId?: boolean
    discussionId?: boolean
    parentId?: boolean
    user?: boolean | userDefaultArgs<ExtArgs>
    discussions?: boolean | reply$discussionsArgs<ExtArgs>
    reply?: boolean | reply$replyArgs<ExtArgs>
    other_reply?: boolean | reply$other_replyArgs<ExtArgs>
    _count?: boolean | ReplyCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["reply"]>

  export type replySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    content?: boolean
    created_at?: boolean
    creatorId?: boolean
    discussionId?: boolean
    parentId?: boolean
    user?: boolean | userDefaultArgs<ExtArgs>
    discussions?: boolean | reply$discussionsArgs<ExtArgs>
    reply?: boolean | reply$replyArgs<ExtArgs>
  }, ExtArgs["result"]["reply"]>

  export type replySelectScalar = {
    id?: boolean
    content?: boolean
    created_at?: boolean
    creatorId?: boolean
    discussionId?: boolean
    parentId?: boolean
  }

  export type replyInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | userDefaultArgs<ExtArgs>
    discussions?: boolean | reply$discussionsArgs<ExtArgs>
    reply?: boolean | reply$replyArgs<ExtArgs>
    other_reply?: boolean | reply$other_replyArgs<ExtArgs>
    _count?: boolean | ReplyCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type replyIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | userDefaultArgs<ExtArgs>
    discussions?: boolean | reply$discussionsArgs<ExtArgs>
    reply?: boolean | reply$replyArgs<ExtArgs>
  }

  export type $replyPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "reply"
    objects: {
      user: Prisma.$userPayload<ExtArgs>
      discussions: Prisma.$discussionPayload<ExtArgs> | null
      reply: Prisma.$replyPayload<ExtArgs> | null
      other_reply: Prisma.$replyPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      content: string
      created_at: Date
      creatorId: number
      discussionId: number | null
      parentId: number | null
    }, ExtArgs["result"]["reply"]>
    composites: {}
  }

  type replyGetPayload<S extends boolean | null | undefined | replyDefaultArgs> = $Result.GetResult<Prisma.$replyPayload, S>

  type replyCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<replyFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ReplyCountAggregateInputType | true
    }

  export interface replyDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['reply'], meta: { name: 'reply' } }
    /**
     * Find zero or one Reply that matches the filter.
     * @param {replyFindUniqueArgs} args - Arguments to find a Reply
     * @example
     * // Get one Reply
     * const reply = await prisma.reply.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends replyFindUniqueArgs>(args: SelectSubset<T, replyFindUniqueArgs<ExtArgs>>): Prisma__replyClient<$Result.GetResult<Prisma.$replyPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Reply that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {replyFindUniqueOrThrowArgs} args - Arguments to find a Reply
     * @example
     * // Get one Reply
     * const reply = await prisma.reply.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends replyFindUniqueOrThrowArgs>(args: SelectSubset<T, replyFindUniqueOrThrowArgs<ExtArgs>>): Prisma__replyClient<$Result.GetResult<Prisma.$replyPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Reply that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {replyFindFirstArgs} args - Arguments to find a Reply
     * @example
     * // Get one Reply
     * const reply = await prisma.reply.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends replyFindFirstArgs>(args?: SelectSubset<T, replyFindFirstArgs<ExtArgs>>): Prisma__replyClient<$Result.GetResult<Prisma.$replyPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Reply that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {replyFindFirstOrThrowArgs} args - Arguments to find a Reply
     * @example
     * // Get one Reply
     * const reply = await prisma.reply.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends replyFindFirstOrThrowArgs>(args?: SelectSubset<T, replyFindFirstOrThrowArgs<ExtArgs>>): Prisma__replyClient<$Result.GetResult<Prisma.$replyPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Replies that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {replyFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Replies
     * const replies = await prisma.reply.findMany()
     * 
     * // Get first 10 Replies
     * const replies = await prisma.reply.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const replyWithIdOnly = await prisma.reply.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends replyFindManyArgs>(args?: SelectSubset<T, replyFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$replyPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Reply.
     * @param {replyCreateArgs} args - Arguments to create a Reply.
     * @example
     * // Create one Reply
     * const Reply = await prisma.reply.create({
     *   data: {
     *     // ... data to create a Reply
     *   }
     * })
     * 
     */
    create<T extends replyCreateArgs>(args: SelectSubset<T, replyCreateArgs<ExtArgs>>): Prisma__replyClient<$Result.GetResult<Prisma.$replyPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Replies.
     * @param {replyCreateManyArgs} args - Arguments to create many Replies.
     * @example
     * // Create many Replies
     * const reply = await prisma.reply.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends replyCreateManyArgs>(args?: SelectSubset<T, replyCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Replies and returns the data saved in the database.
     * @param {replyCreateManyAndReturnArgs} args - Arguments to create many Replies.
     * @example
     * // Create many Replies
     * const reply = await prisma.reply.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Replies and only return the `id`
     * const replyWithIdOnly = await prisma.reply.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends replyCreateManyAndReturnArgs>(args?: SelectSubset<T, replyCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$replyPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Reply.
     * @param {replyDeleteArgs} args - Arguments to delete one Reply.
     * @example
     * // Delete one Reply
     * const Reply = await prisma.reply.delete({
     *   where: {
     *     // ... filter to delete one Reply
     *   }
     * })
     * 
     */
    delete<T extends replyDeleteArgs>(args: SelectSubset<T, replyDeleteArgs<ExtArgs>>): Prisma__replyClient<$Result.GetResult<Prisma.$replyPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Reply.
     * @param {replyUpdateArgs} args - Arguments to update one Reply.
     * @example
     * // Update one Reply
     * const reply = await prisma.reply.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends replyUpdateArgs>(args: SelectSubset<T, replyUpdateArgs<ExtArgs>>): Prisma__replyClient<$Result.GetResult<Prisma.$replyPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Replies.
     * @param {replyDeleteManyArgs} args - Arguments to filter Replies to delete.
     * @example
     * // Delete a few Replies
     * const { count } = await prisma.reply.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends replyDeleteManyArgs>(args?: SelectSubset<T, replyDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Replies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {replyUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Replies
     * const reply = await prisma.reply.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends replyUpdateManyArgs>(args: SelectSubset<T, replyUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Reply.
     * @param {replyUpsertArgs} args - Arguments to update or create a Reply.
     * @example
     * // Update or create a Reply
     * const reply = await prisma.reply.upsert({
     *   create: {
     *     // ... data to create a Reply
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Reply we want to update
     *   }
     * })
     */
    upsert<T extends replyUpsertArgs>(args: SelectSubset<T, replyUpsertArgs<ExtArgs>>): Prisma__replyClient<$Result.GetResult<Prisma.$replyPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Replies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {replyCountArgs} args - Arguments to filter Replies to count.
     * @example
     * // Count the number of Replies
     * const count = await prisma.reply.count({
     *   where: {
     *     // ... the filter for the Replies we want to count
     *   }
     * })
    **/
    count<T extends replyCountArgs>(
      args?: Subset<T, replyCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ReplyCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Reply.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReplyAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ReplyAggregateArgs>(args: Subset<T, ReplyAggregateArgs>): Prisma.PrismaPromise<GetReplyAggregateType<T>>

    /**
     * Group by Reply.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {replyGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends replyGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: replyGroupByArgs['orderBy'] }
        : { orderBy?: replyGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, replyGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetReplyGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the reply model
   */
  readonly fields: replyFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for reply.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__replyClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends userDefaultArgs<ExtArgs> = {}>(args?: Subset<T, userDefaultArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    discussions<T extends reply$discussionsArgs<ExtArgs> = {}>(args?: Subset<T, reply$discussionsArgs<ExtArgs>>): Prisma__discussionClient<$Result.GetResult<Prisma.$discussionPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    reply<T extends reply$replyArgs<ExtArgs> = {}>(args?: Subset<T, reply$replyArgs<ExtArgs>>): Prisma__replyClient<$Result.GetResult<Prisma.$replyPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    other_reply<T extends reply$other_replyArgs<ExtArgs> = {}>(args?: Subset<T, reply$other_replyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$replyPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the reply model
   */ 
  interface replyFieldRefs {
    readonly id: FieldRef<"reply", 'Int'>
    readonly content: FieldRef<"reply", 'String'>
    readonly created_at: FieldRef<"reply", 'DateTime'>
    readonly creatorId: FieldRef<"reply", 'Int'>
    readonly discussionId: FieldRef<"reply", 'Int'>
    readonly parentId: FieldRef<"reply", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * reply findUnique
   */
  export type replyFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the reply
     */
    select?: replySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: replyInclude<ExtArgs> | null
    /**
     * Filter, which reply to fetch.
     */
    where: replyWhereUniqueInput
  }

  /**
   * reply findUniqueOrThrow
   */
  export type replyFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the reply
     */
    select?: replySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: replyInclude<ExtArgs> | null
    /**
     * Filter, which reply to fetch.
     */
    where: replyWhereUniqueInput
  }

  /**
   * reply findFirst
   */
  export type replyFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the reply
     */
    select?: replySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: replyInclude<ExtArgs> | null
    /**
     * Filter, which reply to fetch.
     */
    where?: replyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of replies to fetch.
     */
    orderBy?: replyOrderByWithRelationInput | replyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for replies.
     */
    cursor?: replyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` replies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` replies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of replies.
     */
    distinct?: ReplyScalarFieldEnum | ReplyScalarFieldEnum[]
  }

  /**
   * reply findFirstOrThrow
   */
  export type replyFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the reply
     */
    select?: replySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: replyInclude<ExtArgs> | null
    /**
     * Filter, which reply to fetch.
     */
    where?: replyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of replies to fetch.
     */
    orderBy?: replyOrderByWithRelationInput | replyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for replies.
     */
    cursor?: replyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` replies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` replies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of replies.
     */
    distinct?: ReplyScalarFieldEnum | ReplyScalarFieldEnum[]
  }

  /**
   * reply findMany
   */
  export type replyFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the reply
     */
    select?: replySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: replyInclude<ExtArgs> | null
    /**
     * Filter, which replies to fetch.
     */
    where?: replyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of replies to fetch.
     */
    orderBy?: replyOrderByWithRelationInput | replyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing replies.
     */
    cursor?: replyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` replies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` replies.
     */
    skip?: number
    distinct?: ReplyScalarFieldEnum | ReplyScalarFieldEnum[]
  }

  /**
   * reply create
   */
  export type replyCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the reply
     */
    select?: replySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: replyInclude<ExtArgs> | null
    /**
     * The data needed to create a reply.
     */
    data: XOR<replyCreateInput, replyUncheckedCreateInput>
  }

  /**
   * reply createMany
   */
  export type replyCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many replies.
     */
    data: replyCreateManyInput | replyCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * reply createManyAndReturn
   */
  export type replyCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the reply
     */
    select?: replySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many replies.
     */
    data: replyCreateManyInput | replyCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: replyIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * reply update
   */
  export type replyUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the reply
     */
    select?: replySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: replyInclude<ExtArgs> | null
    /**
     * The data needed to update a reply.
     */
    data: XOR<replyUpdateInput, replyUncheckedUpdateInput>
    /**
     * Choose, which reply to update.
     */
    where: replyWhereUniqueInput
  }

  /**
   * reply updateMany
   */
  export type replyUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update replies.
     */
    data: XOR<replyUpdateManyMutationInput, replyUncheckedUpdateManyInput>
    /**
     * Filter which replies to update
     */
    where?: replyWhereInput
  }

  /**
   * reply upsert
   */
  export type replyUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the reply
     */
    select?: replySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: replyInclude<ExtArgs> | null
    /**
     * The filter to search for the reply to update in case it exists.
     */
    where: replyWhereUniqueInput
    /**
     * In case the reply found by the `where` argument doesn't exist, create a new reply with this data.
     */
    create: XOR<replyCreateInput, replyUncheckedCreateInput>
    /**
     * In case the reply was found with the provided `where` argument, update it with this data.
     */
    update: XOR<replyUpdateInput, replyUncheckedUpdateInput>
  }

  /**
   * reply delete
   */
  export type replyDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the reply
     */
    select?: replySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: replyInclude<ExtArgs> | null
    /**
     * Filter which reply to delete.
     */
    where: replyWhereUniqueInput
  }

  /**
   * reply deleteMany
   */
  export type replyDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which replies to delete
     */
    where?: replyWhereInput
  }

  /**
   * reply.discussions
   */
  export type reply$discussionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the discussion
     */
    select?: discussionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: discussionInclude<ExtArgs> | null
    where?: discussionWhereInput
  }

  /**
   * reply.reply
   */
  export type reply$replyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the reply
     */
    select?: replySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: replyInclude<ExtArgs> | null
    where?: replyWhereInput
  }

  /**
   * reply.other_reply
   */
  export type reply$other_replyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the reply
     */
    select?: replySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: replyInclude<ExtArgs> | null
    where?: replyWhereInput
    orderBy?: replyOrderByWithRelationInput | replyOrderByWithRelationInput[]
    cursor?: replyWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReplyScalarFieldEnum | ReplyScalarFieldEnum[]
  }

  /**
   * reply without action
   */
  export type replyDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the reply
     */
    select?: replySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: replyInclude<ExtArgs> | null
  }


  /**
   * Model report
   */

  export type AggregateReport = {
    _count: ReportCountAggregateOutputType | null
    _avg: ReportAvgAggregateOutputType | null
    _sum: ReportSumAggregateOutputType | null
    _min: ReportMinAggregateOutputType | null
    _max: ReportMaxAggregateOutputType | null
  }

  export type ReportAvgAggregateOutputType = {
    id: number | null
    locId: number | null
  }

  export type ReportSumAggregateOutputType = {
    id: number | null
    locId: number | null
  }

  export type ReportMinAggregateOutputType = {
    id: number | null
    name: string | null
    desc: string | null
    created: Date | null
    locId: number | null
    tag: string | null
  }

  export type ReportMaxAggregateOutputType = {
    id: number | null
    name: string | null
    desc: string | null
    created: Date | null
    locId: number | null
    tag: string | null
  }

  export type ReportCountAggregateOutputType = {
    id: number
    name: number
    desc: number
    created: number
    locId: number
    tag: number
    _all: number
  }


  export type ReportAvgAggregateInputType = {
    id?: true
    locId?: true
  }

  export type ReportSumAggregateInputType = {
    id?: true
    locId?: true
  }

  export type ReportMinAggregateInputType = {
    id?: true
    name?: true
    desc?: true
    created?: true
    locId?: true
    tag?: true
  }

  export type ReportMaxAggregateInputType = {
    id?: true
    name?: true
    desc?: true
    created?: true
    locId?: true
    tag?: true
  }

  export type ReportCountAggregateInputType = {
    id?: true
    name?: true
    desc?: true
    created?: true
    locId?: true
    tag?: true
    _all?: true
  }

  export type ReportAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which report to aggregate.
     */
    where?: reportWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of reports to fetch.
     */
    orderBy?: reportOrderByWithRelationInput | reportOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: reportWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` reports from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` reports.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned reports
    **/
    _count?: true | ReportCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ReportAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ReportSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ReportMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ReportMaxAggregateInputType
  }

  export type GetReportAggregateType<T extends ReportAggregateArgs> = {
        [P in keyof T & keyof AggregateReport]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateReport[P]>
      : GetScalarType<T[P], AggregateReport[P]>
  }




  export type reportGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: reportWhereInput
    orderBy?: reportOrderByWithAggregationInput | reportOrderByWithAggregationInput[]
    by: ReportScalarFieldEnum[] | ReportScalarFieldEnum
    having?: reportScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ReportCountAggregateInputType | true
    _avg?: ReportAvgAggregateInputType
    _sum?: ReportSumAggregateInputType
    _min?: ReportMinAggregateInputType
    _max?: ReportMaxAggregateInputType
  }

  export type ReportGroupByOutputType = {
    id: number
    name: string
    desc: string
    created: Date
    locId: number
    tag: string | null
    _count: ReportCountAggregateOutputType | null
    _avg: ReportAvgAggregateOutputType | null
    _sum: ReportSumAggregateOutputType | null
    _min: ReportMinAggregateOutputType | null
    _max: ReportMaxAggregateOutputType | null
  }

  type GetReportGroupByPayload<T extends reportGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ReportGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ReportGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ReportGroupByOutputType[P]>
            : GetScalarType<T[P], ReportGroupByOutputType[P]>
        }
      >
    >


  export type reportSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    desc?: boolean
    created?: boolean
    locId?: boolean
    tag?: boolean
    location?: boolean | locationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["report"]>

  export type reportSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    desc?: boolean
    created?: boolean
    locId?: boolean
    tag?: boolean
    location?: boolean | locationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["report"]>

  export type reportSelectScalar = {
    id?: boolean
    name?: boolean
    desc?: boolean
    created?: boolean
    locId?: boolean
    tag?: boolean
  }

  export type reportInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    location?: boolean | locationDefaultArgs<ExtArgs>
  }
  export type reportIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    location?: boolean | locationDefaultArgs<ExtArgs>
  }

  export type $reportPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "report"
    objects: {
      location: Prisma.$locationPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      desc: string
      created: Date
      locId: number
      tag: string | null
    }, ExtArgs["result"]["report"]>
    composites: {}
  }

  type reportGetPayload<S extends boolean | null | undefined | reportDefaultArgs> = $Result.GetResult<Prisma.$reportPayload, S>

  type reportCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<reportFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ReportCountAggregateInputType | true
    }

  export interface reportDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['report'], meta: { name: 'report' } }
    /**
     * Find zero or one Report that matches the filter.
     * @param {reportFindUniqueArgs} args - Arguments to find a Report
     * @example
     * // Get one Report
     * const report = await prisma.report.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends reportFindUniqueArgs>(args: SelectSubset<T, reportFindUniqueArgs<ExtArgs>>): Prisma__reportClient<$Result.GetResult<Prisma.$reportPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Report that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {reportFindUniqueOrThrowArgs} args - Arguments to find a Report
     * @example
     * // Get one Report
     * const report = await prisma.report.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends reportFindUniqueOrThrowArgs>(args: SelectSubset<T, reportFindUniqueOrThrowArgs<ExtArgs>>): Prisma__reportClient<$Result.GetResult<Prisma.$reportPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Report that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {reportFindFirstArgs} args - Arguments to find a Report
     * @example
     * // Get one Report
     * const report = await prisma.report.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends reportFindFirstArgs>(args?: SelectSubset<T, reportFindFirstArgs<ExtArgs>>): Prisma__reportClient<$Result.GetResult<Prisma.$reportPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Report that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {reportFindFirstOrThrowArgs} args - Arguments to find a Report
     * @example
     * // Get one Report
     * const report = await prisma.report.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends reportFindFirstOrThrowArgs>(args?: SelectSubset<T, reportFindFirstOrThrowArgs<ExtArgs>>): Prisma__reportClient<$Result.GetResult<Prisma.$reportPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Reports that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {reportFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Reports
     * const reports = await prisma.report.findMany()
     * 
     * // Get first 10 Reports
     * const reports = await prisma.report.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const reportWithIdOnly = await prisma.report.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends reportFindManyArgs>(args?: SelectSubset<T, reportFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$reportPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Report.
     * @param {reportCreateArgs} args - Arguments to create a Report.
     * @example
     * // Create one Report
     * const Report = await prisma.report.create({
     *   data: {
     *     // ... data to create a Report
     *   }
     * })
     * 
     */
    create<T extends reportCreateArgs>(args: SelectSubset<T, reportCreateArgs<ExtArgs>>): Prisma__reportClient<$Result.GetResult<Prisma.$reportPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Reports.
     * @param {reportCreateManyArgs} args - Arguments to create many Reports.
     * @example
     * // Create many Reports
     * const report = await prisma.report.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends reportCreateManyArgs>(args?: SelectSubset<T, reportCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Reports and returns the data saved in the database.
     * @param {reportCreateManyAndReturnArgs} args - Arguments to create many Reports.
     * @example
     * // Create many Reports
     * const report = await prisma.report.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Reports and only return the `id`
     * const reportWithIdOnly = await prisma.report.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends reportCreateManyAndReturnArgs>(args?: SelectSubset<T, reportCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$reportPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Report.
     * @param {reportDeleteArgs} args - Arguments to delete one Report.
     * @example
     * // Delete one Report
     * const Report = await prisma.report.delete({
     *   where: {
     *     // ... filter to delete one Report
     *   }
     * })
     * 
     */
    delete<T extends reportDeleteArgs>(args: SelectSubset<T, reportDeleteArgs<ExtArgs>>): Prisma__reportClient<$Result.GetResult<Prisma.$reportPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Report.
     * @param {reportUpdateArgs} args - Arguments to update one Report.
     * @example
     * // Update one Report
     * const report = await prisma.report.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends reportUpdateArgs>(args: SelectSubset<T, reportUpdateArgs<ExtArgs>>): Prisma__reportClient<$Result.GetResult<Prisma.$reportPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Reports.
     * @param {reportDeleteManyArgs} args - Arguments to filter Reports to delete.
     * @example
     * // Delete a few Reports
     * const { count } = await prisma.report.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends reportDeleteManyArgs>(args?: SelectSubset<T, reportDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Reports.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {reportUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Reports
     * const report = await prisma.report.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends reportUpdateManyArgs>(args: SelectSubset<T, reportUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Report.
     * @param {reportUpsertArgs} args - Arguments to update or create a Report.
     * @example
     * // Update or create a Report
     * const report = await prisma.report.upsert({
     *   create: {
     *     // ... data to create a Report
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Report we want to update
     *   }
     * })
     */
    upsert<T extends reportUpsertArgs>(args: SelectSubset<T, reportUpsertArgs<ExtArgs>>): Prisma__reportClient<$Result.GetResult<Prisma.$reportPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Reports.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {reportCountArgs} args - Arguments to filter Reports to count.
     * @example
     * // Count the number of Reports
     * const count = await prisma.report.count({
     *   where: {
     *     // ... the filter for the Reports we want to count
     *   }
     * })
    **/
    count<T extends reportCountArgs>(
      args?: Subset<T, reportCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ReportCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Report.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ReportAggregateArgs>(args: Subset<T, ReportAggregateArgs>): Prisma.PrismaPromise<GetReportAggregateType<T>>

    /**
     * Group by Report.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {reportGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends reportGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: reportGroupByArgs['orderBy'] }
        : { orderBy?: reportGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, reportGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetReportGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the report model
   */
  readonly fields: reportFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for report.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__reportClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    location<T extends locationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, locationDefaultArgs<ExtArgs>>): Prisma__locationClient<$Result.GetResult<Prisma.$locationPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the report model
   */ 
  interface reportFieldRefs {
    readonly id: FieldRef<"report", 'Int'>
    readonly name: FieldRef<"report", 'String'>
    readonly desc: FieldRef<"report", 'String'>
    readonly created: FieldRef<"report", 'DateTime'>
    readonly locId: FieldRef<"report", 'Int'>
    readonly tag: FieldRef<"report", 'String'>
  }
    

  // Custom InputTypes
  /**
   * report findUnique
   */
  export type reportFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the report
     */
    select?: reportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: reportInclude<ExtArgs> | null
    /**
     * Filter, which report to fetch.
     */
    where: reportWhereUniqueInput
  }

  /**
   * report findUniqueOrThrow
   */
  export type reportFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the report
     */
    select?: reportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: reportInclude<ExtArgs> | null
    /**
     * Filter, which report to fetch.
     */
    where: reportWhereUniqueInput
  }

  /**
   * report findFirst
   */
  export type reportFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the report
     */
    select?: reportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: reportInclude<ExtArgs> | null
    /**
     * Filter, which report to fetch.
     */
    where?: reportWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of reports to fetch.
     */
    orderBy?: reportOrderByWithRelationInput | reportOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for reports.
     */
    cursor?: reportWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` reports from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` reports.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of reports.
     */
    distinct?: ReportScalarFieldEnum | ReportScalarFieldEnum[]
  }

  /**
   * report findFirstOrThrow
   */
  export type reportFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the report
     */
    select?: reportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: reportInclude<ExtArgs> | null
    /**
     * Filter, which report to fetch.
     */
    where?: reportWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of reports to fetch.
     */
    orderBy?: reportOrderByWithRelationInput | reportOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for reports.
     */
    cursor?: reportWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` reports from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` reports.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of reports.
     */
    distinct?: ReportScalarFieldEnum | ReportScalarFieldEnum[]
  }

  /**
   * report findMany
   */
  export type reportFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the report
     */
    select?: reportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: reportInclude<ExtArgs> | null
    /**
     * Filter, which reports to fetch.
     */
    where?: reportWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of reports to fetch.
     */
    orderBy?: reportOrderByWithRelationInput | reportOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing reports.
     */
    cursor?: reportWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` reports from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` reports.
     */
    skip?: number
    distinct?: ReportScalarFieldEnum | ReportScalarFieldEnum[]
  }

  /**
   * report create
   */
  export type reportCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the report
     */
    select?: reportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: reportInclude<ExtArgs> | null
    /**
     * The data needed to create a report.
     */
    data: XOR<reportCreateInput, reportUncheckedCreateInput>
  }

  /**
   * report createMany
   */
  export type reportCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many reports.
     */
    data: reportCreateManyInput | reportCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * report createManyAndReturn
   */
  export type reportCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the report
     */
    select?: reportSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many reports.
     */
    data: reportCreateManyInput | reportCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: reportIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * report update
   */
  export type reportUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the report
     */
    select?: reportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: reportInclude<ExtArgs> | null
    /**
     * The data needed to update a report.
     */
    data: XOR<reportUpdateInput, reportUncheckedUpdateInput>
    /**
     * Choose, which report to update.
     */
    where: reportWhereUniqueInput
  }

  /**
   * report updateMany
   */
  export type reportUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update reports.
     */
    data: XOR<reportUpdateManyMutationInput, reportUncheckedUpdateManyInput>
    /**
     * Filter which reports to update
     */
    where?: reportWhereInput
  }

  /**
   * report upsert
   */
  export type reportUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the report
     */
    select?: reportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: reportInclude<ExtArgs> | null
    /**
     * The filter to search for the report to update in case it exists.
     */
    where: reportWhereUniqueInput
    /**
     * In case the report found by the `where` argument doesn't exist, create a new report with this data.
     */
    create: XOR<reportCreateInput, reportUncheckedCreateInput>
    /**
     * In case the report was found with the provided `where` argument, update it with this data.
     */
    update: XOR<reportUpdateInput, reportUncheckedUpdateInput>
  }

  /**
   * report delete
   */
  export type reportDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the report
     */
    select?: reportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: reportInclude<ExtArgs> | null
    /**
     * Filter which report to delete.
     */
    where: reportWhereUniqueInput
  }

  /**
   * report deleteMany
   */
  export type reportDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which reports to delete
     */
    where?: reportWhereInput
  }

  /**
   * report without action
   */
  export type reportDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the report
     */
    select?: reportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: reportInclude<ExtArgs> | null
  }


  /**
   * Model user
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
    age: number | null
    hometownId: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
    age: number | null
    hometownId: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    username: string | null
    email: string | null
    password: string | null
    resetToken: string | null
    resetTokenExpiry: Date | null
    age: number | null
    description: string | null
    firstName: string | null
    hometownId: number | null
    lastName: string | null
    profilePic: string | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    username: string | null
    email: string | null
    password: string | null
    resetToken: string | null
    resetTokenExpiry: Date | null
    age: number | null
    description: string | null
    firstName: string | null
    hometownId: number | null
    lastName: string | null
    profilePic: string | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    username: number
    email: number
    password: number
    resetToken: number
    resetTokenExpiry: number
    age: number
    description: number
    firstName: number
    hometownId: number
    lastName: number
    profilePic: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
    age?: true
    hometownId?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
    age?: true
    hometownId?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    username?: true
    email?: true
    password?: true
    resetToken?: true
    resetTokenExpiry?: true
    age?: true
    description?: true
    firstName?: true
    hometownId?: true
    lastName?: true
    profilePic?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    username?: true
    email?: true
    password?: true
    resetToken?: true
    resetTokenExpiry?: true
    age?: true
    description?: true
    firstName?: true
    hometownId?: true
    lastName?: true
    profilePic?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    username?: true
    email?: true
    password?: true
    resetToken?: true
    resetTokenExpiry?: true
    age?: true
    description?: true
    firstName?: true
    hometownId?: true
    lastName?: true
    profilePic?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which user to aggregate.
     */
    where?: userWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: userOrderByWithRelationInput | userOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: userWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type userGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: userWhereInput
    orderBy?: userOrderByWithAggregationInput | userOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: userScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: number
    username: string
    email: string
    password: string
    resetToken: string | null
    resetTokenExpiry: Date | null
    age: number | null
    description: string | null
    firstName: string
    hometownId: number | null
    lastName: string
    profilePic: string | null
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends userGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type userSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    username?: boolean
    email?: boolean
    password?: boolean
    resetToken?: boolean
    resetTokenExpiry?: boolean
    age?: boolean
    description?: boolean
    firstName?: boolean
    hometownId?: boolean
    lastName?: boolean
    profilePic?: boolean
    discussion?: boolean | user$discussionArgs<ExtArgs>
    reply?: boolean | user$replyArgs<ExtArgs>
    location?: boolean | user$locationArgs<ExtArgs>
    visit?: boolean | user$visitArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type userSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    username?: boolean
    email?: boolean
    password?: boolean
    resetToken?: boolean
    resetTokenExpiry?: boolean
    age?: boolean
    description?: boolean
    firstName?: boolean
    hometownId?: boolean
    lastName?: boolean
    profilePic?: boolean
    location?: boolean | user$locationArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type userSelectScalar = {
    id?: boolean
    username?: boolean
    email?: boolean
    password?: boolean
    resetToken?: boolean
    resetTokenExpiry?: boolean
    age?: boolean
    description?: boolean
    firstName?: boolean
    hometownId?: boolean
    lastName?: boolean
    profilePic?: boolean
  }

  export type userInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    discussion?: boolean | user$discussionArgs<ExtArgs>
    reply?: boolean | user$replyArgs<ExtArgs>
    location?: boolean | user$locationArgs<ExtArgs>
    visit?: boolean | user$visitArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type userIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    location?: boolean | user$locationArgs<ExtArgs>
  }

  export type $userPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "user"
    objects: {
      discussion: Prisma.$discussionPayload<ExtArgs>[]
      reply: Prisma.$replyPayload<ExtArgs>[]
      location: Prisma.$locationPayload<ExtArgs> | null
      visit: Prisma.$visitPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      username: string
      email: string
      password: string
      resetToken: string | null
      resetTokenExpiry: Date | null
      age: number | null
      description: string | null
      firstName: string
      hometownId: number | null
      lastName: string
      profilePic: string | null
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type userGetPayload<S extends boolean | null | undefined | userDefaultArgs> = $Result.GetResult<Prisma.$userPayload, S>

  type userCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<userFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface userDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['user'], meta: { name: 'user' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {userFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends userFindUniqueArgs>(args: SelectSubset<T, userFindUniqueArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {userFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends userFindUniqueOrThrowArgs>(args: SelectSubset<T, userFindUniqueOrThrowArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends userFindFirstArgs>(args?: SelectSubset<T, userFindFirstArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends userFindFirstOrThrowArgs>(args?: SelectSubset<T, userFindFirstOrThrowArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends userFindManyArgs>(args?: SelectSubset<T, userFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a User.
     * @param {userCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends userCreateArgs>(args: SelectSubset<T, userCreateArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Users.
     * @param {userCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends userCreateManyArgs>(args?: SelectSubset<T, userCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {userCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends userCreateManyAndReturnArgs>(args?: SelectSubset<T, userCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a User.
     * @param {userDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends userDeleteArgs>(args: SelectSubset<T, userDeleteArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one User.
     * @param {userUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends userUpdateArgs>(args: SelectSubset<T, userUpdateArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {userDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends userDeleteManyArgs>(args?: SelectSubset<T, userDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends userUpdateManyArgs>(args: SelectSubset<T, userUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {userUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends userUpsertArgs>(args: SelectSubset<T, userUpsertArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends userCountArgs>(
      args?: Subset<T, userCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends userGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: userGroupByArgs['orderBy'] }
        : { orderBy?: userGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, userGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the user model
   */
  readonly fields: userFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for user.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__userClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    discussion<T extends user$discussionArgs<ExtArgs> = {}>(args?: Subset<T, user$discussionArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$discussionPayload<ExtArgs>, T, "findMany"> | Null>
    reply<T extends user$replyArgs<ExtArgs> = {}>(args?: Subset<T, user$replyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$replyPayload<ExtArgs>, T, "findMany"> | Null>
    location<T extends user$locationArgs<ExtArgs> = {}>(args?: Subset<T, user$locationArgs<ExtArgs>>): Prisma__locationClient<$Result.GetResult<Prisma.$locationPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    visit<T extends user$visitArgs<ExtArgs> = {}>(args?: Subset<T, user$visitArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$visitPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the user model
   */ 
  interface userFieldRefs {
    readonly id: FieldRef<"user", 'Int'>
    readonly username: FieldRef<"user", 'String'>
    readonly email: FieldRef<"user", 'String'>
    readonly password: FieldRef<"user", 'String'>
    readonly resetToken: FieldRef<"user", 'String'>
    readonly resetTokenExpiry: FieldRef<"user", 'DateTime'>
    readonly age: FieldRef<"user", 'Int'>
    readonly description: FieldRef<"user", 'String'>
    readonly firstName: FieldRef<"user", 'String'>
    readonly hometownId: FieldRef<"user", 'Int'>
    readonly lastName: FieldRef<"user", 'String'>
    readonly profilePic: FieldRef<"user", 'String'>
  }
    

  // Custom InputTypes
  /**
   * user findUnique
   */
  export type userFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userInclude<ExtArgs> | null
    /**
     * Filter, which user to fetch.
     */
    where: userWhereUniqueInput
  }

  /**
   * user findUniqueOrThrow
   */
  export type userFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userInclude<ExtArgs> | null
    /**
     * Filter, which user to fetch.
     */
    where: userWhereUniqueInput
  }

  /**
   * user findFirst
   */
  export type userFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userInclude<ExtArgs> | null
    /**
     * Filter, which user to fetch.
     */
    where?: userWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: userOrderByWithRelationInput | userOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for users.
     */
    cursor?: userWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * user findFirstOrThrow
   */
  export type userFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userInclude<ExtArgs> | null
    /**
     * Filter, which user to fetch.
     */
    where?: userWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: userOrderByWithRelationInput | userOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for users.
     */
    cursor?: userWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * user findMany
   */
  export type userFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where?: userWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: userOrderByWithRelationInput | userOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing users.
     */
    cursor?: userWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * user create
   */
  export type userCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userInclude<ExtArgs> | null
    /**
     * The data needed to create a user.
     */
    data: XOR<userCreateInput, userUncheckedCreateInput>
  }

  /**
   * user createMany
   */
  export type userCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many users.
     */
    data: userCreateManyInput | userCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * user createManyAndReturn
   */
  export type userCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many users.
     */
    data: userCreateManyInput | userCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * user update
   */
  export type userUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userInclude<ExtArgs> | null
    /**
     * The data needed to update a user.
     */
    data: XOR<userUpdateInput, userUncheckedUpdateInput>
    /**
     * Choose, which user to update.
     */
    where: userWhereUniqueInput
  }

  /**
   * user updateMany
   */
  export type userUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update users.
     */
    data: XOR<userUpdateManyMutationInput, userUncheckedUpdateManyInput>
    /**
     * Filter which users to update
     */
    where?: userWhereInput
  }

  /**
   * user upsert
   */
  export type userUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userInclude<ExtArgs> | null
    /**
     * The filter to search for the user to update in case it exists.
     */
    where: userWhereUniqueInput
    /**
     * In case the user found by the `where` argument doesn't exist, create a new user with this data.
     */
    create: XOR<userCreateInput, userUncheckedCreateInput>
    /**
     * In case the user was found with the provided `where` argument, update it with this data.
     */
    update: XOR<userUpdateInput, userUncheckedUpdateInput>
  }

  /**
   * user delete
   */
  export type userDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userInclude<ExtArgs> | null
    /**
     * Filter which user to delete.
     */
    where: userWhereUniqueInput
  }

  /**
   * user deleteMany
   */
  export type userDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which users to delete
     */
    where?: userWhereInput
  }

  /**
   * user.discussion
   */
  export type user$discussionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the discussion
     */
    select?: discussionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: discussionInclude<ExtArgs> | null
    where?: discussionWhereInput
    orderBy?: discussionOrderByWithRelationInput | discussionOrderByWithRelationInput[]
    cursor?: discussionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DiscussionScalarFieldEnum | DiscussionScalarFieldEnum[]
  }

  /**
   * user.reply
   */
  export type user$replyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the reply
     */
    select?: replySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: replyInclude<ExtArgs> | null
    where?: replyWhereInput
    orderBy?: replyOrderByWithRelationInput | replyOrderByWithRelationInput[]
    cursor?: replyWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReplyScalarFieldEnum | ReplyScalarFieldEnum[]
  }

  /**
   * user.location
   */
  export type user$locationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the location
     */
    select?: locationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: locationInclude<ExtArgs> | null
    where?: locationWhereInput
  }

  /**
   * user.visit
   */
  export type user$visitArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the visit
     */
    select?: visitSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: visitInclude<ExtArgs> | null
    where?: visitWhereInput
    orderBy?: visitOrderByWithRelationInput | visitOrderByWithRelationInput[]
    cursor?: visitWhereUniqueInput
    take?: number
    skip?: number
    distinct?: VisitScalarFieldEnum | VisitScalarFieldEnum[]
  }

  /**
   * user without action
   */
  export type userDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userInclude<ExtArgs> | null
  }


  /**
   * Model discussion
   */

  export type AggregateDiscussion = {
    _count: DiscussionCountAggregateOutputType | null
    _avg: DiscussionAvgAggregateOutputType | null
    _sum: DiscussionSumAggregateOutputType | null
    _min: DiscussionMinAggregateOutputType | null
    _max: DiscussionMaxAggregateOutputType | null
  }

  export type DiscussionAvgAggregateOutputType = {
    id: number | null
    creatorId: number | null
    locationId: number | null
  }

  export type DiscussionSumAggregateOutputType = {
    id: number | null
    creatorId: number | null
    locationId: number | null
  }

  export type DiscussionMinAggregateOutputType = {
    id: number | null
    title: string | null
    created_at: Date | null
    creatorId: number | null
    locationId: number | null
    content: string | null
  }

  export type DiscussionMaxAggregateOutputType = {
    id: number | null
    title: string | null
    created_at: Date | null
    creatorId: number | null
    locationId: number | null
    content: string | null
  }

  export type DiscussionCountAggregateOutputType = {
    id: number
    title: number
    created_at: number
    creatorId: number
    locationId: number
    content: number
    _all: number
  }


  export type DiscussionAvgAggregateInputType = {
    id?: true
    creatorId?: true
    locationId?: true
  }

  export type DiscussionSumAggregateInputType = {
    id?: true
    creatorId?: true
    locationId?: true
  }

  export type DiscussionMinAggregateInputType = {
    id?: true
    title?: true
    created_at?: true
    creatorId?: true
    locationId?: true
    content?: true
  }

  export type DiscussionMaxAggregateInputType = {
    id?: true
    title?: true
    created_at?: true
    creatorId?: true
    locationId?: true
    content?: true
  }

  export type DiscussionCountAggregateInputType = {
    id?: true
    title?: true
    created_at?: true
    creatorId?: true
    locationId?: true
    content?: true
    _all?: true
  }

  export type DiscussionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which discussion to aggregate.
     */
    where?: discussionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of discussions to fetch.
     */
    orderBy?: discussionOrderByWithRelationInput | discussionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: discussionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` discussions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` discussions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned discussions
    **/
    _count?: true | DiscussionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DiscussionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DiscussionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DiscussionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DiscussionMaxAggregateInputType
  }

  export type GetDiscussionAggregateType<T extends DiscussionAggregateArgs> = {
        [P in keyof T & keyof AggregateDiscussion]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDiscussion[P]>
      : GetScalarType<T[P], AggregateDiscussion[P]>
  }




  export type discussionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: discussionWhereInput
    orderBy?: discussionOrderByWithAggregationInput | discussionOrderByWithAggregationInput[]
    by: DiscussionScalarFieldEnum[] | DiscussionScalarFieldEnum
    having?: discussionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DiscussionCountAggregateInputType | true
    _avg?: DiscussionAvgAggregateInputType
    _sum?: DiscussionSumAggregateInputType
    _min?: DiscussionMinAggregateInputType
    _max?: DiscussionMaxAggregateInputType
  }

  export type DiscussionGroupByOutputType = {
    id: number
    title: string
    created_at: Date
    creatorId: number
    locationId: number
    content: string
    _count: DiscussionCountAggregateOutputType | null
    _avg: DiscussionAvgAggregateOutputType | null
    _sum: DiscussionSumAggregateOutputType | null
    _min: DiscussionMinAggregateOutputType | null
    _max: DiscussionMaxAggregateOutputType | null
  }

  type GetDiscussionGroupByPayload<T extends discussionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DiscussionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DiscussionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DiscussionGroupByOutputType[P]>
            : GetScalarType<T[P], DiscussionGroupByOutputType[P]>
        }
      >
    >


  export type discussionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    created_at?: boolean
    creatorId?: boolean
    locationId?: boolean
    content?: boolean
    user?: boolean | userDefaultArgs<ExtArgs>
    location?: boolean | locationDefaultArgs<ExtArgs>
    reply?: boolean | discussion$replyArgs<ExtArgs>
    _count?: boolean | DiscussionCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["discussion"]>

  export type discussionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    created_at?: boolean
    creatorId?: boolean
    locationId?: boolean
    content?: boolean
    user?: boolean | userDefaultArgs<ExtArgs>
    location?: boolean | locationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["discussion"]>

  export type discussionSelectScalar = {
    id?: boolean
    title?: boolean
    created_at?: boolean
    creatorId?: boolean
    locationId?: boolean
    content?: boolean
  }

  export type discussionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | userDefaultArgs<ExtArgs>
    location?: boolean | locationDefaultArgs<ExtArgs>
    reply?: boolean | discussion$replyArgs<ExtArgs>
    _count?: boolean | DiscussionCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type discussionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | userDefaultArgs<ExtArgs>
    location?: boolean | locationDefaultArgs<ExtArgs>
  }

  export type $discussionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "discussion"
    objects: {
      user: Prisma.$userPayload<ExtArgs>
      location: Prisma.$locationPayload<ExtArgs>
      reply: Prisma.$replyPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      title: string
      created_at: Date
      creatorId: number
      locationId: number
      content: string
    }, ExtArgs["result"]["discussion"]>
    composites: {}
  }

  type discussionGetPayload<S extends boolean | null | undefined | discussionDefaultArgs> = $Result.GetResult<Prisma.$discussionPayload, S>

  type discussionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<discussionFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: DiscussionCountAggregateInputType | true
    }

  export interface discussionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['discussion'], meta: { name: 'discussion' } }
    /**
     * Find zero or one Discussion that matches the filter.
     * @param {discussionFindUniqueArgs} args - Arguments to find a Discussion
     * @example
     * // Get one Discussion
     * const discussion = await prisma.discussion.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends discussionFindUniqueArgs>(args: SelectSubset<T, discussionFindUniqueArgs<ExtArgs>>): Prisma__discussionClient<$Result.GetResult<Prisma.$discussionPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Discussion that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {discussionFindUniqueOrThrowArgs} args - Arguments to find a Discussion
     * @example
     * // Get one Discussion
     * const discussion = await prisma.discussion.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends discussionFindUniqueOrThrowArgs>(args: SelectSubset<T, discussionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__discussionClient<$Result.GetResult<Prisma.$discussionPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Discussion that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {discussionFindFirstArgs} args - Arguments to find a Discussion
     * @example
     * // Get one Discussion
     * const discussion = await prisma.discussion.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends discussionFindFirstArgs>(args?: SelectSubset<T, discussionFindFirstArgs<ExtArgs>>): Prisma__discussionClient<$Result.GetResult<Prisma.$discussionPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Discussion that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {discussionFindFirstOrThrowArgs} args - Arguments to find a Discussion
     * @example
     * // Get one Discussion
     * const discussion = await prisma.discussion.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends discussionFindFirstOrThrowArgs>(args?: SelectSubset<T, discussionFindFirstOrThrowArgs<ExtArgs>>): Prisma__discussionClient<$Result.GetResult<Prisma.$discussionPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Discussions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {discussionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Discussions
     * const discussions = await prisma.discussion.findMany()
     * 
     * // Get first 10 Discussions
     * const discussions = await prisma.discussion.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const discussionWithIdOnly = await prisma.discussion.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends discussionFindManyArgs>(args?: SelectSubset<T, discussionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$discussionPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Discussion.
     * @param {discussionCreateArgs} args - Arguments to create a Discussion.
     * @example
     * // Create one Discussion
     * const Discussion = await prisma.discussion.create({
     *   data: {
     *     // ... data to create a Discussion
     *   }
     * })
     * 
     */
    create<T extends discussionCreateArgs>(args: SelectSubset<T, discussionCreateArgs<ExtArgs>>): Prisma__discussionClient<$Result.GetResult<Prisma.$discussionPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Discussions.
     * @param {discussionCreateManyArgs} args - Arguments to create many Discussions.
     * @example
     * // Create many Discussions
     * const discussion = await prisma.discussion.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends discussionCreateManyArgs>(args?: SelectSubset<T, discussionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Discussions and returns the data saved in the database.
     * @param {discussionCreateManyAndReturnArgs} args - Arguments to create many Discussions.
     * @example
     * // Create many Discussions
     * const discussion = await prisma.discussion.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Discussions and only return the `id`
     * const discussionWithIdOnly = await prisma.discussion.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends discussionCreateManyAndReturnArgs>(args?: SelectSubset<T, discussionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$discussionPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Discussion.
     * @param {discussionDeleteArgs} args - Arguments to delete one Discussion.
     * @example
     * // Delete one Discussion
     * const Discussion = await prisma.discussion.delete({
     *   where: {
     *     // ... filter to delete one Discussion
     *   }
     * })
     * 
     */
    delete<T extends discussionDeleteArgs>(args: SelectSubset<T, discussionDeleteArgs<ExtArgs>>): Prisma__discussionClient<$Result.GetResult<Prisma.$discussionPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Discussion.
     * @param {discussionUpdateArgs} args - Arguments to update one Discussion.
     * @example
     * // Update one Discussion
     * const discussion = await prisma.discussion.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends discussionUpdateArgs>(args: SelectSubset<T, discussionUpdateArgs<ExtArgs>>): Prisma__discussionClient<$Result.GetResult<Prisma.$discussionPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Discussions.
     * @param {discussionDeleteManyArgs} args - Arguments to filter Discussions to delete.
     * @example
     * // Delete a few Discussions
     * const { count } = await prisma.discussion.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends discussionDeleteManyArgs>(args?: SelectSubset<T, discussionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Discussions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {discussionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Discussions
     * const discussion = await prisma.discussion.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends discussionUpdateManyArgs>(args: SelectSubset<T, discussionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Discussion.
     * @param {discussionUpsertArgs} args - Arguments to update or create a Discussion.
     * @example
     * // Update or create a Discussion
     * const discussion = await prisma.discussion.upsert({
     *   create: {
     *     // ... data to create a Discussion
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Discussion we want to update
     *   }
     * })
     */
    upsert<T extends discussionUpsertArgs>(args: SelectSubset<T, discussionUpsertArgs<ExtArgs>>): Prisma__discussionClient<$Result.GetResult<Prisma.$discussionPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Discussions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {discussionCountArgs} args - Arguments to filter Discussions to count.
     * @example
     * // Count the number of Discussions
     * const count = await prisma.discussion.count({
     *   where: {
     *     // ... the filter for the Discussions we want to count
     *   }
     * })
    **/
    count<T extends discussionCountArgs>(
      args?: Subset<T, discussionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DiscussionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Discussion.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DiscussionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DiscussionAggregateArgs>(args: Subset<T, DiscussionAggregateArgs>): Prisma.PrismaPromise<GetDiscussionAggregateType<T>>

    /**
     * Group by Discussion.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {discussionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends discussionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: discussionGroupByArgs['orderBy'] }
        : { orderBy?: discussionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, discussionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDiscussionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the discussion model
   */
  readonly fields: discussionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for discussion.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__discussionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends userDefaultArgs<ExtArgs> = {}>(args?: Subset<T, userDefaultArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    location<T extends locationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, locationDefaultArgs<ExtArgs>>): Prisma__locationClient<$Result.GetResult<Prisma.$locationPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    reply<T extends discussion$replyArgs<ExtArgs> = {}>(args?: Subset<T, discussion$replyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$replyPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the discussion model
   */ 
  interface discussionFieldRefs {
    readonly id: FieldRef<"discussion", 'Int'>
    readonly title: FieldRef<"discussion", 'String'>
    readonly created_at: FieldRef<"discussion", 'DateTime'>
    readonly creatorId: FieldRef<"discussion", 'Int'>
    readonly locationId: FieldRef<"discussion", 'Int'>
    readonly content: FieldRef<"discussion", 'String'>
  }
    

  // Custom InputTypes
  /**
   * discussion findUnique
   */
  export type discussionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the discussion
     */
    select?: discussionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: discussionInclude<ExtArgs> | null
    /**
     * Filter, which discussion to fetch.
     */
    where: discussionWhereUniqueInput
  }

  /**
   * discussion findUniqueOrThrow
   */
  export type discussionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the discussion
     */
    select?: discussionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: discussionInclude<ExtArgs> | null
    /**
     * Filter, which discussion to fetch.
     */
    where: discussionWhereUniqueInput
  }

  /**
   * discussion findFirst
   */
  export type discussionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the discussion
     */
    select?: discussionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: discussionInclude<ExtArgs> | null
    /**
     * Filter, which discussion to fetch.
     */
    where?: discussionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of discussions to fetch.
     */
    orderBy?: discussionOrderByWithRelationInput | discussionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for discussions.
     */
    cursor?: discussionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` discussions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` discussions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of discussions.
     */
    distinct?: DiscussionScalarFieldEnum | DiscussionScalarFieldEnum[]
  }

  /**
   * discussion findFirstOrThrow
   */
  export type discussionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the discussion
     */
    select?: discussionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: discussionInclude<ExtArgs> | null
    /**
     * Filter, which discussion to fetch.
     */
    where?: discussionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of discussions to fetch.
     */
    orderBy?: discussionOrderByWithRelationInput | discussionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for discussions.
     */
    cursor?: discussionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` discussions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` discussions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of discussions.
     */
    distinct?: DiscussionScalarFieldEnum | DiscussionScalarFieldEnum[]
  }

  /**
   * discussion findMany
   */
  export type discussionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the discussion
     */
    select?: discussionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: discussionInclude<ExtArgs> | null
    /**
     * Filter, which discussions to fetch.
     */
    where?: discussionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of discussions to fetch.
     */
    orderBy?: discussionOrderByWithRelationInput | discussionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing discussions.
     */
    cursor?: discussionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` discussions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` discussions.
     */
    skip?: number
    distinct?: DiscussionScalarFieldEnum | DiscussionScalarFieldEnum[]
  }

  /**
   * discussion create
   */
  export type discussionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the discussion
     */
    select?: discussionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: discussionInclude<ExtArgs> | null
    /**
     * The data needed to create a discussion.
     */
    data: XOR<discussionCreateInput, discussionUncheckedCreateInput>
  }

  /**
   * discussion createMany
   */
  export type discussionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many discussions.
     */
    data: discussionCreateManyInput | discussionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * discussion createManyAndReturn
   */
  export type discussionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the discussion
     */
    select?: discussionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many discussions.
     */
    data: discussionCreateManyInput | discussionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: discussionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * discussion update
   */
  export type discussionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the discussion
     */
    select?: discussionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: discussionInclude<ExtArgs> | null
    /**
     * The data needed to update a discussion.
     */
    data: XOR<discussionUpdateInput, discussionUncheckedUpdateInput>
    /**
     * Choose, which discussion to update.
     */
    where: discussionWhereUniqueInput
  }

  /**
   * discussion updateMany
   */
  export type discussionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update discussions.
     */
    data: XOR<discussionUpdateManyMutationInput, discussionUncheckedUpdateManyInput>
    /**
     * Filter which discussions to update
     */
    where?: discussionWhereInput
  }

  /**
   * discussion upsert
   */
  export type discussionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the discussion
     */
    select?: discussionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: discussionInclude<ExtArgs> | null
    /**
     * The filter to search for the discussion to update in case it exists.
     */
    where: discussionWhereUniqueInput
    /**
     * In case the discussion found by the `where` argument doesn't exist, create a new discussion with this data.
     */
    create: XOR<discussionCreateInput, discussionUncheckedCreateInput>
    /**
     * In case the discussion was found with the provided `where` argument, update it with this data.
     */
    update: XOR<discussionUpdateInput, discussionUncheckedUpdateInput>
  }

  /**
   * discussion delete
   */
  export type discussionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the discussion
     */
    select?: discussionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: discussionInclude<ExtArgs> | null
    /**
     * Filter which discussion to delete.
     */
    where: discussionWhereUniqueInput
  }

  /**
   * discussion deleteMany
   */
  export type discussionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which discussions to delete
     */
    where?: discussionWhereInput
  }

  /**
   * discussion.reply
   */
  export type discussion$replyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the reply
     */
    select?: replySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: replyInclude<ExtArgs> | null
    where?: replyWhereInput
    orderBy?: replyOrderByWithRelationInput | replyOrderByWithRelationInput[]
    cursor?: replyWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReplyScalarFieldEnum | ReplyScalarFieldEnum[]
  }

  /**
   * discussion without action
   */
  export type discussionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the discussion
     */
    select?: discussionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: discussionInclude<ExtArgs> | null
  }


  /**
   * Model visit
   */

  export type AggregateVisit = {
    _count: VisitCountAggregateOutputType | null
    _avg: VisitAvgAggregateOutputType | null
    _sum: VisitSumAggregateOutputType | null
    _min: VisitMinAggregateOutputType | null
    _max: VisitMaxAggregateOutputType | null
  }

  export type VisitAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    locationId: number | null
  }

  export type VisitSumAggregateOutputType = {
    id: number | null
    userId: number | null
    locationId: number | null
  }

  export type VisitMinAggregateOutputType = {
    id: number | null
    userId: number | null
    locationId: number | null
    past: boolean | null
    longTerm: boolean | null
  }

  export type VisitMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    locationId: number | null
    past: boolean | null
    longTerm: boolean | null
  }

  export type VisitCountAggregateOutputType = {
    id: number
    userId: number
    locationId: number
    past: number
    longTerm: number
    _all: number
  }


  export type VisitAvgAggregateInputType = {
    id?: true
    userId?: true
    locationId?: true
  }

  export type VisitSumAggregateInputType = {
    id?: true
    userId?: true
    locationId?: true
  }

  export type VisitMinAggregateInputType = {
    id?: true
    userId?: true
    locationId?: true
    past?: true
    longTerm?: true
  }

  export type VisitMaxAggregateInputType = {
    id?: true
    userId?: true
    locationId?: true
    past?: true
    longTerm?: true
  }

  export type VisitCountAggregateInputType = {
    id?: true
    userId?: true
    locationId?: true
    past?: true
    longTerm?: true
    _all?: true
  }

  export type VisitAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which visit to aggregate.
     */
    where?: visitWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of visits to fetch.
     */
    orderBy?: visitOrderByWithRelationInput | visitOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: visitWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` visits from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` visits.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned visits
    **/
    _count?: true | VisitCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: VisitAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: VisitSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: VisitMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: VisitMaxAggregateInputType
  }

  export type GetVisitAggregateType<T extends VisitAggregateArgs> = {
        [P in keyof T & keyof AggregateVisit]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateVisit[P]>
      : GetScalarType<T[P], AggregateVisit[P]>
  }




  export type visitGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: visitWhereInput
    orderBy?: visitOrderByWithAggregationInput | visitOrderByWithAggregationInput[]
    by: VisitScalarFieldEnum[] | VisitScalarFieldEnum
    having?: visitScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: VisitCountAggregateInputType | true
    _avg?: VisitAvgAggregateInputType
    _sum?: VisitSumAggregateInputType
    _min?: VisitMinAggregateInputType
    _max?: VisitMaxAggregateInputType
  }

  export type VisitGroupByOutputType = {
    id: number
    userId: number
    locationId: number
    past: boolean
    longTerm: boolean
    _count: VisitCountAggregateOutputType | null
    _avg: VisitAvgAggregateOutputType | null
    _sum: VisitSumAggregateOutputType | null
    _min: VisitMinAggregateOutputType | null
    _max: VisitMaxAggregateOutputType | null
  }

  type GetVisitGroupByPayload<T extends visitGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<VisitGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof VisitGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], VisitGroupByOutputType[P]>
            : GetScalarType<T[P], VisitGroupByOutputType[P]>
        }
      >
    >


  export type visitSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    locationId?: boolean
    past?: boolean
    longTerm?: boolean
    location?: boolean | locationDefaultArgs<ExtArgs>
    user?: boolean | userDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["visit"]>

  export type visitSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    locationId?: boolean
    past?: boolean
    longTerm?: boolean
    location?: boolean | locationDefaultArgs<ExtArgs>
    user?: boolean | userDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["visit"]>

  export type visitSelectScalar = {
    id?: boolean
    userId?: boolean
    locationId?: boolean
    past?: boolean
    longTerm?: boolean
  }

  export type visitInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    location?: boolean | locationDefaultArgs<ExtArgs>
    user?: boolean | userDefaultArgs<ExtArgs>
  }
  export type visitIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    location?: boolean | locationDefaultArgs<ExtArgs>
    user?: boolean | userDefaultArgs<ExtArgs>
  }

  export type $visitPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "visit"
    objects: {
      location: Prisma.$locationPayload<ExtArgs>
      user: Prisma.$userPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: number
      locationId: number
      past: boolean
      longTerm: boolean
    }, ExtArgs["result"]["visit"]>
    composites: {}
  }

  type visitGetPayload<S extends boolean | null | undefined | visitDefaultArgs> = $Result.GetResult<Prisma.$visitPayload, S>

  type visitCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<visitFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: VisitCountAggregateInputType | true
    }

  export interface visitDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['visit'], meta: { name: 'visit' } }
    /**
     * Find zero or one Visit that matches the filter.
     * @param {visitFindUniqueArgs} args - Arguments to find a Visit
     * @example
     * // Get one Visit
     * const visit = await prisma.visit.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends visitFindUniqueArgs>(args: SelectSubset<T, visitFindUniqueArgs<ExtArgs>>): Prisma__visitClient<$Result.GetResult<Prisma.$visitPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Visit that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {visitFindUniqueOrThrowArgs} args - Arguments to find a Visit
     * @example
     * // Get one Visit
     * const visit = await prisma.visit.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends visitFindUniqueOrThrowArgs>(args: SelectSubset<T, visitFindUniqueOrThrowArgs<ExtArgs>>): Prisma__visitClient<$Result.GetResult<Prisma.$visitPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Visit that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {visitFindFirstArgs} args - Arguments to find a Visit
     * @example
     * // Get one Visit
     * const visit = await prisma.visit.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends visitFindFirstArgs>(args?: SelectSubset<T, visitFindFirstArgs<ExtArgs>>): Prisma__visitClient<$Result.GetResult<Prisma.$visitPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Visit that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {visitFindFirstOrThrowArgs} args - Arguments to find a Visit
     * @example
     * // Get one Visit
     * const visit = await prisma.visit.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends visitFindFirstOrThrowArgs>(args?: SelectSubset<T, visitFindFirstOrThrowArgs<ExtArgs>>): Prisma__visitClient<$Result.GetResult<Prisma.$visitPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Visits that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {visitFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Visits
     * const visits = await prisma.visit.findMany()
     * 
     * // Get first 10 Visits
     * const visits = await prisma.visit.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const visitWithIdOnly = await prisma.visit.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends visitFindManyArgs>(args?: SelectSubset<T, visitFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$visitPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Visit.
     * @param {visitCreateArgs} args - Arguments to create a Visit.
     * @example
     * // Create one Visit
     * const Visit = await prisma.visit.create({
     *   data: {
     *     // ... data to create a Visit
     *   }
     * })
     * 
     */
    create<T extends visitCreateArgs>(args: SelectSubset<T, visitCreateArgs<ExtArgs>>): Prisma__visitClient<$Result.GetResult<Prisma.$visitPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Visits.
     * @param {visitCreateManyArgs} args - Arguments to create many Visits.
     * @example
     * // Create many Visits
     * const visit = await prisma.visit.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends visitCreateManyArgs>(args?: SelectSubset<T, visitCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Visits and returns the data saved in the database.
     * @param {visitCreateManyAndReturnArgs} args - Arguments to create many Visits.
     * @example
     * // Create many Visits
     * const visit = await prisma.visit.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Visits and only return the `id`
     * const visitWithIdOnly = await prisma.visit.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends visitCreateManyAndReturnArgs>(args?: SelectSubset<T, visitCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$visitPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Visit.
     * @param {visitDeleteArgs} args - Arguments to delete one Visit.
     * @example
     * // Delete one Visit
     * const Visit = await prisma.visit.delete({
     *   where: {
     *     // ... filter to delete one Visit
     *   }
     * })
     * 
     */
    delete<T extends visitDeleteArgs>(args: SelectSubset<T, visitDeleteArgs<ExtArgs>>): Prisma__visitClient<$Result.GetResult<Prisma.$visitPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Visit.
     * @param {visitUpdateArgs} args - Arguments to update one Visit.
     * @example
     * // Update one Visit
     * const visit = await prisma.visit.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends visitUpdateArgs>(args: SelectSubset<T, visitUpdateArgs<ExtArgs>>): Prisma__visitClient<$Result.GetResult<Prisma.$visitPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Visits.
     * @param {visitDeleteManyArgs} args - Arguments to filter Visits to delete.
     * @example
     * // Delete a few Visits
     * const { count } = await prisma.visit.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends visitDeleteManyArgs>(args?: SelectSubset<T, visitDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Visits.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {visitUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Visits
     * const visit = await prisma.visit.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends visitUpdateManyArgs>(args: SelectSubset<T, visitUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Visit.
     * @param {visitUpsertArgs} args - Arguments to update or create a Visit.
     * @example
     * // Update or create a Visit
     * const visit = await prisma.visit.upsert({
     *   create: {
     *     // ... data to create a Visit
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Visit we want to update
     *   }
     * })
     */
    upsert<T extends visitUpsertArgs>(args: SelectSubset<T, visitUpsertArgs<ExtArgs>>): Prisma__visitClient<$Result.GetResult<Prisma.$visitPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Visits.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {visitCountArgs} args - Arguments to filter Visits to count.
     * @example
     * // Count the number of Visits
     * const count = await prisma.visit.count({
     *   where: {
     *     // ... the filter for the Visits we want to count
     *   }
     * })
    **/
    count<T extends visitCountArgs>(
      args?: Subset<T, visitCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], VisitCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Visit.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VisitAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends VisitAggregateArgs>(args: Subset<T, VisitAggregateArgs>): Prisma.PrismaPromise<GetVisitAggregateType<T>>

    /**
     * Group by Visit.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {visitGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends visitGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: visitGroupByArgs['orderBy'] }
        : { orderBy?: visitGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, visitGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetVisitGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the visit model
   */
  readonly fields: visitFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for visit.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__visitClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    location<T extends locationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, locationDefaultArgs<ExtArgs>>): Prisma__locationClient<$Result.GetResult<Prisma.$locationPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    user<T extends userDefaultArgs<ExtArgs> = {}>(args?: Subset<T, userDefaultArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the visit model
   */ 
  interface visitFieldRefs {
    readonly id: FieldRef<"visit", 'Int'>
    readonly userId: FieldRef<"visit", 'Int'>
    readonly locationId: FieldRef<"visit", 'Int'>
    readonly past: FieldRef<"visit", 'Boolean'>
    readonly longTerm: FieldRef<"visit", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * visit findUnique
   */
  export type visitFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the visit
     */
    select?: visitSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: visitInclude<ExtArgs> | null
    /**
     * Filter, which visit to fetch.
     */
    where: visitWhereUniqueInput
  }

  /**
   * visit findUniqueOrThrow
   */
  export type visitFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the visit
     */
    select?: visitSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: visitInclude<ExtArgs> | null
    /**
     * Filter, which visit to fetch.
     */
    where: visitWhereUniqueInput
  }

  /**
   * visit findFirst
   */
  export type visitFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the visit
     */
    select?: visitSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: visitInclude<ExtArgs> | null
    /**
     * Filter, which visit to fetch.
     */
    where?: visitWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of visits to fetch.
     */
    orderBy?: visitOrderByWithRelationInput | visitOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for visits.
     */
    cursor?: visitWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` visits from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` visits.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of visits.
     */
    distinct?: VisitScalarFieldEnum | VisitScalarFieldEnum[]
  }

  /**
   * visit findFirstOrThrow
   */
  export type visitFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the visit
     */
    select?: visitSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: visitInclude<ExtArgs> | null
    /**
     * Filter, which visit to fetch.
     */
    where?: visitWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of visits to fetch.
     */
    orderBy?: visitOrderByWithRelationInput | visitOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for visits.
     */
    cursor?: visitWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` visits from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` visits.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of visits.
     */
    distinct?: VisitScalarFieldEnum | VisitScalarFieldEnum[]
  }

  /**
   * visit findMany
   */
  export type visitFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the visit
     */
    select?: visitSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: visitInclude<ExtArgs> | null
    /**
     * Filter, which visits to fetch.
     */
    where?: visitWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of visits to fetch.
     */
    orderBy?: visitOrderByWithRelationInput | visitOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing visits.
     */
    cursor?: visitWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` visits from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` visits.
     */
    skip?: number
    distinct?: VisitScalarFieldEnum | VisitScalarFieldEnum[]
  }

  /**
   * visit create
   */
  export type visitCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the visit
     */
    select?: visitSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: visitInclude<ExtArgs> | null
    /**
     * The data needed to create a visit.
     */
    data: XOR<visitCreateInput, visitUncheckedCreateInput>
  }

  /**
   * visit createMany
   */
  export type visitCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many visits.
     */
    data: visitCreateManyInput | visitCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * visit createManyAndReturn
   */
  export type visitCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the visit
     */
    select?: visitSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many visits.
     */
    data: visitCreateManyInput | visitCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: visitIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * visit update
   */
  export type visitUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the visit
     */
    select?: visitSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: visitInclude<ExtArgs> | null
    /**
     * The data needed to update a visit.
     */
    data: XOR<visitUpdateInput, visitUncheckedUpdateInput>
    /**
     * Choose, which visit to update.
     */
    where: visitWhereUniqueInput
  }

  /**
   * visit updateMany
   */
  export type visitUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update visits.
     */
    data: XOR<visitUpdateManyMutationInput, visitUncheckedUpdateManyInput>
    /**
     * Filter which visits to update
     */
    where?: visitWhereInput
  }

  /**
   * visit upsert
   */
  export type visitUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the visit
     */
    select?: visitSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: visitInclude<ExtArgs> | null
    /**
     * The filter to search for the visit to update in case it exists.
     */
    where: visitWhereUniqueInput
    /**
     * In case the visit found by the `where` argument doesn't exist, create a new visit with this data.
     */
    create: XOR<visitCreateInput, visitUncheckedCreateInput>
    /**
     * In case the visit was found with the provided `where` argument, update it with this data.
     */
    update: XOR<visitUpdateInput, visitUncheckedUpdateInput>
  }

  /**
   * visit delete
   */
  export type visitDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the visit
     */
    select?: visitSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: visitInclude<ExtArgs> | null
    /**
     * Filter which visit to delete.
     */
    where: visitWhereUniqueInput
  }

  /**
   * visit deleteMany
   */
  export type visitDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which visits to delete
     */
    where?: visitWhereInput
  }

  /**
   * visit without action
   */
  export type visitDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the visit
     */
    select?: visitSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: visitInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const GuidelineScalarFieldEnum: {
    id: 'id',
    locId: 'locId',
    tags: 'tags',
    created: 'created',
    title: 'title',
    content: 'content'
  };

  export type GuidelineScalarFieldEnum = (typeof GuidelineScalarFieldEnum)[keyof typeof GuidelineScalarFieldEnum]


  export const LocationScalarFieldEnum: {
    id: 'id',
    name: 'name',
    lat: 'lat',
    lon: 'lon',
    type: 'type',
    parentId: 'parentId',
    alias: 'alias'
  };

  export type LocationScalarFieldEnum = (typeof LocationScalarFieldEnum)[keyof typeof LocationScalarFieldEnum]


  export const ReplyScalarFieldEnum: {
    id: 'id',
    content: 'content',
    created_at: 'created_at',
    creatorId: 'creatorId',
    discussionId: 'discussionId',
    parentId: 'parentId'
  };

  export type ReplyScalarFieldEnum = (typeof ReplyScalarFieldEnum)[keyof typeof ReplyScalarFieldEnum]


  export const ReportScalarFieldEnum: {
    id: 'id',
    name: 'name',
    desc: 'desc',
    created: 'created',
    locId: 'locId',
    tag: 'tag'
  };

  export type ReportScalarFieldEnum = (typeof ReportScalarFieldEnum)[keyof typeof ReportScalarFieldEnum]


  export const UserScalarFieldEnum: {
    id: 'id',
    username: 'username',
    email: 'email',
    password: 'password',
    resetToken: 'resetToken',
    resetTokenExpiry: 'resetTokenExpiry',
    age: 'age',
    description: 'description',
    firstName: 'firstName',
    hometownId: 'hometownId',
    lastName: 'lastName',
    profilePic: 'profilePic'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const DiscussionScalarFieldEnum: {
    id: 'id',
    title: 'title',
    created_at: 'created_at',
    creatorId: 'creatorId',
    locationId: 'locationId',
    content: 'content'
  };

  export type DiscussionScalarFieldEnum = (typeof DiscussionScalarFieldEnum)[keyof typeof DiscussionScalarFieldEnum]


  export const VisitScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    locationId: 'locationId',
    past: 'past',
    longTerm: 'longTerm'
  };

  export type VisitScalarFieldEnum = (typeof VisitScalarFieldEnum)[keyof typeof VisitScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type guidelineWhereInput = {
    AND?: guidelineWhereInput | guidelineWhereInput[]
    OR?: guidelineWhereInput[]
    NOT?: guidelineWhereInput | guidelineWhereInput[]
    id?: IntFilter<"guideline"> | number
    locId?: IntFilter<"guideline"> | number
    tags?: StringNullableListFilter<"guideline">
    created?: DateTimeFilter<"guideline"> | Date | string
    title?: StringFilter<"guideline"> | string
    content?: StringFilter<"guideline"> | string
    location?: XOR<LocationRelationFilter, locationWhereInput>
  }

  export type guidelineOrderByWithRelationInput = {
    id?: SortOrder
    locId?: SortOrder
    tags?: SortOrder
    created?: SortOrder
    title?: SortOrder
    content?: SortOrder
    location?: locationOrderByWithRelationInput
  }

  export type guidelineWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: guidelineWhereInput | guidelineWhereInput[]
    OR?: guidelineWhereInput[]
    NOT?: guidelineWhereInput | guidelineWhereInput[]
    locId?: IntFilter<"guideline"> | number
    tags?: StringNullableListFilter<"guideline">
    created?: DateTimeFilter<"guideline"> | Date | string
    title?: StringFilter<"guideline"> | string
    content?: StringFilter<"guideline"> | string
    location?: XOR<LocationRelationFilter, locationWhereInput>
  }, "id">

  export type guidelineOrderByWithAggregationInput = {
    id?: SortOrder
    locId?: SortOrder
    tags?: SortOrder
    created?: SortOrder
    title?: SortOrder
    content?: SortOrder
    _count?: guidelineCountOrderByAggregateInput
    _avg?: guidelineAvgOrderByAggregateInput
    _max?: guidelineMaxOrderByAggregateInput
    _min?: guidelineMinOrderByAggregateInput
    _sum?: guidelineSumOrderByAggregateInput
  }

  export type guidelineScalarWhereWithAggregatesInput = {
    AND?: guidelineScalarWhereWithAggregatesInput | guidelineScalarWhereWithAggregatesInput[]
    OR?: guidelineScalarWhereWithAggregatesInput[]
    NOT?: guidelineScalarWhereWithAggregatesInput | guidelineScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"guideline"> | number
    locId?: IntWithAggregatesFilter<"guideline"> | number
    tags?: StringNullableListFilter<"guideline">
    created?: DateTimeWithAggregatesFilter<"guideline"> | Date | string
    title?: StringWithAggregatesFilter<"guideline"> | string
    content?: StringWithAggregatesFilter<"guideline"> | string
  }

  export type locationWhereInput = {
    AND?: locationWhereInput | locationWhereInput[]
    OR?: locationWhereInput[]
    NOT?: locationWhereInput | locationWhereInput[]
    id?: IntFilter<"location"> | number
    name?: StringFilter<"location"> | string
    lat?: StringFilter<"location"> | string
    lon?: StringFilter<"location"> | string
    type?: StringFilter<"location"> | string
    parentId?: IntNullableFilter<"location"> | number | null
    alias?: StringFilter<"location"> | string
    discussion?: DiscussionListRelationFilter
    guideline?: GuidelineListRelationFilter
    location?: XOR<LocationNullableRelationFilter, locationWhereInput> | null
    other_location?: LocationListRelationFilter
    report?: ReportListRelationFilter
    user?: UserListRelationFilter
    visit?: VisitListRelationFilter
  }

  export type locationOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    lat?: SortOrder
    lon?: SortOrder
    type?: SortOrder
    parentId?: SortOrderInput | SortOrder
    alias?: SortOrder
    discussion?: discussionOrderByRelationAggregateInput
    guideline?: guidelineOrderByRelationAggregateInput
    location?: locationOrderByWithRelationInput
    other_location?: locationOrderByRelationAggregateInput
    report?: reportOrderByRelationAggregateInput
    user?: userOrderByRelationAggregateInput
    visit?: visitOrderByRelationAggregateInput
  }

  export type locationWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: locationWhereInput | locationWhereInput[]
    OR?: locationWhereInput[]
    NOT?: locationWhereInput | locationWhereInput[]
    name?: StringFilter<"location"> | string
    lat?: StringFilter<"location"> | string
    lon?: StringFilter<"location"> | string
    type?: StringFilter<"location"> | string
    parentId?: IntNullableFilter<"location"> | number | null
    alias?: StringFilter<"location"> | string
    discussion?: DiscussionListRelationFilter
    guideline?: GuidelineListRelationFilter
    location?: XOR<LocationNullableRelationFilter, locationWhereInput> | null
    other_location?: LocationListRelationFilter
    report?: ReportListRelationFilter
    user?: UserListRelationFilter
    visit?: VisitListRelationFilter
  }, "id">

  export type locationOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    lat?: SortOrder
    lon?: SortOrder
    type?: SortOrder
    parentId?: SortOrderInput | SortOrder
    alias?: SortOrder
    _count?: locationCountOrderByAggregateInput
    _avg?: locationAvgOrderByAggregateInput
    _max?: locationMaxOrderByAggregateInput
    _min?: locationMinOrderByAggregateInput
    _sum?: locationSumOrderByAggregateInput
  }

  export type locationScalarWhereWithAggregatesInput = {
    AND?: locationScalarWhereWithAggregatesInput | locationScalarWhereWithAggregatesInput[]
    OR?: locationScalarWhereWithAggregatesInput[]
    NOT?: locationScalarWhereWithAggregatesInput | locationScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"location"> | number
    name?: StringWithAggregatesFilter<"location"> | string
    lat?: StringWithAggregatesFilter<"location"> | string
    lon?: StringWithAggregatesFilter<"location"> | string
    type?: StringWithAggregatesFilter<"location"> | string
    parentId?: IntNullableWithAggregatesFilter<"location"> | number | null
    alias?: StringWithAggregatesFilter<"location"> | string
  }

  export type replyWhereInput = {
    AND?: replyWhereInput | replyWhereInput[]
    OR?: replyWhereInput[]
    NOT?: replyWhereInput | replyWhereInput[]
    id?: IntFilter<"reply"> | number
    content?: StringFilter<"reply"> | string
    created_at?: DateTimeFilter<"reply"> | Date | string
    creatorId?: IntFilter<"reply"> | number
    discussionId?: IntNullableFilter<"reply"> | number | null
    parentId?: IntNullableFilter<"reply"> | number | null
    user?: XOR<UserRelationFilter, userWhereInput>
    discussions?: XOR<DiscussionNullableRelationFilter, discussionWhereInput> | null
    reply?: XOR<ReplyNullableRelationFilter, replyWhereInput> | null
    other_reply?: ReplyListRelationFilter
  }

  export type replyOrderByWithRelationInput = {
    id?: SortOrder
    content?: SortOrder
    created_at?: SortOrder
    creatorId?: SortOrder
    discussionId?: SortOrderInput | SortOrder
    parentId?: SortOrderInput | SortOrder
    user?: userOrderByWithRelationInput
    discussions?: discussionOrderByWithRelationInput
    reply?: replyOrderByWithRelationInput
    other_reply?: replyOrderByRelationAggregateInput
  }

  export type replyWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: replyWhereInput | replyWhereInput[]
    OR?: replyWhereInput[]
    NOT?: replyWhereInput | replyWhereInput[]
    content?: StringFilter<"reply"> | string
    created_at?: DateTimeFilter<"reply"> | Date | string
    creatorId?: IntFilter<"reply"> | number
    discussionId?: IntNullableFilter<"reply"> | number | null
    parentId?: IntNullableFilter<"reply"> | number | null
    user?: XOR<UserRelationFilter, userWhereInput>
    discussions?: XOR<DiscussionNullableRelationFilter, discussionWhereInput> | null
    reply?: XOR<ReplyNullableRelationFilter, replyWhereInput> | null
    other_reply?: ReplyListRelationFilter
  }, "id">

  export type replyOrderByWithAggregationInput = {
    id?: SortOrder
    content?: SortOrder
    created_at?: SortOrder
    creatorId?: SortOrder
    discussionId?: SortOrderInput | SortOrder
    parentId?: SortOrderInput | SortOrder
    _count?: replyCountOrderByAggregateInput
    _avg?: replyAvgOrderByAggregateInput
    _max?: replyMaxOrderByAggregateInput
    _min?: replyMinOrderByAggregateInput
    _sum?: replySumOrderByAggregateInput
  }

  export type replyScalarWhereWithAggregatesInput = {
    AND?: replyScalarWhereWithAggregatesInput | replyScalarWhereWithAggregatesInput[]
    OR?: replyScalarWhereWithAggregatesInput[]
    NOT?: replyScalarWhereWithAggregatesInput | replyScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"reply"> | number
    content?: StringWithAggregatesFilter<"reply"> | string
    created_at?: DateTimeWithAggregatesFilter<"reply"> | Date | string
    creatorId?: IntWithAggregatesFilter<"reply"> | number
    discussionId?: IntNullableWithAggregatesFilter<"reply"> | number | null
    parentId?: IntNullableWithAggregatesFilter<"reply"> | number | null
  }

  export type reportWhereInput = {
    AND?: reportWhereInput | reportWhereInput[]
    OR?: reportWhereInput[]
    NOT?: reportWhereInput | reportWhereInput[]
    id?: IntFilter<"report"> | number
    name?: StringFilter<"report"> | string
    desc?: StringFilter<"report"> | string
    created?: DateTimeFilter<"report"> | Date | string
    locId?: IntFilter<"report"> | number
    tag?: StringNullableFilter<"report"> | string | null
    location?: XOR<LocationRelationFilter, locationWhereInput>
  }

  export type reportOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    desc?: SortOrder
    created?: SortOrder
    locId?: SortOrder
    tag?: SortOrderInput | SortOrder
    location?: locationOrderByWithRelationInput
  }

  export type reportWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: reportWhereInput | reportWhereInput[]
    OR?: reportWhereInput[]
    NOT?: reportWhereInput | reportWhereInput[]
    name?: StringFilter<"report"> | string
    desc?: StringFilter<"report"> | string
    created?: DateTimeFilter<"report"> | Date | string
    locId?: IntFilter<"report"> | number
    tag?: StringNullableFilter<"report"> | string | null
    location?: XOR<LocationRelationFilter, locationWhereInput>
  }, "id">

  export type reportOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    desc?: SortOrder
    created?: SortOrder
    locId?: SortOrder
    tag?: SortOrderInput | SortOrder
    _count?: reportCountOrderByAggregateInput
    _avg?: reportAvgOrderByAggregateInput
    _max?: reportMaxOrderByAggregateInput
    _min?: reportMinOrderByAggregateInput
    _sum?: reportSumOrderByAggregateInput
  }

  export type reportScalarWhereWithAggregatesInput = {
    AND?: reportScalarWhereWithAggregatesInput | reportScalarWhereWithAggregatesInput[]
    OR?: reportScalarWhereWithAggregatesInput[]
    NOT?: reportScalarWhereWithAggregatesInput | reportScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"report"> | number
    name?: StringWithAggregatesFilter<"report"> | string
    desc?: StringWithAggregatesFilter<"report"> | string
    created?: DateTimeWithAggregatesFilter<"report"> | Date | string
    locId?: IntWithAggregatesFilter<"report"> | number
    tag?: StringNullableWithAggregatesFilter<"report"> | string | null
  }

  export type userWhereInput = {
    AND?: userWhereInput | userWhereInput[]
    OR?: userWhereInput[]
    NOT?: userWhereInput | userWhereInput[]
    id?: IntFilter<"user"> | number
    username?: StringFilter<"user"> | string
    email?: StringFilter<"user"> | string
    password?: StringFilter<"user"> | string
    resetToken?: StringNullableFilter<"user"> | string | null
    resetTokenExpiry?: DateTimeNullableFilter<"user"> | Date | string | null
    age?: IntNullableFilter<"user"> | number | null
    description?: StringNullableFilter<"user"> | string | null
    firstName?: StringFilter<"user"> | string
    hometownId?: IntNullableFilter<"user"> | number | null
    lastName?: StringFilter<"user"> | string
    profilePic?: StringNullableFilter<"user"> | string | null
    discussion?: DiscussionListRelationFilter
    reply?: ReplyListRelationFilter
    location?: XOR<LocationNullableRelationFilter, locationWhereInput> | null
    visit?: VisitListRelationFilter
  }

  export type userOrderByWithRelationInput = {
    id?: SortOrder
    username?: SortOrder
    email?: SortOrder
    password?: SortOrder
    resetToken?: SortOrderInput | SortOrder
    resetTokenExpiry?: SortOrderInput | SortOrder
    age?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    firstName?: SortOrder
    hometownId?: SortOrderInput | SortOrder
    lastName?: SortOrder
    profilePic?: SortOrderInput | SortOrder
    discussion?: discussionOrderByRelationAggregateInput
    reply?: replyOrderByRelationAggregateInput
    location?: locationOrderByWithRelationInput
    visit?: visitOrderByRelationAggregateInput
  }

  export type userWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    username?: string
    email?: string
    AND?: userWhereInput | userWhereInput[]
    OR?: userWhereInput[]
    NOT?: userWhereInput | userWhereInput[]
    password?: StringFilter<"user"> | string
    resetToken?: StringNullableFilter<"user"> | string | null
    resetTokenExpiry?: DateTimeNullableFilter<"user"> | Date | string | null
    age?: IntNullableFilter<"user"> | number | null
    description?: StringNullableFilter<"user"> | string | null
    firstName?: StringFilter<"user"> | string
    hometownId?: IntNullableFilter<"user"> | number | null
    lastName?: StringFilter<"user"> | string
    profilePic?: StringNullableFilter<"user"> | string | null
    discussion?: DiscussionListRelationFilter
    reply?: ReplyListRelationFilter
    location?: XOR<LocationNullableRelationFilter, locationWhereInput> | null
    visit?: VisitListRelationFilter
  }, "id" | "username" | "email">

  export type userOrderByWithAggregationInput = {
    id?: SortOrder
    username?: SortOrder
    email?: SortOrder
    password?: SortOrder
    resetToken?: SortOrderInput | SortOrder
    resetTokenExpiry?: SortOrderInput | SortOrder
    age?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    firstName?: SortOrder
    hometownId?: SortOrderInput | SortOrder
    lastName?: SortOrder
    profilePic?: SortOrderInput | SortOrder
    _count?: userCountOrderByAggregateInput
    _avg?: userAvgOrderByAggregateInput
    _max?: userMaxOrderByAggregateInput
    _min?: userMinOrderByAggregateInput
    _sum?: userSumOrderByAggregateInput
  }

  export type userScalarWhereWithAggregatesInput = {
    AND?: userScalarWhereWithAggregatesInput | userScalarWhereWithAggregatesInput[]
    OR?: userScalarWhereWithAggregatesInput[]
    NOT?: userScalarWhereWithAggregatesInput | userScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"user"> | number
    username?: StringWithAggregatesFilter<"user"> | string
    email?: StringWithAggregatesFilter<"user"> | string
    password?: StringWithAggregatesFilter<"user"> | string
    resetToken?: StringNullableWithAggregatesFilter<"user"> | string | null
    resetTokenExpiry?: DateTimeNullableWithAggregatesFilter<"user"> | Date | string | null
    age?: IntNullableWithAggregatesFilter<"user"> | number | null
    description?: StringNullableWithAggregatesFilter<"user"> | string | null
    firstName?: StringWithAggregatesFilter<"user"> | string
    hometownId?: IntNullableWithAggregatesFilter<"user"> | number | null
    lastName?: StringWithAggregatesFilter<"user"> | string
    profilePic?: StringNullableWithAggregatesFilter<"user"> | string | null
  }

  export type discussionWhereInput = {
    AND?: discussionWhereInput | discussionWhereInput[]
    OR?: discussionWhereInput[]
    NOT?: discussionWhereInput | discussionWhereInput[]
    id?: IntFilter<"discussion"> | number
    title?: StringFilter<"discussion"> | string
    created_at?: DateTimeFilter<"discussion"> | Date | string
    creatorId?: IntFilter<"discussion"> | number
    locationId?: IntFilter<"discussion"> | number
    content?: StringFilter<"discussion"> | string
    user?: XOR<UserRelationFilter, userWhereInput>
    location?: XOR<LocationRelationFilter, locationWhereInput>
    reply?: ReplyListRelationFilter
  }

  export type discussionOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    created_at?: SortOrder
    creatorId?: SortOrder
    locationId?: SortOrder
    content?: SortOrder
    user?: userOrderByWithRelationInput
    location?: locationOrderByWithRelationInput
    reply?: replyOrderByRelationAggregateInput
  }

  export type discussionWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: discussionWhereInput | discussionWhereInput[]
    OR?: discussionWhereInput[]
    NOT?: discussionWhereInput | discussionWhereInput[]
    title?: StringFilter<"discussion"> | string
    created_at?: DateTimeFilter<"discussion"> | Date | string
    creatorId?: IntFilter<"discussion"> | number
    locationId?: IntFilter<"discussion"> | number
    content?: StringFilter<"discussion"> | string
    user?: XOR<UserRelationFilter, userWhereInput>
    location?: XOR<LocationRelationFilter, locationWhereInput>
    reply?: ReplyListRelationFilter
  }, "id">

  export type discussionOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    created_at?: SortOrder
    creatorId?: SortOrder
    locationId?: SortOrder
    content?: SortOrder
    _count?: discussionCountOrderByAggregateInput
    _avg?: discussionAvgOrderByAggregateInput
    _max?: discussionMaxOrderByAggregateInput
    _min?: discussionMinOrderByAggregateInput
    _sum?: discussionSumOrderByAggregateInput
  }

  export type discussionScalarWhereWithAggregatesInput = {
    AND?: discussionScalarWhereWithAggregatesInput | discussionScalarWhereWithAggregatesInput[]
    OR?: discussionScalarWhereWithAggregatesInput[]
    NOT?: discussionScalarWhereWithAggregatesInput | discussionScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"discussion"> | number
    title?: StringWithAggregatesFilter<"discussion"> | string
    created_at?: DateTimeWithAggregatesFilter<"discussion"> | Date | string
    creatorId?: IntWithAggregatesFilter<"discussion"> | number
    locationId?: IntWithAggregatesFilter<"discussion"> | number
    content?: StringWithAggregatesFilter<"discussion"> | string
  }

  export type visitWhereInput = {
    AND?: visitWhereInput | visitWhereInput[]
    OR?: visitWhereInput[]
    NOT?: visitWhereInput | visitWhereInput[]
    id?: IntFilter<"visit"> | number
    userId?: IntFilter<"visit"> | number
    locationId?: IntFilter<"visit"> | number
    past?: BoolFilter<"visit"> | boolean
    longTerm?: BoolFilter<"visit"> | boolean
    location?: XOR<LocationRelationFilter, locationWhereInput>
    user?: XOR<UserRelationFilter, userWhereInput>
  }

  export type visitOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    locationId?: SortOrder
    past?: SortOrder
    longTerm?: SortOrder
    location?: locationOrderByWithRelationInput
    user?: userOrderByWithRelationInput
  }

  export type visitWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    userId_locationId?: visitUserIdLocationIdCompoundUniqueInput
    AND?: visitWhereInput | visitWhereInput[]
    OR?: visitWhereInput[]
    NOT?: visitWhereInput | visitWhereInput[]
    userId?: IntFilter<"visit"> | number
    locationId?: IntFilter<"visit"> | number
    past?: BoolFilter<"visit"> | boolean
    longTerm?: BoolFilter<"visit"> | boolean
    location?: XOR<LocationRelationFilter, locationWhereInput>
    user?: XOR<UserRelationFilter, userWhereInput>
  }, "id" | "userId_locationId">

  export type visitOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    locationId?: SortOrder
    past?: SortOrder
    longTerm?: SortOrder
    _count?: visitCountOrderByAggregateInput
    _avg?: visitAvgOrderByAggregateInput
    _max?: visitMaxOrderByAggregateInput
    _min?: visitMinOrderByAggregateInput
    _sum?: visitSumOrderByAggregateInput
  }

  export type visitScalarWhereWithAggregatesInput = {
    AND?: visitScalarWhereWithAggregatesInput | visitScalarWhereWithAggregatesInput[]
    OR?: visitScalarWhereWithAggregatesInput[]
    NOT?: visitScalarWhereWithAggregatesInput | visitScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"visit"> | number
    userId?: IntWithAggregatesFilter<"visit"> | number
    locationId?: IntWithAggregatesFilter<"visit"> | number
    past?: BoolWithAggregatesFilter<"visit"> | boolean
    longTerm?: BoolWithAggregatesFilter<"visit"> | boolean
  }

  export type guidelineCreateInput = {
    tags?: guidelineCreatetagsInput | string[]
    created: Date | string
    title: string
    content?: string
    location: locationCreateNestedOneWithoutGuidelineInput
  }

  export type guidelineUncheckedCreateInput = {
    id?: number
    locId: number
    tags?: guidelineCreatetagsInput | string[]
    created: Date | string
    title: string
    content?: string
  }

  export type guidelineUpdateInput = {
    tags?: guidelineUpdatetagsInput | string[]
    created?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    location?: locationUpdateOneRequiredWithoutGuidelineNestedInput
  }

  export type guidelineUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    locId?: IntFieldUpdateOperationsInput | number
    tags?: guidelineUpdatetagsInput | string[]
    created?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
  }

  export type guidelineCreateManyInput = {
    id?: number
    locId: number
    tags?: guidelineCreatetagsInput | string[]
    created: Date | string
    title: string
    content?: string
  }

  export type guidelineUpdateManyMutationInput = {
    tags?: guidelineUpdatetagsInput | string[]
    created?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
  }

  export type guidelineUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    locId?: IntFieldUpdateOperationsInput | number
    tags?: guidelineUpdatetagsInput | string[]
    created?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
  }

  export type locationCreateInput = {
    name: string
    lat: string
    lon: string
    type: string
    alias?: string
    discussion?: discussionCreateNestedManyWithoutLocationInput
    guideline?: guidelineCreateNestedManyWithoutLocationInput
    location?: locationCreateNestedOneWithoutOther_locationInput
    other_location?: locationCreateNestedManyWithoutLocationInput
    report?: reportCreateNestedManyWithoutLocationInput
    user?: userCreateNestedManyWithoutLocationInput
    visit?: visitCreateNestedManyWithoutLocationInput
  }

  export type locationUncheckedCreateInput = {
    id?: number
    name: string
    lat: string
    lon: string
    type: string
    parentId?: number | null
    alias?: string
    discussion?: discussionUncheckedCreateNestedManyWithoutLocationInput
    guideline?: guidelineUncheckedCreateNestedManyWithoutLocationInput
    other_location?: locationUncheckedCreateNestedManyWithoutLocationInput
    report?: reportUncheckedCreateNestedManyWithoutLocationInput
    user?: userUncheckedCreateNestedManyWithoutLocationInput
    visit?: visitUncheckedCreateNestedManyWithoutLocationInput
  }

  export type locationUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    lat?: StringFieldUpdateOperationsInput | string
    lon?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    alias?: StringFieldUpdateOperationsInput | string
    discussion?: discussionUpdateManyWithoutLocationNestedInput
    guideline?: guidelineUpdateManyWithoutLocationNestedInput
    location?: locationUpdateOneWithoutOther_locationNestedInput
    other_location?: locationUpdateManyWithoutLocationNestedInput
    report?: reportUpdateManyWithoutLocationNestedInput
    user?: userUpdateManyWithoutLocationNestedInput
    visit?: visitUpdateManyWithoutLocationNestedInput
  }

  export type locationUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    lat?: StringFieldUpdateOperationsInput | string
    lon?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    parentId?: NullableIntFieldUpdateOperationsInput | number | null
    alias?: StringFieldUpdateOperationsInput | string
    discussion?: discussionUncheckedUpdateManyWithoutLocationNestedInput
    guideline?: guidelineUncheckedUpdateManyWithoutLocationNestedInput
    other_location?: locationUncheckedUpdateManyWithoutLocationNestedInput
    report?: reportUncheckedUpdateManyWithoutLocationNestedInput
    user?: userUncheckedUpdateManyWithoutLocationNestedInput
    visit?: visitUncheckedUpdateManyWithoutLocationNestedInput
  }

  export type locationCreateManyInput = {
    id?: number
    name: string
    lat: string
    lon: string
    type: string
    parentId?: number | null
    alias?: string
  }

  export type locationUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    lat?: StringFieldUpdateOperationsInput | string
    lon?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    alias?: StringFieldUpdateOperationsInput | string
  }

  export type locationUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    lat?: StringFieldUpdateOperationsInput | string
    lon?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    parentId?: NullableIntFieldUpdateOperationsInput | number | null
    alias?: StringFieldUpdateOperationsInput | string
  }

  export type replyCreateInput = {
    content: string
    created_at?: Date | string
    user: userCreateNestedOneWithoutReplyInput
    discussions?: discussionCreateNestedOneWithoutReplyInput
    reply?: replyCreateNestedOneWithoutOther_replyInput
    other_reply?: replyCreateNestedManyWithoutReplyInput
  }

  export type replyUncheckedCreateInput = {
    id?: number
    content: string
    created_at?: Date | string
    creatorId: number
    discussionId?: number | null
    parentId?: number | null
    other_reply?: replyUncheckedCreateNestedManyWithoutReplyInput
  }

  export type replyUpdateInput = {
    content?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: userUpdateOneRequiredWithoutReplyNestedInput
    discussions?: discussionUpdateOneWithoutReplyNestedInput
    reply?: replyUpdateOneWithoutOther_replyNestedInput
    other_reply?: replyUpdateManyWithoutReplyNestedInput
  }

  export type replyUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    creatorId?: IntFieldUpdateOperationsInput | number
    discussionId?: NullableIntFieldUpdateOperationsInput | number | null
    parentId?: NullableIntFieldUpdateOperationsInput | number | null
    other_reply?: replyUncheckedUpdateManyWithoutReplyNestedInput
  }

  export type replyCreateManyInput = {
    id?: number
    content: string
    created_at?: Date | string
    creatorId: number
    discussionId?: number | null
    parentId?: number | null
  }

  export type replyUpdateManyMutationInput = {
    content?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type replyUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    creatorId?: IntFieldUpdateOperationsInput | number
    discussionId?: NullableIntFieldUpdateOperationsInput | number | null
    parentId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type reportCreateInput = {
    name: string
    desc: string
    created?: Date | string
    tag?: string | null
    location: locationCreateNestedOneWithoutReportInput
  }

  export type reportUncheckedCreateInput = {
    id?: number
    name: string
    desc: string
    created?: Date | string
    locId: number
    tag?: string | null
  }

  export type reportUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    desc?: StringFieldUpdateOperationsInput | string
    created?: DateTimeFieldUpdateOperationsInput | Date | string
    tag?: NullableStringFieldUpdateOperationsInput | string | null
    location?: locationUpdateOneRequiredWithoutReportNestedInput
  }

  export type reportUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    desc?: StringFieldUpdateOperationsInput | string
    created?: DateTimeFieldUpdateOperationsInput | Date | string
    locId?: IntFieldUpdateOperationsInput | number
    tag?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type reportCreateManyInput = {
    id?: number
    name: string
    desc: string
    created?: Date | string
    locId: number
    tag?: string | null
  }

  export type reportUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    desc?: StringFieldUpdateOperationsInput | string
    created?: DateTimeFieldUpdateOperationsInput | Date | string
    tag?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type reportUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    desc?: StringFieldUpdateOperationsInput | string
    created?: DateTimeFieldUpdateOperationsInput | Date | string
    locId?: IntFieldUpdateOperationsInput | number
    tag?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type userCreateInput = {
    username: string
    email: string
    password: string
    resetToken?: string | null
    resetTokenExpiry?: Date | string | null
    age?: number | null
    description?: string | null
    firstName?: string
    lastName?: string
    profilePic?: string | null
    discussion?: discussionCreateNestedManyWithoutUserInput
    reply?: replyCreateNestedManyWithoutUserInput
    location?: locationCreateNestedOneWithoutUserInput
    visit?: visitCreateNestedManyWithoutUserInput
  }

  export type userUncheckedCreateInput = {
    id?: number
    username: string
    email: string
    password: string
    resetToken?: string | null
    resetTokenExpiry?: Date | string | null
    age?: number | null
    description?: string | null
    firstName?: string
    hometownId?: number | null
    lastName?: string
    profilePic?: string | null
    discussion?: discussionUncheckedCreateNestedManyWithoutUserInput
    reply?: replyUncheckedCreateNestedManyWithoutUserInput
    visit?: visitUncheckedCreateNestedManyWithoutUserInput
  }

  export type userUpdateInput = {
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    resetToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    age?: NullableIntFieldUpdateOperationsInput | number | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    profilePic?: NullableStringFieldUpdateOperationsInput | string | null
    discussion?: discussionUpdateManyWithoutUserNestedInput
    reply?: replyUpdateManyWithoutUserNestedInput
    location?: locationUpdateOneWithoutUserNestedInput
    visit?: visitUpdateManyWithoutUserNestedInput
  }

  export type userUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    resetToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    age?: NullableIntFieldUpdateOperationsInput | number | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    hometownId?: NullableIntFieldUpdateOperationsInput | number | null
    lastName?: StringFieldUpdateOperationsInput | string
    profilePic?: NullableStringFieldUpdateOperationsInput | string | null
    discussion?: discussionUncheckedUpdateManyWithoutUserNestedInput
    reply?: replyUncheckedUpdateManyWithoutUserNestedInput
    visit?: visitUncheckedUpdateManyWithoutUserNestedInput
  }

  export type userCreateManyInput = {
    id?: number
    username: string
    email: string
    password: string
    resetToken?: string | null
    resetTokenExpiry?: Date | string | null
    age?: number | null
    description?: string | null
    firstName?: string
    hometownId?: number | null
    lastName?: string
    profilePic?: string | null
  }

  export type userUpdateManyMutationInput = {
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    resetToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    age?: NullableIntFieldUpdateOperationsInput | number | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    profilePic?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type userUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    resetToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    age?: NullableIntFieldUpdateOperationsInput | number | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    hometownId?: NullableIntFieldUpdateOperationsInput | number | null
    lastName?: StringFieldUpdateOperationsInput | string
    profilePic?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type discussionCreateInput = {
    title: string
    created_at?: Date | string
    content: string
    user: userCreateNestedOneWithoutDiscussionInput
    location: locationCreateNestedOneWithoutDiscussionInput
    reply?: replyCreateNestedManyWithoutDiscussionsInput
  }

  export type discussionUncheckedCreateInput = {
    id?: number
    title: string
    created_at?: Date | string
    creatorId: number
    locationId: number
    content: string
    reply?: replyUncheckedCreateNestedManyWithoutDiscussionsInput
  }

  export type discussionUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    content?: StringFieldUpdateOperationsInput | string
    user?: userUpdateOneRequiredWithoutDiscussionNestedInput
    location?: locationUpdateOneRequiredWithoutDiscussionNestedInput
    reply?: replyUpdateManyWithoutDiscussionsNestedInput
  }

  export type discussionUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    creatorId?: IntFieldUpdateOperationsInput | number
    locationId?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    reply?: replyUncheckedUpdateManyWithoutDiscussionsNestedInput
  }

  export type discussionCreateManyInput = {
    id?: number
    title: string
    created_at?: Date | string
    creatorId: number
    locationId: number
    content: string
  }

  export type discussionUpdateManyMutationInput = {
    title?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    content?: StringFieldUpdateOperationsInput | string
  }

  export type discussionUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    creatorId?: IntFieldUpdateOperationsInput | number
    locationId?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
  }

  export type visitCreateInput = {
    past: boolean
    longTerm: boolean
    location: locationCreateNestedOneWithoutVisitInput
    user: userCreateNestedOneWithoutVisitInput
  }

  export type visitUncheckedCreateInput = {
    id?: number
    userId: number
    locationId: number
    past: boolean
    longTerm: boolean
  }

  export type visitUpdateInput = {
    past?: BoolFieldUpdateOperationsInput | boolean
    longTerm?: BoolFieldUpdateOperationsInput | boolean
    location?: locationUpdateOneRequiredWithoutVisitNestedInput
    user?: userUpdateOneRequiredWithoutVisitNestedInput
  }

  export type visitUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    locationId?: IntFieldUpdateOperationsInput | number
    past?: BoolFieldUpdateOperationsInput | boolean
    longTerm?: BoolFieldUpdateOperationsInput | boolean
  }

  export type visitCreateManyInput = {
    id?: number
    userId: number
    locationId: number
    past: boolean
    longTerm: boolean
  }

  export type visitUpdateManyMutationInput = {
    past?: BoolFieldUpdateOperationsInput | boolean
    longTerm?: BoolFieldUpdateOperationsInput | boolean
  }

  export type visitUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    locationId?: IntFieldUpdateOperationsInput | number
    past?: BoolFieldUpdateOperationsInput | boolean
    longTerm?: BoolFieldUpdateOperationsInput | boolean
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringNullableListFilter<$PrismaModel = never> = {
    equals?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    has?: string | StringFieldRefInput<$PrismaModel> | null
    hasEvery?: string[] | ListStringFieldRefInput<$PrismaModel>
    hasSome?: string[] | ListStringFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type LocationRelationFilter = {
    is?: locationWhereInput
    isNot?: locationWhereInput
  }

  export type guidelineCountOrderByAggregateInput = {
    id?: SortOrder
    locId?: SortOrder
    tags?: SortOrder
    created?: SortOrder
    title?: SortOrder
    content?: SortOrder
  }

  export type guidelineAvgOrderByAggregateInput = {
    id?: SortOrder
    locId?: SortOrder
  }

  export type guidelineMaxOrderByAggregateInput = {
    id?: SortOrder
    locId?: SortOrder
    created?: SortOrder
    title?: SortOrder
    content?: SortOrder
  }

  export type guidelineMinOrderByAggregateInput = {
    id?: SortOrder
    locId?: SortOrder
    created?: SortOrder
    title?: SortOrder
    content?: SortOrder
  }

  export type guidelineSumOrderByAggregateInput = {
    id?: SortOrder
    locId?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type DiscussionListRelationFilter = {
    every?: discussionWhereInput
    some?: discussionWhereInput
    none?: discussionWhereInput
  }

  export type GuidelineListRelationFilter = {
    every?: guidelineWhereInput
    some?: guidelineWhereInput
    none?: guidelineWhereInput
  }

  export type LocationNullableRelationFilter = {
    is?: locationWhereInput | null
    isNot?: locationWhereInput | null
  }

  export type LocationListRelationFilter = {
    every?: locationWhereInput
    some?: locationWhereInput
    none?: locationWhereInput
  }

  export type ReportListRelationFilter = {
    every?: reportWhereInput
    some?: reportWhereInput
    none?: reportWhereInput
  }

  export type UserListRelationFilter = {
    every?: userWhereInput
    some?: userWhereInput
    none?: userWhereInput
  }

  export type VisitListRelationFilter = {
    every?: visitWhereInput
    some?: visitWhereInput
    none?: visitWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type discussionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type guidelineOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type locationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type reportOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type userOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type visitOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type locationCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    lat?: SortOrder
    lon?: SortOrder
    type?: SortOrder
    parentId?: SortOrder
    alias?: SortOrder
  }

  export type locationAvgOrderByAggregateInput = {
    id?: SortOrder
    parentId?: SortOrder
  }

  export type locationMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    lat?: SortOrder
    lon?: SortOrder
    type?: SortOrder
    parentId?: SortOrder
    alias?: SortOrder
  }

  export type locationMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    lat?: SortOrder
    lon?: SortOrder
    type?: SortOrder
    parentId?: SortOrder
    alias?: SortOrder
  }

  export type locationSumOrderByAggregateInput = {
    id?: SortOrder
    parentId?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type UserRelationFilter = {
    is?: userWhereInput
    isNot?: userWhereInput
  }

  export type DiscussionNullableRelationFilter = {
    is?: discussionWhereInput | null
    isNot?: discussionWhereInput | null
  }

  export type ReplyNullableRelationFilter = {
    is?: replyWhereInput | null
    isNot?: replyWhereInput | null
  }

  export type ReplyListRelationFilter = {
    every?: replyWhereInput
    some?: replyWhereInput
    none?: replyWhereInput
  }

  export type replyOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type replyCountOrderByAggregateInput = {
    id?: SortOrder
    content?: SortOrder
    created_at?: SortOrder
    creatorId?: SortOrder
    discussionId?: SortOrder
    parentId?: SortOrder
  }

  export type replyAvgOrderByAggregateInput = {
    id?: SortOrder
    creatorId?: SortOrder
    discussionId?: SortOrder
    parentId?: SortOrder
  }

  export type replyMaxOrderByAggregateInput = {
    id?: SortOrder
    content?: SortOrder
    created_at?: SortOrder
    creatorId?: SortOrder
    discussionId?: SortOrder
    parentId?: SortOrder
  }

  export type replyMinOrderByAggregateInput = {
    id?: SortOrder
    content?: SortOrder
    created_at?: SortOrder
    creatorId?: SortOrder
    discussionId?: SortOrder
    parentId?: SortOrder
  }

  export type replySumOrderByAggregateInput = {
    id?: SortOrder
    creatorId?: SortOrder
    discussionId?: SortOrder
    parentId?: SortOrder
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type reportCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    desc?: SortOrder
    created?: SortOrder
    locId?: SortOrder
    tag?: SortOrder
  }

  export type reportAvgOrderByAggregateInput = {
    id?: SortOrder
    locId?: SortOrder
  }

  export type reportMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    desc?: SortOrder
    created?: SortOrder
    locId?: SortOrder
    tag?: SortOrder
  }

  export type reportMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    desc?: SortOrder
    created?: SortOrder
    locId?: SortOrder
    tag?: SortOrder
  }

  export type reportSumOrderByAggregateInput = {
    id?: SortOrder
    locId?: SortOrder
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type userCountOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    email?: SortOrder
    password?: SortOrder
    resetToken?: SortOrder
    resetTokenExpiry?: SortOrder
    age?: SortOrder
    description?: SortOrder
    firstName?: SortOrder
    hometownId?: SortOrder
    lastName?: SortOrder
    profilePic?: SortOrder
  }

  export type userAvgOrderByAggregateInput = {
    id?: SortOrder
    age?: SortOrder
    hometownId?: SortOrder
  }

  export type userMaxOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    email?: SortOrder
    password?: SortOrder
    resetToken?: SortOrder
    resetTokenExpiry?: SortOrder
    age?: SortOrder
    description?: SortOrder
    firstName?: SortOrder
    hometownId?: SortOrder
    lastName?: SortOrder
    profilePic?: SortOrder
  }

  export type userMinOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    email?: SortOrder
    password?: SortOrder
    resetToken?: SortOrder
    resetTokenExpiry?: SortOrder
    age?: SortOrder
    description?: SortOrder
    firstName?: SortOrder
    hometownId?: SortOrder
    lastName?: SortOrder
    profilePic?: SortOrder
  }

  export type userSumOrderByAggregateInput = {
    id?: SortOrder
    age?: SortOrder
    hometownId?: SortOrder
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type discussionCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    created_at?: SortOrder
    creatorId?: SortOrder
    locationId?: SortOrder
    content?: SortOrder
  }

  export type discussionAvgOrderByAggregateInput = {
    id?: SortOrder
    creatorId?: SortOrder
    locationId?: SortOrder
  }

  export type discussionMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    created_at?: SortOrder
    creatorId?: SortOrder
    locationId?: SortOrder
    content?: SortOrder
  }

  export type discussionMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    created_at?: SortOrder
    creatorId?: SortOrder
    locationId?: SortOrder
    content?: SortOrder
  }

  export type discussionSumOrderByAggregateInput = {
    id?: SortOrder
    creatorId?: SortOrder
    locationId?: SortOrder
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type visitUserIdLocationIdCompoundUniqueInput = {
    userId: number
    locationId: number
  }

  export type visitCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    locationId?: SortOrder
    past?: SortOrder
    longTerm?: SortOrder
  }

  export type visitAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    locationId?: SortOrder
  }

  export type visitMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    locationId?: SortOrder
    past?: SortOrder
    longTerm?: SortOrder
  }

  export type visitMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    locationId?: SortOrder
    past?: SortOrder
    longTerm?: SortOrder
  }

  export type visitSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    locationId?: SortOrder
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type guidelineCreatetagsInput = {
    set: string[]
  }

  export type locationCreateNestedOneWithoutGuidelineInput = {
    create?: XOR<locationCreateWithoutGuidelineInput, locationUncheckedCreateWithoutGuidelineInput>
    connectOrCreate?: locationCreateOrConnectWithoutGuidelineInput
    connect?: locationWhereUniqueInput
  }

  export type guidelineUpdatetagsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type locationUpdateOneRequiredWithoutGuidelineNestedInput = {
    create?: XOR<locationCreateWithoutGuidelineInput, locationUncheckedCreateWithoutGuidelineInput>
    connectOrCreate?: locationCreateOrConnectWithoutGuidelineInput
    upsert?: locationUpsertWithoutGuidelineInput
    connect?: locationWhereUniqueInput
    update?: XOR<XOR<locationUpdateToOneWithWhereWithoutGuidelineInput, locationUpdateWithoutGuidelineInput>, locationUncheckedUpdateWithoutGuidelineInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type discussionCreateNestedManyWithoutLocationInput = {
    create?: XOR<discussionCreateWithoutLocationInput, discussionUncheckedCreateWithoutLocationInput> | discussionCreateWithoutLocationInput[] | discussionUncheckedCreateWithoutLocationInput[]
    connectOrCreate?: discussionCreateOrConnectWithoutLocationInput | discussionCreateOrConnectWithoutLocationInput[]
    createMany?: discussionCreateManyLocationInputEnvelope
    connect?: discussionWhereUniqueInput | discussionWhereUniqueInput[]
  }

  export type guidelineCreateNestedManyWithoutLocationInput = {
    create?: XOR<guidelineCreateWithoutLocationInput, guidelineUncheckedCreateWithoutLocationInput> | guidelineCreateWithoutLocationInput[] | guidelineUncheckedCreateWithoutLocationInput[]
    connectOrCreate?: guidelineCreateOrConnectWithoutLocationInput | guidelineCreateOrConnectWithoutLocationInput[]
    createMany?: guidelineCreateManyLocationInputEnvelope
    connect?: guidelineWhereUniqueInput | guidelineWhereUniqueInput[]
  }

  export type locationCreateNestedOneWithoutOther_locationInput = {
    create?: XOR<locationCreateWithoutOther_locationInput, locationUncheckedCreateWithoutOther_locationInput>
    connectOrCreate?: locationCreateOrConnectWithoutOther_locationInput
    connect?: locationWhereUniqueInput
  }

  export type locationCreateNestedManyWithoutLocationInput = {
    create?: XOR<locationCreateWithoutLocationInput, locationUncheckedCreateWithoutLocationInput> | locationCreateWithoutLocationInput[] | locationUncheckedCreateWithoutLocationInput[]
    connectOrCreate?: locationCreateOrConnectWithoutLocationInput | locationCreateOrConnectWithoutLocationInput[]
    createMany?: locationCreateManyLocationInputEnvelope
    connect?: locationWhereUniqueInput | locationWhereUniqueInput[]
  }

  export type reportCreateNestedManyWithoutLocationInput = {
    create?: XOR<reportCreateWithoutLocationInput, reportUncheckedCreateWithoutLocationInput> | reportCreateWithoutLocationInput[] | reportUncheckedCreateWithoutLocationInput[]
    connectOrCreate?: reportCreateOrConnectWithoutLocationInput | reportCreateOrConnectWithoutLocationInput[]
    createMany?: reportCreateManyLocationInputEnvelope
    connect?: reportWhereUniqueInput | reportWhereUniqueInput[]
  }

  export type userCreateNestedManyWithoutLocationInput = {
    create?: XOR<userCreateWithoutLocationInput, userUncheckedCreateWithoutLocationInput> | userCreateWithoutLocationInput[] | userUncheckedCreateWithoutLocationInput[]
    connectOrCreate?: userCreateOrConnectWithoutLocationInput | userCreateOrConnectWithoutLocationInput[]
    createMany?: userCreateManyLocationInputEnvelope
    connect?: userWhereUniqueInput | userWhereUniqueInput[]
  }

  export type visitCreateNestedManyWithoutLocationInput = {
    create?: XOR<visitCreateWithoutLocationInput, visitUncheckedCreateWithoutLocationInput> | visitCreateWithoutLocationInput[] | visitUncheckedCreateWithoutLocationInput[]
    connectOrCreate?: visitCreateOrConnectWithoutLocationInput | visitCreateOrConnectWithoutLocationInput[]
    createMany?: visitCreateManyLocationInputEnvelope
    connect?: visitWhereUniqueInput | visitWhereUniqueInput[]
  }

  export type discussionUncheckedCreateNestedManyWithoutLocationInput = {
    create?: XOR<discussionCreateWithoutLocationInput, discussionUncheckedCreateWithoutLocationInput> | discussionCreateWithoutLocationInput[] | discussionUncheckedCreateWithoutLocationInput[]
    connectOrCreate?: discussionCreateOrConnectWithoutLocationInput | discussionCreateOrConnectWithoutLocationInput[]
    createMany?: discussionCreateManyLocationInputEnvelope
    connect?: discussionWhereUniqueInput | discussionWhereUniqueInput[]
  }

  export type guidelineUncheckedCreateNestedManyWithoutLocationInput = {
    create?: XOR<guidelineCreateWithoutLocationInput, guidelineUncheckedCreateWithoutLocationInput> | guidelineCreateWithoutLocationInput[] | guidelineUncheckedCreateWithoutLocationInput[]
    connectOrCreate?: guidelineCreateOrConnectWithoutLocationInput | guidelineCreateOrConnectWithoutLocationInput[]
    createMany?: guidelineCreateManyLocationInputEnvelope
    connect?: guidelineWhereUniqueInput | guidelineWhereUniqueInput[]
  }

  export type locationUncheckedCreateNestedManyWithoutLocationInput = {
    create?: XOR<locationCreateWithoutLocationInput, locationUncheckedCreateWithoutLocationInput> | locationCreateWithoutLocationInput[] | locationUncheckedCreateWithoutLocationInput[]
    connectOrCreate?: locationCreateOrConnectWithoutLocationInput | locationCreateOrConnectWithoutLocationInput[]
    createMany?: locationCreateManyLocationInputEnvelope
    connect?: locationWhereUniqueInput | locationWhereUniqueInput[]
  }

  export type reportUncheckedCreateNestedManyWithoutLocationInput = {
    create?: XOR<reportCreateWithoutLocationInput, reportUncheckedCreateWithoutLocationInput> | reportCreateWithoutLocationInput[] | reportUncheckedCreateWithoutLocationInput[]
    connectOrCreate?: reportCreateOrConnectWithoutLocationInput | reportCreateOrConnectWithoutLocationInput[]
    createMany?: reportCreateManyLocationInputEnvelope
    connect?: reportWhereUniqueInput | reportWhereUniqueInput[]
  }

  export type userUncheckedCreateNestedManyWithoutLocationInput = {
    create?: XOR<userCreateWithoutLocationInput, userUncheckedCreateWithoutLocationInput> | userCreateWithoutLocationInput[] | userUncheckedCreateWithoutLocationInput[]
    connectOrCreate?: userCreateOrConnectWithoutLocationInput | userCreateOrConnectWithoutLocationInput[]
    createMany?: userCreateManyLocationInputEnvelope
    connect?: userWhereUniqueInput | userWhereUniqueInput[]
  }

  export type visitUncheckedCreateNestedManyWithoutLocationInput = {
    create?: XOR<visitCreateWithoutLocationInput, visitUncheckedCreateWithoutLocationInput> | visitCreateWithoutLocationInput[] | visitUncheckedCreateWithoutLocationInput[]
    connectOrCreate?: visitCreateOrConnectWithoutLocationInput | visitCreateOrConnectWithoutLocationInput[]
    createMany?: visitCreateManyLocationInputEnvelope
    connect?: visitWhereUniqueInput | visitWhereUniqueInput[]
  }

  export type discussionUpdateManyWithoutLocationNestedInput = {
    create?: XOR<discussionCreateWithoutLocationInput, discussionUncheckedCreateWithoutLocationInput> | discussionCreateWithoutLocationInput[] | discussionUncheckedCreateWithoutLocationInput[]
    connectOrCreate?: discussionCreateOrConnectWithoutLocationInput | discussionCreateOrConnectWithoutLocationInput[]
    upsert?: discussionUpsertWithWhereUniqueWithoutLocationInput | discussionUpsertWithWhereUniqueWithoutLocationInput[]
    createMany?: discussionCreateManyLocationInputEnvelope
    set?: discussionWhereUniqueInput | discussionWhereUniqueInput[]
    disconnect?: discussionWhereUniqueInput | discussionWhereUniqueInput[]
    delete?: discussionWhereUniqueInput | discussionWhereUniqueInput[]
    connect?: discussionWhereUniqueInput | discussionWhereUniqueInput[]
    update?: discussionUpdateWithWhereUniqueWithoutLocationInput | discussionUpdateWithWhereUniqueWithoutLocationInput[]
    updateMany?: discussionUpdateManyWithWhereWithoutLocationInput | discussionUpdateManyWithWhereWithoutLocationInput[]
    deleteMany?: discussionScalarWhereInput | discussionScalarWhereInput[]
  }

  export type guidelineUpdateManyWithoutLocationNestedInput = {
    create?: XOR<guidelineCreateWithoutLocationInput, guidelineUncheckedCreateWithoutLocationInput> | guidelineCreateWithoutLocationInput[] | guidelineUncheckedCreateWithoutLocationInput[]
    connectOrCreate?: guidelineCreateOrConnectWithoutLocationInput | guidelineCreateOrConnectWithoutLocationInput[]
    upsert?: guidelineUpsertWithWhereUniqueWithoutLocationInput | guidelineUpsertWithWhereUniqueWithoutLocationInput[]
    createMany?: guidelineCreateManyLocationInputEnvelope
    set?: guidelineWhereUniqueInput | guidelineWhereUniqueInput[]
    disconnect?: guidelineWhereUniqueInput | guidelineWhereUniqueInput[]
    delete?: guidelineWhereUniqueInput | guidelineWhereUniqueInput[]
    connect?: guidelineWhereUniqueInput | guidelineWhereUniqueInput[]
    update?: guidelineUpdateWithWhereUniqueWithoutLocationInput | guidelineUpdateWithWhereUniqueWithoutLocationInput[]
    updateMany?: guidelineUpdateManyWithWhereWithoutLocationInput | guidelineUpdateManyWithWhereWithoutLocationInput[]
    deleteMany?: guidelineScalarWhereInput | guidelineScalarWhereInput[]
  }

  export type locationUpdateOneWithoutOther_locationNestedInput = {
    create?: XOR<locationCreateWithoutOther_locationInput, locationUncheckedCreateWithoutOther_locationInput>
    connectOrCreate?: locationCreateOrConnectWithoutOther_locationInput
    upsert?: locationUpsertWithoutOther_locationInput
    disconnect?: locationWhereInput | boolean
    delete?: locationWhereInput | boolean
    connect?: locationWhereUniqueInput
    update?: XOR<XOR<locationUpdateToOneWithWhereWithoutOther_locationInput, locationUpdateWithoutOther_locationInput>, locationUncheckedUpdateWithoutOther_locationInput>
  }

  export type locationUpdateManyWithoutLocationNestedInput = {
    create?: XOR<locationCreateWithoutLocationInput, locationUncheckedCreateWithoutLocationInput> | locationCreateWithoutLocationInput[] | locationUncheckedCreateWithoutLocationInput[]
    connectOrCreate?: locationCreateOrConnectWithoutLocationInput | locationCreateOrConnectWithoutLocationInput[]
    upsert?: locationUpsertWithWhereUniqueWithoutLocationInput | locationUpsertWithWhereUniqueWithoutLocationInput[]
    createMany?: locationCreateManyLocationInputEnvelope
    set?: locationWhereUniqueInput | locationWhereUniqueInput[]
    disconnect?: locationWhereUniqueInput | locationWhereUniqueInput[]
    delete?: locationWhereUniqueInput | locationWhereUniqueInput[]
    connect?: locationWhereUniqueInput | locationWhereUniqueInput[]
    update?: locationUpdateWithWhereUniqueWithoutLocationInput | locationUpdateWithWhereUniqueWithoutLocationInput[]
    updateMany?: locationUpdateManyWithWhereWithoutLocationInput | locationUpdateManyWithWhereWithoutLocationInput[]
    deleteMany?: locationScalarWhereInput | locationScalarWhereInput[]
  }

  export type reportUpdateManyWithoutLocationNestedInput = {
    create?: XOR<reportCreateWithoutLocationInput, reportUncheckedCreateWithoutLocationInput> | reportCreateWithoutLocationInput[] | reportUncheckedCreateWithoutLocationInput[]
    connectOrCreate?: reportCreateOrConnectWithoutLocationInput | reportCreateOrConnectWithoutLocationInput[]
    upsert?: reportUpsertWithWhereUniqueWithoutLocationInput | reportUpsertWithWhereUniqueWithoutLocationInput[]
    createMany?: reportCreateManyLocationInputEnvelope
    set?: reportWhereUniqueInput | reportWhereUniqueInput[]
    disconnect?: reportWhereUniqueInput | reportWhereUniqueInput[]
    delete?: reportWhereUniqueInput | reportWhereUniqueInput[]
    connect?: reportWhereUniqueInput | reportWhereUniqueInput[]
    update?: reportUpdateWithWhereUniqueWithoutLocationInput | reportUpdateWithWhereUniqueWithoutLocationInput[]
    updateMany?: reportUpdateManyWithWhereWithoutLocationInput | reportUpdateManyWithWhereWithoutLocationInput[]
    deleteMany?: reportScalarWhereInput | reportScalarWhereInput[]
  }

  export type userUpdateManyWithoutLocationNestedInput = {
    create?: XOR<userCreateWithoutLocationInput, userUncheckedCreateWithoutLocationInput> | userCreateWithoutLocationInput[] | userUncheckedCreateWithoutLocationInput[]
    connectOrCreate?: userCreateOrConnectWithoutLocationInput | userCreateOrConnectWithoutLocationInput[]
    upsert?: userUpsertWithWhereUniqueWithoutLocationInput | userUpsertWithWhereUniqueWithoutLocationInput[]
    createMany?: userCreateManyLocationInputEnvelope
    set?: userWhereUniqueInput | userWhereUniqueInput[]
    disconnect?: userWhereUniqueInput | userWhereUniqueInput[]
    delete?: userWhereUniqueInput | userWhereUniqueInput[]
    connect?: userWhereUniqueInput | userWhereUniqueInput[]
    update?: userUpdateWithWhereUniqueWithoutLocationInput | userUpdateWithWhereUniqueWithoutLocationInput[]
    updateMany?: userUpdateManyWithWhereWithoutLocationInput | userUpdateManyWithWhereWithoutLocationInput[]
    deleteMany?: userScalarWhereInput | userScalarWhereInput[]
  }

  export type visitUpdateManyWithoutLocationNestedInput = {
    create?: XOR<visitCreateWithoutLocationInput, visitUncheckedCreateWithoutLocationInput> | visitCreateWithoutLocationInput[] | visitUncheckedCreateWithoutLocationInput[]
    connectOrCreate?: visitCreateOrConnectWithoutLocationInput | visitCreateOrConnectWithoutLocationInput[]
    upsert?: visitUpsertWithWhereUniqueWithoutLocationInput | visitUpsertWithWhereUniqueWithoutLocationInput[]
    createMany?: visitCreateManyLocationInputEnvelope
    set?: visitWhereUniqueInput | visitWhereUniqueInput[]
    disconnect?: visitWhereUniqueInput | visitWhereUniqueInput[]
    delete?: visitWhereUniqueInput | visitWhereUniqueInput[]
    connect?: visitWhereUniqueInput | visitWhereUniqueInput[]
    update?: visitUpdateWithWhereUniqueWithoutLocationInput | visitUpdateWithWhereUniqueWithoutLocationInput[]
    updateMany?: visitUpdateManyWithWhereWithoutLocationInput | visitUpdateManyWithWhereWithoutLocationInput[]
    deleteMany?: visitScalarWhereInput | visitScalarWhereInput[]
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type discussionUncheckedUpdateManyWithoutLocationNestedInput = {
    create?: XOR<discussionCreateWithoutLocationInput, discussionUncheckedCreateWithoutLocationInput> | discussionCreateWithoutLocationInput[] | discussionUncheckedCreateWithoutLocationInput[]
    connectOrCreate?: discussionCreateOrConnectWithoutLocationInput | discussionCreateOrConnectWithoutLocationInput[]
    upsert?: discussionUpsertWithWhereUniqueWithoutLocationInput | discussionUpsertWithWhereUniqueWithoutLocationInput[]
    createMany?: discussionCreateManyLocationInputEnvelope
    set?: discussionWhereUniqueInput | discussionWhereUniqueInput[]
    disconnect?: discussionWhereUniqueInput | discussionWhereUniqueInput[]
    delete?: discussionWhereUniqueInput | discussionWhereUniqueInput[]
    connect?: discussionWhereUniqueInput | discussionWhereUniqueInput[]
    update?: discussionUpdateWithWhereUniqueWithoutLocationInput | discussionUpdateWithWhereUniqueWithoutLocationInput[]
    updateMany?: discussionUpdateManyWithWhereWithoutLocationInput | discussionUpdateManyWithWhereWithoutLocationInput[]
    deleteMany?: discussionScalarWhereInput | discussionScalarWhereInput[]
  }

  export type guidelineUncheckedUpdateManyWithoutLocationNestedInput = {
    create?: XOR<guidelineCreateWithoutLocationInput, guidelineUncheckedCreateWithoutLocationInput> | guidelineCreateWithoutLocationInput[] | guidelineUncheckedCreateWithoutLocationInput[]
    connectOrCreate?: guidelineCreateOrConnectWithoutLocationInput | guidelineCreateOrConnectWithoutLocationInput[]
    upsert?: guidelineUpsertWithWhereUniqueWithoutLocationInput | guidelineUpsertWithWhereUniqueWithoutLocationInput[]
    createMany?: guidelineCreateManyLocationInputEnvelope
    set?: guidelineWhereUniqueInput | guidelineWhereUniqueInput[]
    disconnect?: guidelineWhereUniqueInput | guidelineWhereUniqueInput[]
    delete?: guidelineWhereUniqueInput | guidelineWhereUniqueInput[]
    connect?: guidelineWhereUniqueInput | guidelineWhereUniqueInput[]
    update?: guidelineUpdateWithWhereUniqueWithoutLocationInput | guidelineUpdateWithWhereUniqueWithoutLocationInput[]
    updateMany?: guidelineUpdateManyWithWhereWithoutLocationInput | guidelineUpdateManyWithWhereWithoutLocationInput[]
    deleteMany?: guidelineScalarWhereInput | guidelineScalarWhereInput[]
  }

  export type locationUncheckedUpdateManyWithoutLocationNestedInput = {
    create?: XOR<locationCreateWithoutLocationInput, locationUncheckedCreateWithoutLocationInput> | locationCreateWithoutLocationInput[] | locationUncheckedCreateWithoutLocationInput[]
    connectOrCreate?: locationCreateOrConnectWithoutLocationInput | locationCreateOrConnectWithoutLocationInput[]
    upsert?: locationUpsertWithWhereUniqueWithoutLocationInput | locationUpsertWithWhereUniqueWithoutLocationInput[]
    createMany?: locationCreateManyLocationInputEnvelope
    set?: locationWhereUniqueInput | locationWhereUniqueInput[]
    disconnect?: locationWhereUniqueInput | locationWhereUniqueInput[]
    delete?: locationWhereUniqueInput | locationWhereUniqueInput[]
    connect?: locationWhereUniqueInput | locationWhereUniqueInput[]
    update?: locationUpdateWithWhereUniqueWithoutLocationInput | locationUpdateWithWhereUniqueWithoutLocationInput[]
    updateMany?: locationUpdateManyWithWhereWithoutLocationInput | locationUpdateManyWithWhereWithoutLocationInput[]
    deleteMany?: locationScalarWhereInput | locationScalarWhereInput[]
  }

  export type reportUncheckedUpdateManyWithoutLocationNestedInput = {
    create?: XOR<reportCreateWithoutLocationInput, reportUncheckedCreateWithoutLocationInput> | reportCreateWithoutLocationInput[] | reportUncheckedCreateWithoutLocationInput[]
    connectOrCreate?: reportCreateOrConnectWithoutLocationInput | reportCreateOrConnectWithoutLocationInput[]
    upsert?: reportUpsertWithWhereUniqueWithoutLocationInput | reportUpsertWithWhereUniqueWithoutLocationInput[]
    createMany?: reportCreateManyLocationInputEnvelope
    set?: reportWhereUniqueInput | reportWhereUniqueInput[]
    disconnect?: reportWhereUniqueInput | reportWhereUniqueInput[]
    delete?: reportWhereUniqueInput | reportWhereUniqueInput[]
    connect?: reportWhereUniqueInput | reportWhereUniqueInput[]
    update?: reportUpdateWithWhereUniqueWithoutLocationInput | reportUpdateWithWhereUniqueWithoutLocationInput[]
    updateMany?: reportUpdateManyWithWhereWithoutLocationInput | reportUpdateManyWithWhereWithoutLocationInput[]
    deleteMany?: reportScalarWhereInput | reportScalarWhereInput[]
  }

  export type userUncheckedUpdateManyWithoutLocationNestedInput = {
    create?: XOR<userCreateWithoutLocationInput, userUncheckedCreateWithoutLocationInput> | userCreateWithoutLocationInput[] | userUncheckedCreateWithoutLocationInput[]
    connectOrCreate?: userCreateOrConnectWithoutLocationInput | userCreateOrConnectWithoutLocationInput[]
    upsert?: userUpsertWithWhereUniqueWithoutLocationInput | userUpsertWithWhereUniqueWithoutLocationInput[]
    createMany?: userCreateManyLocationInputEnvelope
    set?: userWhereUniqueInput | userWhereUniqueInput[]
    disconnect?: userWhereUniqueInput | userWhereUniqueInput[]
    delete?: userWhereUniqueInput | userWhereUniqueInput[]
    connect?: userWhereUniqueInput | userWhereUniqueInput[]
    update?: userUpdateWithWhereUniqueWithoutLocationInput | userUpdateWithWhereUniqueWithoutLocationInput[]
    updateMany?: userUpdateManyWithWhereWithoutLocationInput | userUpdateManyWithWhereWithoutLocationInput[]
    deleteMany?: userScalarWhereInput | userScalarWhereInput[]
  }

  export type visitUncheckedUpdateManyWithoutLocationNestedInput = {
    create?: XOR<visitCreateWithoutLocationInput, visitUncheckedCreateWithoutLocationInput> | visitCreateWithoutLocationInput[] | visitUncheckedCreateWithoutLocationInput[]
    connectOrCreate?: visitCreateOrConnectWithoutLocationInput | visitCreateOrConnectWithoutLocationInput[]
    upsert?: visitUpsertWithWhereUniqueWithoutLocationInput | visitUpsertWithWhereUniqueWithoutLocationInput[]
    createMany?: visitCreateManyLocationInputEnvelope
    set?: visitWhereUniqueInput | visitWhereUniqueInput[]
    disconnect?: visitWhereUniqueInput | visitWhereUniqueInput[]
    delete?: visitWhereUniqueInput | visitWhereUniqueInput[]
    connect?: visitWhereUniqueInput | visitWhereUniqueInput[]
    update?: visitUpdateWithWhereUniqueWithoutLocationInput | visitUpdateWithWhereUniqueWithoutLocationInput[]
    updateMany?: visitUpdateManyWithWhereWithoutLocationInput | visitUpdateManyWithWhereWithoutLocationInput[]
    deleteMany?: visitScalarWhereInput | visitScalarWhereInput[]
  }

  export type userCreateNestedOneWithoutReplyInput = {
    create?: XOR<userCreateWithoutReplyInput, userUncheckedCreateWithoutReplyInput>
    connectOrCreate?: userCreateOrConnectWithoutReplyInput
    connect?: userWhereUniqueInput
  }

  export type discussionCreateNestedOneWithoutReplyInput = {
    create?: XOR<discussionCreateWithoutReplyInput, discussionUncheckedCreateWithoutReplyInput>
    connectOrCreate?: discussionCreateOrConnectWithoutReplyInput
    connect?: discussionWhereUniqueInput
  }

  export type replyCreateNestedOneWithoutOther_replyInput = {
    create?: XOR<replyCreateWithoutOther_replyInput, replyUncheckedCreateWithoutOther_replyInput>
    connectOrCreate?: replyCreateOrConnectWithoutOther_replyInput
    connect?: replyWhereUniqueInput
  }

  export type replyCreateNestedManyWithoutReplyInput = {
    create?: XOR<replyCreateWithoutReplyInput, replyUncheckedCreateWithoutReplyInput> | replyCreateWithoutReplyInput[] | replyUncheckedCreateWithoutReplyInput[]
    connectOrCreate?: replyCreateOrConnectWithoutReplyInput | replyCreateOrConnectWithoutReplyInput[]
    createMany?: replyCreateManyReplyInputEnvelope
    connect?: replyWhereUniqueInput | replyWhereUniqueInput[]
  }

  export type replyUncheckedCreateNestedManyWithoutReplyInput = {
    create?: XOR<replyCreateWithoutReplyInput, replyUncheckedCreateWithoutReplyInput> | replyCreateWithoutReplyInput[] | replyUncheckedCreateWithoutReplyInput[]
    connectOrCreate?: replyCreateOrConnectWithoutReplyInput | replyCreateOrConnectWithoutReplyInput[]
    createMany?: replyCreateManyReplyInputEnvelope
    connect?: replyWhereUniqueInput | replyWhereUniqueInput[]
  }

  export type userUpdateOneRequiredWithoutReplyNestedInput = {
    create?: XOR<userCreateWithoutReplyInput, userUncheckedCreateWithoutReplyInput>
    connectOrCreate?: userCreateOrConnectWithoutReplyInput
    upsert?: userUpsertWithoutReplyInput
    connect?: userWhereUniqueInput
    update?: XOR<XOR<userUpdateToOneWithWhereWithoutReplyInput, userUpdateWithoutReplyInput>, userUncheckedUpdateWithoutReplyInput>
  }

  export type discussionUpdateOneWithoutReplyNestedInput = {
    create?: XOR<discussionCreateWithoutReplyInput, discussionUncheckedCreateWithoutReplyInput>
    connectOrCreate?: discussionCreateOrConnectWithoutReplyInput
    upsert?: discussionUpsertWithoutReplyInput
    disconnect?: discussionWhereInput | boolean
    delete?: discussionWhereInput | boolean
    connect?: discussionWhereUniqueInput
    update?: XOR<XOR<discussionUpdateToOneWithWhereWithoutReplyInput, discussionUpdateWithoutReplyInput>, discussionUncheckedUpdateWithoutReplyInput>
  }

  export type replyUpdateOneWithoutOther_replyNestedInput = {
    create?: XOR<replyCreateWithoutOther_replyInput, replyUncheckedCreateWithoutOther_replyInput>
    connectOrCreate?: replyCreateOrConnectWithoutOther_replyInput
    upsert?: replyUpsertWithoutOther_replyInput
    disconnect?: replyWhereInput | boolean
    delete?: replyWhereInput | boolean
    connect?: replyWhereUniqueInput
    update?: XOR<XOR<replyUpdateToOneWithWhereWithoutOther_replyInput, replyUpdateWithoutOther_replyInput>, replyUncheckedUpdateWithoutOther_replyInput>
  }

  export type replyUpdateManyWithoutReplyNestedInput = {
    create?: XOR<replyCreateWithoutReplyInput, replyUncheckedCreateWithoutReplyInput> | replyCreateWithoutReplyInput[] | replyUncheckedCreateWithoutReplyInput[]
    connectOrCreate?: replyCreateOrConnectWithoutReplyInput | replyCreateOrConnectWithoutReplyInput[]
    upsert?: replyUpsertWithWhereUniqueWithoutReplyInput | replyUpsertWithWhereUniqueWithoutReplyInput[]
    createMany?: replyCreateManyReplyInputEnvelope
    set?: replyWhereUniqueInput | replyWhereUniqueInput[]
    disconnect?: replyWhereUniqueInput | replyWhereUniqueInput[]
    delete?: replyWhereUniqueInput | replyWhereUniqueInput[]
    connect?: replyWhereUniqueInput | replyWhereUniqueInput[]
    update?: replyUpdateWithWhereUniqueWithoutReplyInput | replyUpdateWithWhereUniqueWithoutReplyInput[]
    updateMany?: replyUpdateManyWithWhereWithoutReplyInput | replyUpdateManyWithWhereWithoutReplyInput[]
    deleteMany?: replyScalarWhereInput | replyScalarWhereInput[]
  }

  export type replyUncheckedUpdateManyWithoutReplyNestedInput = {
    create?: XOR<replyCreateWithoutReplyInput, replyUncheckedCreateWithoutReplyInput> | replyCreateWithoutReplyInput[] | replyUncheckedCreateWithoutReplyInput[]
    connectOrCreate?: replyCreateOrConnectWithoutReplyInput | replyCreateOrConnectWithoutReplyInput[]
    upsert?: replyUpsertWithWhereUniqueWithoutReplyInput | replyUpsertWithWhereUniqueWithoutReplyInput[]
    createMany?: replyCreateManyReplyInputEnvelope
    set?: replyWhereUniqueInput | replyWhereUniqueInput[]
    disconnect?: replyWhereUniqueInput | replyWhereUniqueInput[]
    delete?: replyWhereUniqueInput | replyWhereUniqueInput[]
    connect?: replyWhereUniqueInput | replyWhereUniqueInput[]
    update?: replyUpdateWithWhereUniqueWithoutReplyInput | replyUpdateWithWhereUniqueWithoutReplyInput[]
    updateMany?: replyUpdateManyWithWhereWithoutReplyInput | replyUpdateManyWithWhereWithoutReplyInput[]
    deleteMany?: replyScalarWhereInput | replyScalarWhereInput[]
  }

  export type locationCreateNestedOneWithoutReportInput = {
    create?: XOR<locationCreateWithoutReportInput, locationUncheckedCreateWithoutReportInput>
    connectOrCreate?: locationCreateOrConnectWithoutReportInput
    connect?: locationWhereUniqueInput
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type locationUpdateOneRequiredWithoutReportNestedInput = {
    create?: XOR<locationCreateWithoutReportInput, locationUncheckedCreateWithoutReportInput>
    connectOrCreate?: locationCreateOrConnectWithoutReportInput
    upsert?: locationUpsertWithoutReportInput
    connect?: locationWhereUniqueInput
    update?: XOR<XOR<locationUpdateToOneWithWhereWithoutReportInput, locationUpdateWithoutReportInput>, locationUncheckedUpdateWithoutReportInput>
  }

  export type discussionCreateNestedManyWithoutUserInput = {
    create?: XOR<discussionCreateWithoutUserInput, discussionUncheckedCreateWithoutUserInput> | discussionCreateWithoutUserInput[] | discussionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: discussionCreateOrConnectWithoutUserInput | discussionCreateOrConnectWithoutUserInput[]
    createMany?: discussionCreateManyUserInputEnvelope
    connect?: discussionWhereUniqueInput | discussionWhereUniqueInput[]
  }

  export type replyCreateNestedManyWithoutUserInput = {
    create?: XOR<replyCreateWithoutUserInput, replyUncheckedCreateWithoutUserInput> | replyCreateWithoutUserInput[] | replyUncheckedCreateWithoutUserInput[]
    connectOrCreate?: replyCreateOrConnectWithoutUserInput | replyCreateOrConnectWithoutUserInput[]
    createMany?: replyCreateManyUserInputEnvelope
    connect?: replyWhereUniqueInput | replyWhereUniqueInput[]
  }

  export type locationCreateNestedOneWithoutUserInput = {
    create?: XOR<locationCreateWithoutUserInput, locationUncheckedCreateWithoutUserInput>
    connectOrCreate?: locationCreateOrConnectWithoutUserInput
    connect?: locationWhereUniqueInput
  }

  export type visitCreateNestedManyWithoutUserInput = {
    create?: XOR<visitCreateWithoutUserInput, visitUncheckedCreateWithoutUserInput> | visitCreateWithoutUserInput[] | visitUncheckedCreateWithoutUserInput[]
    connectOrCreate?: visitCreateOrConnectWithoutUserInput | visitCreateOrConnectWithoutUserInput[]
    createMany?: visitCreateManyUserInputEnvelope
    connect?: visitWhereUniqueInput | visitWhereUniqueInput[]
  }

  export type discussionUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<discussionCreateWithoutUserInput, discussionUncheckedCreateWithoutUserInput> | discussionCreateWithoutUserInput[] | discussionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: discussionCreateOrConnectWithoutUserInput | discussionCreateOrConnectWithoutUserInput[]
    createMany?: discussionCreateManyUserInputEnvelope
    connect?: discussionWhereUniqueInput | discussionWhereUniqueInput[]
  }

  export type replyUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<replyCreateWithoutUserInput, replyUncheckedCreateWithoutUserInput> | replyCreateWithoutUserInput[] | replyUncheckedCreateWithoutUserInput[]
    connectOrCreate?: replyCreateOrConnectWithoutUserInput | replyCreateOrConnectWithoutUserInput[]
    createMany?: replyCreateManyUserInputEnvelope
    connect?: replyWhereUniqueInput | replyWhereUniqueInput[]
  }

  export type visitUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<visitCreateWithoutUserInput, visitUncheckedCreateWithoutUserInput> | visitCreateWithoutUserInput[] | visitUncheckedCreateWithoutUserInput[]
    connectOrCreate?: visitCreateOrConnectWithoutUserInput | visitCreateOrConnectWithoutUserInput[]
    createMany?: visitCreateManyUserInputEnvelope
    connect?: visitWhereUniqueInput | visitWhereUniqueInput[]
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type discussionUpdateManyWithoutUserNestedInput = {
    create?: XOR<discussionCreateWithoutUserInput, discussionUncheckedCreateWithoutUserInput> | discussionCreateWithoutUserInput[] | discussionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: discussionCreateOrConnectWithoutUserInput | discussionCreateOrConnectWithoutUserInput[]
    upsert?: discussionUpsertWithWhereUniqueWithoutUserInput | discussionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: discussionCreateManyUserInputEnvelope
    set?: discussionWhereUniqueInput | discussionWhereUniqueInput[]
    disconnect?: discussionWhereUniqueInput | discussionWhereUniqueInput[]
    delete?: discussionWhereUniqueInput | discussionWhereUniqueInput[]
    connect?: discussionWhereUniqueInput | discussionWhereUniqueInput[]
    update?: discussionUpdateWithWhereUniqueWithoutUserInput | discussionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: discussionUpdateManyWithWhereWithoutUserInput | discussionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: discussionScalarWhereInput | discussionScalarWhereInput[]
  }

  export type replyUpdateManyWithoutUserNestedInput = {
    create?: XOR<replyCreateWithoutUserInput, replyUncheckedCreateWithoutUserInput> | replyCreateWithoutUserInput[] | replyUncheckedCreateWithoutUserInput[]
    connectOrCreate?: replyCreateOrConnectWithoutUserInput | replyCreateOrConnectWithoutUserInput[]
    upsert?: replyUpsertWithWhereUniqueWithoutUserInput | replyUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: replyCreateManyUserInputEnvelope
    set?: replyWhereUniqueInput | replyWhereUniqueInput[]
    disconnect?: replyWhereUniqueInput | replyWhereUniqueInput[]
    delete?: replyWhereUniqueInput | replyWhereUniqueInput[]
    connect?: replyWhereUniqueInput | replyWhereUniqueInput[]
    update?: replyUpdateWithWhereUniqueWithoutUserInput | replyUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: replyUpdateManyWithWhereWithoutUserInput | replyUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: replyScalarWhereInput | replyScalarWhereInput[]
  }

  export type locationUpdateOneWithoutUserNestedInput = {
    create?: XOR<locationCreateWithoutUserInput, locationUncheckedCreateWithoutUserInput>
    connectOrCreate?: locationCreateOrConnectWithoutUserInput
    upsert?: locationUpsertWithoutUserInput
    disconnect?: locationWhereInput | boolean
    delete?: locationWhereInput | boolean
    connect?: locationWhereUniqueInput
    update?: XOR<XOR<locationUpdateToOneWithWhereWithoutUserInput, locationUpdateWithoutUserInput>, locationUncheckedUpdateWithoutUserInput>
  }

  export type visitUpdateManyWithoutUserNestedInput = {
    create?: XOR<visitCreateWithoutUserInput, visitUncheckedCreateWithoutUserInput> | visitCreateWithoutUserInput[] | visitUncheckedCreateWithoutUserInput[]
    connectOrCreate?: visitCreateOrConnectWithoutUserInput | visitCreateOrConnectWithoutUserInput[]
    upsert?: visitUpsertWithWhereUniqueWithoutUserInput | visitUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: visitCreateManyUserInputEnvelope
    set?: visitWhereUniqueInput | visitWhereUniqueInput[]
    disconnect?: visitWhereUniqueInput | visitWhereUniqueInput[]
    delete?: visitWhereUniqueInput | visitWhereUniqueInput[]
    connect?: visitWhereUniqueInput | visitWhereUniqueInput[]
    update?: visitUpdateWithWhereUniqueWithoutUserInput | visitUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: visitUpdateManyWithWhereWithoutUserInput | visitUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: visitScalarWhereInput | visitScalarWhereInput[]
  }

  export type discussionUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<discussionCreateWithoutUserInput, discussionUncheckedCreateWithoutUserInput> | discussionCreateWithoutUserInput[] | discussionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: discussionCreateOrConnectWithoutUserInput | discussionCreateOrConnectWithoutUserInput[]
    upsert?: discussionUpsertWithWhereUniqueWithoutUserInput | discussionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: discussionCreateManyUserInputEnvelope
    set?: discussionWhereUniqueInput | discussionWhereUniqueInput[]
    disconnect?: discussionWhereUniqueInput | discussionWhereUniqueInput[]
    delete?: discussionWhereUniqueInput | discussionWhereUniqueInput[]
    connect?: discussionWhereUniqueInput | discussionWhereUniqueInput[]
    update?: discussionUpdateWithWhereUniqueWithoutUserInput | discussionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: discussionUpdateManyWithWhereWithoutUserInput | discussionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: discussionScalarWhereInput | discussionScalarWhereInput[]
  }

  export type replyUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<replyCreateWithoutUserInput, replyUncheckedCreateWithoutUserInput> | replyCreateWithoutUserInput[] | replyUncheckedCreateWithoutUserInput[]
    connectOrCreate?: replyCreateOrConnectWithoutUserInput | replyCreateOrConnectWithoutUserInput[]
    upsert?: replyUpsertWithWhereUniqueWithoutUserInput | replyUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: replyCreateManyUserInputEnvelope
    set?: replyWhereUniqueInput | replyWhereUniqueInput[]
    disconnect?: replyWhereUniqueInput | replyWhereUniqueInput[]
    delete?: replyWhereUniqueInput | replyWhereUniqueInput[]
    connect?: replyWhereUniqueInput | replyWhereUniqueInput[]
    update?: replyUpdateWithWhereUniqueWithoutUserInput | replyUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: replyUpdateManyWithWhereWithoutUserInput | replyUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: replyScalarWhereInput | replyScalarWhereInput[]
  }

  export type visitUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<visitCreateWithoutUserInput, visitUncheckedCreateWithoutUserInput> | visitCreateWithoutUserInput[] | visitUncheckedCreateWithoutUserInput[]
    connectOrCreate?: visitCreateOrConnectWithoutUserInput | visitCreateOrConnectWithoutUserInput[]
    upsert?: visitUpsertWithWhereUniqueWithoutUserInput | visitUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: visitCreateManyUserInputEnvelope
    set?: visitWhereUniqueInput | visitWhereUniqueInput[]
    disconnect?: visitWhereUniqueInput | visitWhereUniqueInput[]
    delete?: visitWhereUniqueInput | visitWhereUniqueInput[]
    connect?: visitWhereUniqueInput | visitWhereUniqueInput[]
    update?: visitUpdateWithWhereUniqueWithoutUserInput | visitUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: visitUpdateManyWithWhereWithoutUserInput | visitUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: visitScalarWhereInput | visitScalarWhereInput[]
  }

  export type userCreateNestedOneWithoutDiscussionInput = {
    create?: XOR<userCreateWithoutDiscussionInput, userUncheckedCreateWithoutDiscussionInput>
    connectOrCreate?: userCreateOrConnectWithoutDiscussionInput
    connect?: userWhereUniqueInput
  }

  export type locationCreateNestedOneWithoutDiscussionInput = {
    create?: XOR<locationCreateWithoutDiscussionInput, locationUncheckedCreateWithoutDiscussionInput>
    connectOrCreate?: locationCreateOrConnectWithoutDiscussionInput
    connect?: locationWhereUniqueInput
  }

  export type replyCreateNestedManyWithoutDiscussionsInput = {
    create?: XOR<replyCreateWithoutDiscussionsInput, replyUncheckedCreateWithoutDiscussionsInput> | replyCreateWithoutDiscussionsInput[] | replyUncheckedCreateWithoutDiscussionsInput[]
    connectOrCreate?: replyCreateOrConnectWithoutDiscussionsInput | replyCreateOrConnectWithoutDiscussionsInput[]
    createMany?: replyCreateManyDiscussionsInputEnvelope
    connect?: replyWhereUniqueInput | replyWhereUniqueInput[]
  }

  export type replyUncheckedCreateNestedManyWithoutDiscussionsInput = {
    create?: XOR<replyCreateWithoutDiscussionsInput, replyUncheckedCreateWithoutDiscussionsInput> | replyCreateWithoutDiscussionsInput[] | replyUncheckedCreateWithoutDiscussionsInput[]
    connectOrCreate?: replyCreateOrConnectWithoutDiscussionsInput | replyCreateOrConnectWithoutDiscussionsInput[]
    createMany?: replyCreateManyDiscussionsInputEnvelope
    connect?: replyWhereUniqueInput | replyWhereUniqueInput[]
  }

  export type userUpdateOneRequiredWithoutDiscussionNestedInput = {
    create?: XOR<userCreateWithoutDiscussionInput, userUncheckedCreateWithoutDiscussionInput>
    connectOrCreate?: userCreateOrConnectWithoutDiscussionInput
    upsert?: userUpsertWithoutDiscussionInput
    connect?: userWhereUniqueInput
    update?: XOR<XOR<userUpdateToOneWithWhereWithoutDiscussionInput, userUpdateWithoutDiscussionInput>, userUncheckedUpdateWithoutDiscussionInput>
  }

  export type locationUpdateOneRequiredWithoutDiscussionNestedInput = {
    create?: XOR<locationCreateWithoutDiscussionInput, locationUncheckedCreateWithoutDiscussionInput>
    connectOrCreate?: locationCreateOrConnectWithoutDiscussionInput
    upsert?: locationUpsertWithoutDiscussionInput
    connect?: locationWhereUniqueInput
    update?: XOR<XOR<locationUpdateToOneWithWhereWithoutDiscussionInput, locationUpdateWithoutDiscussionInput>, locationUncheckedUpdateWithoutDiscussionInput>
  }

  export type replyUpdateManyWithoutDiscussionsNestedInput = {
    create?: XOR<replyCreateWithoutDiscussionsInput, replyUncheckedCreateWithoutDiscussionsInput> | replyCreateWithoutDiscussionsInput[] | replyUncheckedCreateWithoutDiscussionsInput[]
    connectOrCreate?: replyCreateOrConnectWithoutDiscussionsInput | replyCreateOrConnectWithoutDiscussionsInput[]
    upsert?: replyUpsertWithWhereUniqueWithoutDiscussionsInput | replyUpsertWithWhereUniqueWithoutDiscussionsInput[]
    createMany?: replyCreateManyDiscussionsInputEnvelope
    set?: replyWhereUniqueInput | replyWhereUniqueInput[]
    disconnect?: replyWhereUniqueInput | replyWhereUniqueInput[]
    delete?: replyWhereUniqueInput | replyWhereUniqueInput[]
    connect?: replyWhereUniqueInput | replyWhereUniqueInput[]
    update?: replyUpdateWithWhereUniqueWithoutDiscussionsInput | replyUpdateWithWhereUniqueWithoutDiscussionsInput[]
    updateMany?: replyUpdateManyWithWhereWithoutDiscussionsInput | replyUpdateManyWithWhereWithoutDiscussionsInput[]
    deleteMany?: replyScalarWhereInput | replyScalarWhereInput[]
  }

  export type replyUncheckedUpdateManyWithoutDiscussionsNestedInput = {
    create?: XOR<replyCreateWithoutDiscussionsInput, replyUncheckedCreateWithoutDiscussionsInput> | replyCreateWithoutDiscussionsInput[] | replyUncheckedCreateWithoutDiscussionsInput[]
    connectOrCreate?: replyCreateOrConnectWithoutDiscussionsInput | replyCreateOrConnectWithoutDiscussionsInput[]
    upsert?: replyUpsertWithWhereUniqueWithoutDiscussionsInput | replyUpsertWithWhereUniqueWithoutDiscussionsInput[]
    createMany?: replyCreateManyDiscussionsInputEnvelope
    set?: replyWhereUniqueInput | replyWhereUniqueInput[]
    disconnect?: replyWhereUniqueInput | replyWhereUniqueInput[]
    delete?: replyWhereUniqueInput | replyWhereUniqueInput[]
    connect?: replyWhereUniqueInput | replyWhereUniqueInput[]
    update?: replyUpdateWithWhereUniqueWithoutDiscussionsInput | replyUpdateWithWhereUniqueWithoutDiscussionsInput[]
    updateMany?: replyUpdateManyWithWhereWithoutDiscussionsInput | replyUpdateManyWithWhereWithoutDiscussionsInput[]
    deleteMany?: replyScalarWhereInput | replyScalarWhereInput[]
  }

  export type locationCreateNestedOneWithoutVisitInput = {
    create?: XOR<locationCreateWithoutVisitInput, locationUncheckedCreateWithoutVisitInput>
    connectOrCreate?: locationCreateOrConnectWithoutVisitInput
    connect?: locationWhereUniqueInput
  }

  export type userCreateNestedOneWithoutVisitInput = {
    create?: XOR<userCreateWithoutVisitInput, userUncheckedCreateWithoutVisitInput>
    connectOrCreate?: userCreateOrConnectWithoutVisitInput
    connect?: userWhereUniqueInput
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type locationUpdateOneRequiredWithoutVisitNestedInput = {
    create?: XOR<locationCreateWithoutVisitInput, locationUncheckedCreateWithoutVisitInput>
    connectOrCreate?: locationCreateOrConnectWithoutVisitInput
    upsert?: locationUpsertWithoutVisitInput
    connect?: locationWhereUniqueInput
    update?: XOR<XOR<locationUpdateToOneWithWhereWithoutVisitInput, locationUpdateWithoutVisitInput>, locationUncheckedUpdateWithoutVisitInput>
  }

  export type userUpdateOneRequiredWithoutVisitNestedInput = {
    create?: XOR<userCreateWithoutVisitInput, userUncheckedCreateWithoutVisitInput>
    connectOrCreate?: userCreateOrConnectWithoutVisitInput
    upsert?: userUpsertWithoutVisitInput
    connect?: userWhereUniqueInput
    update?: XOR<XOR<userUpdateToOneWithWhereWithoutVisitInput, userUpdateWithoutVisitInput>, userUncheckedUpdateWithoutVisitInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type locationCreateWithoutGuidelineInput = {
    name: string
    lat: string
    lon: string
    type: string
    alias?: string
    discussion?: discussionCreateNestedManyWithoutLocationInput
    location?: locationCreateNestedOneWithoutOther_locationInput
    other_location?: locationCreateNestedManyWithoutLocationInput
    report?: reportCreateNestedManyWithoutLocationInput
    user?: userCreateNestedManyWithoutLocationInput
    visit?: visitCreateNestedManyWithoutLocationInput
  }

  export type locationUncheckedCreateWithoutGuidelineInput = {
    id?: number
    name: string
    lat: string
    lon: string
    type: string
    parentId?: number | null
    alias?: string
    discussion?: discussionUncheckedCreateNestedManyWithoutLocationInput
    other_location?: locationUncheckedCreateNestedManyWithoutLocationInput
    report?: reportUncheckedCreateNestedManyWithoutLocationInput
    user?: userUncheckedCreateNestedManyWithoutLocationInput
    visit?: visitUncheckedCreateNestedManyWithoutLocationInput
  }

  export type locationCreateOrConnectWithoutGuidelineInput = {
    where: locationWhereUniqueInput
    create: XOR<locationCreateWithoutGuidelineInput, locationUncheckedCreateWithoutGuidelineInput>
  }

  export type locationUpsertWithoutGuidelineInput = {
    update: XOR<locationUpdateWithoutGuidelineInput, locationUncheckedUpdateWithoutGuidelineInput>
    create: XOR<locationCreateWithoutGuidelineInput, locationUncheckedCreateWithoutGuidelineInput>
    where?: locationWhereInput
  }

  export type locationUpdateToOneWithWhereWithoutGuidelineInput = {
    where?: locationWhereInput
    data: XOR<locationUpdateWithoutGuidelineInput, locationUncheckedUpdateWithoutGuidelineInput>
  }

  export type locationUpdateWithoutGuidelineInput = {
    name?: StringFieldUpdateOperationsInput | string
    lat?: StringFieldUpdateOperationsInput | string
    lon?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    alias?: StringFieldUpdateOperationsInput | string
    discussion?: discussionUpdateManyWithoutLocationNestedInput
    location?: locationUpdateOneWithoutOther_locationNestedInput
    other_location?: locationUpdateManyWithoutLocationNestedInput
    report?: reportUpdateManyWithoutLocationNestedInput
    user?: userUpdateManyWithoutLocationNestedInput
    visit?: visitUpdateManyWithoutLocationNestedInput
  }

  export type locationUncheckedUpdateWithoutGuidelineInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    lat?: StringFieldUpdateOperationsInput | string
    lon?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    parentId?: NullableIntFieldUpdateOperationsInput | number | null
    alias?: StringFieldUpdateOperationsInput | string
    discussion?: discussionUncheckedUpdateManyWithoutLocationNestedInput
    other_location?: locationUncheckedUpdateManyWithoutLocationNestedInput
    report?: reportUncheckedUpdateManyWithoutLocationNestedInput
    user?: userUncheckedUpdateManyWithoutLocationNestedInput
    visit?: visitUncheckedUpdateManyWithoutLocationNestedInput
  }

  export type discussionCreateWithoutLocationInput = {
    title: string
    created_at?: Date | string
    content: string
    user: userCreateNestedOneWithoutDiscussionInput
    reply?: replyCreateNestedManyWithoutDiscussionsInput
  }

  export type discussionUncheckedCreateWithoutLocationInput = {
    id?: number
    title: string
    created_at?: Date | string
    creatorId: number
    content: string
    reply?: replyUncheckedCreateNestedManyWithoutDiscussionsInput
  }

  export type discussionCreateOrConnectWithoutLocationInput = {
    where: discussionWhereUniqueInput
    create: XOR<discussionCreateWithoutLocationInput, discussionUncheckedCreateWithoutLocationInput>
  }

  export type discussionCreateManyLocationInputEnvelope = {
    data: discussionCreateManyLocationInput | discussionCreateManyLocationInput[]
    skipDuplicates?: boolean
  }

  export type guidelineCreateWithoutLocationInput = {
    tags?: guidelineCreatetagsInput | string[]
    created: Date | string
    title: string
    content?: string
  }

  export type guidelineUncheckedCreateWithoutLocationInput = {
    id?: number
    tags?: guidelineCreatetagsInput | string[]
    created: Date | string
    title: string
    content?: string
  }

  export type guidelineCreateOrConnectWithoutLocationInput = {
    where: guidelineWhereUniqueInput
    create: XOR<guidelineCreateWithoutLocationInput, guidelineUncheckedCreateWithoutLocationInput>
  }

  export type guidelineCreateManyLocationInputEnvelope = {
    data: guidelineCreateManyLocationInput | guidelineCreateManyLocationInput[]
    skipDuplicates?: boolean
  }

  export type locationCreateWithoutOther_locationInput = {
    name: string
    lat: string
    lon: string
    type: string
    alias?: string
    discussion?: discussionCreateNestedManyWithoutLocationInput
    guideline?: guidelineCreateNestedManyWithoutLocationInput
    location?: locationCreateNestedOneWithoutOther_locationInput
    report?: reportCreateNestedManyWithoutLocationInput
    user?: userCreateNestedManyWithoutLocationInput
    visit?: visitCreateNestedManyWithoutLocationInput
  }

  export type locationUncheckedCreateWithoutOther_locationInput = {
    id?: number
    name: string
    lat: string
    lon: string
    type: string
    parentId?: number | null
    alias?: string
    discussion?: discussionUncheckedCreateNestedManyWithoutLocationInput
    guideline?: guidelineUncheckedCreateNestedManyWithoutLocationInput
    report?: reportUncheckedCreateNestedManyWithoutLocationInput
    user?: userUncheckedCreateNestedManyWithoutLocationInput
    visit?: visitUncheckedCreateNestedManyWithoutLocationInput
  }

  export type locationCreateOrConnectWithoutOther_locationInput = {
    where: locationWhereUniqueInput
    create: XOR<locationCreateWithoutOther_locationInput, locationUncheckedCreateWithoutOther_locationInput>
  }

  export type locationCreateWithoutLocationInput = {
    name: string
    lat: string
    lon: string
    type: string
    alias?: string
    discussion?: discussionCreateNestedManyWithoutLocationInput
    guideline?: guidelineCreateNestedManyWithoutLocationInput
    other_location?: locationCreateNestedManyWithoutLocationInput
    report?: reportCreateNestedManyWithoutLocationInput
    user?: userCreateNestedManyWithoutLocationInput
    visit?: visitCreateNestedManyWithoutLocationInput
  }

  export type locationUncheckedCreateWithoutLocationInput = {
    id?: number
    name: string
    lat: string
    lon: string
    type: string
    alias?: string
    discussion?: discussionUncheckedCreateNestedManyWithoutLocationInput
    guideline?: guidelineUncheckedCreateNestedManyWithoutLocationInput
    other_location?: locationUncheckedCreateNestedManyWithoutLocationInput
    report?: reportUncheckedCreateNestedManyWithoutLocationInput
    user?: userUncheckedCreateNestedManyWithoutLocationInput
    visit?: visitUncheckedCreateNestedManyWithoutLocationInput
  }

  export type locationCreateOrConnectWithoutLocationInput = {
    where: locationWhereUniqueInput
    create: XOR<locationCreateWithoutLocationInput, locationUncheckedCreateWithoutLocationInput>
  }

  export type locationCreateManyLocationInputEnvelope = {
    data: locationCreateManyLocationInput | locationCreateManyLocationInput[]
    skipDuplicates?: boolean
  }

  export type reportCreateWithoutLocationInput = {
    name: string
    desc: string
    created?: Date | string
    tag?: string | null
  }

  export type reportUncheckedCreateWithoutLocationInput = {
    id?: number
    name: string
    desc: string
    created?: Date | string
    tag?: string | null
  }

  export type reportCreateOrConnectWithoutLocationInput = {
    where: reportWhereUniqueInput
    create: XOR<reportCreateWithoutLocationInput, reportUncheckedCreateWithoutLocationInput>
  }

  export type reportCreateManyLocationInputEnvelope = {
    data: reportCreateManyLocationInput | reportCreateManyLocationInput[]
    skipDuplicates?: boolean
  }

  export type userCreateWithoutLocationInput = {
    username: string
    email: string
    password: string
    resetToken?: string | null
    resetTokenExpiry?: Date | string | null
    age?: number | null
    description?: string | null
    firstName?: string
    lastName?: string
    profilePic?: string | null
    discussion?: discussionCreateNestedManyWithoutUserInput
    reply?: replyCreateNestedManyWithoutUserInput
    visit?: visitCreateNestedManyWithoutUserInput
  }

  export type userUncheckedCreateWithoutLocationInput = {
    id?: number
    username: string
    email: string
    password: string
    resetToken?: string | null
    resetTokenExpiry?: Date | string | null
    age?: number | null
    description?: string | null
    firstName?: string
    lastName?: string
    profilePic?: string | null
    discussion?: discussionUncheckedCreateNestedManyWithoutUserInput
    reply?: replyUncheckedCreateNestedManyWithoutUserInput
    visit?: visitUncheckedCreateNestedManyWithoutUserInput
  }

  export type userCreateOrConnectWithoutLocationInput = {
    where: userWhereUniqueInput
    create: XOR<userCreateWithoutLocationInput, userUncheckedCreateWithoutLocationInput>
  }

  export type userCreateManyLocationInputEnvelope = {
    data: userCreateManyLocationInput | userCreateManyLocationInput[]
    skipDuplicates?: boolean
  }

  export type visitCreateWithoutLocationInput = {
    past: boolean
    longTerm: boolean
    user: userCreateNestedOneWithoutVisitInput
  }

  export type visitUncheckedCreateWithoutLocationInput = {
    id?: number
    userId: number
    past: boolean
    longTerm: boolean
  }

  export type visitCreateOrConnectWithoutLocationInput = {
    where: visitWhereUniqueInput
    create: XOR<visitCreateWithoutLocationInput, visitUncheckedCreateWithoutLocationInput>
  }

  export type visitCreateManyLocationInputEnvelope = {
    data: visitCreateManyLocationInput | visitCreateManyLocationInput[]
    skipDuplicates?: boolean
  }

  export type discussionUpsertWithWhereUniqueWithoutLocationInput = {
    where: discussionWhereUniqueInput
    update: XOR<discussionUpdateWithoutLocationInput, discussionUncheckedUpdateWithoutLocationInput>
    create: XOR<discussionCreateWithoutLocationInput, discussionUncheckedCreateWithoutLocationInput>
  }

  export type discussionUpdateWithWhereUniqueWithoutLocationInput = {
    where: discussionWhereUniqueInput
    data: XOR<discussionUpdateWithoutLocationInput, discussionUncheckedUpdateWithoutLocationInput>
  }

  export type discussionUpdateManyWithWhereWithoutLocationInput = {
    where: discussionScalarWhereInput
    data: XOR<discussionUpdateManyMutationInput, discussionUncheckedUpdateManyWithoutLocationInput>
  }

  export type discussionScalarWhereInput = {
    AND?: discussionScalarWhereInput | discussionScalarWhereInput[]
    OR?: discussionScalarWhereInput[]
    NOT?: discussionScalarWhereInput | discussionScalarWhereInput[]
    id?: IntFilter<"discussion"> | number
    title?: StringFilter<"discussion"> | string
    created_at?: DateTimeFilter<"discussion"> | Date | string
    creatorId?: IntFilter<"discussion"> | number
    locationId?: IntFilter<"discussion"> | number
    content?: StringFilter<"discussion"> | string
  }

  export type guidelineUpsertWithWhereUniqueWithoutLocationInput = {
    where: guidelineWhereUniqueInput
    update: XOR<guidelineUpdateWithoutLocationInput, guidelineUncheckedUpdateWithoutLocationInput>
    create: XOR<guidelineCreateWithoutLocationInput, guidelineUncheckedCreateWithoutLocationInput>
  }

  export type guidelineUpdateWithWhereUniqueWithoutLocationInput = {
    where: guidelineWhereUniqueInput
    data: XOR<guidelineUpdateWithoutLocationInput, guidelineUncheckedUpdateWithoutLocationInput>
  }

  export type guidelineUpdateManyWithWhereWithoutLocationInput = {
    where: guidelineScalarWhereInput
    data: XOR<guidelineUpdateManyMutationInput, guidelineUncheckedUpdateManyWithoutLocationInput>
  }

  export type guidelineScalarWhereInput = {
    AND?: guidelineScalarWhereInput | guidelineScalarWhereInput[]
    OR?: guidelineScalarWhereInput[]
    NOT?: guidelineScalarWhereInput | guidelineScalarWhereInput[]
    id?: IntFilter<"guideline"> | number
    locId?: IntFilter<"guideline"> | number
    tags?: StringNullableListFilter<"guideline">
    created?: DateTimeFilter<"guideline"> | Date | string
    title?: StringFilter<"guideline"> | string
    content?: StringFilter<"guideline"> | string
  }

  export type locationUpsertWithoutOther_locationInput = {
    update: XOR<locationUpdateWithoutOther_locationInput, locationUncheckedUpdateWithoutOther_locationInput>
    create: XOR<locationCreateWithoutOther_locationInput, locationUncheckedCreateWithoutOther_locationInput>
    where?: locationWhereInput
  }

  export type locationUpdateToOneWithWhereWithoutOther_locationInput = {
    where?: locationWhereInput
    data: XOR<locationUpdateWithoutOther_locationInput, locationUncheckedUpdateWithoutOther_locationInput>
  }

  export type locationUpdateWithoutOther_locationInput = {
    name?: StringFieldUpdateOperationsInput | string
    lat?: StringFieldUpdateOperationsInput | string
    lon?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    alias?: StringFieldUpdateOperationsInput | string
    discussion?: discussionUpdateManyWithoutLocationNestedInput
    guideline?: guidelineUpdateManyWithoutLocationNestedInput
    location?: locationUpdateOneWithoutOther_locationNestedInput
    report?: reportUpdateManyWithoutLocationNestedInput
    user?: userUpdateManyWithoutLocationNestedInput
    visit?: visitUpdateManyWithoutLocationNestedInput
  }

  export type locationUncheckedUpdateWithoutOther_locationInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    lat?: StringFieldUpdateOperationsInput | string
    lon?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    parentId?: NullableIntFieldUpdateOperationsInput | number | null
    alias?: StringFieldUpdateOperationsInput | string
    discussion?: discussionUncheckedUpdateManyWithoutLocationNestedInput
    guideline?: guidelineUncheckedUpdateManyWithoutLocationNestedInput
    report?: reportUncheckedUpdateManyWithoutLocationNestedInput
    user?: userUncheckedUpdateManyWithoutLocationNestedInput
    visit?: visitUncheckedUpdateManyWithoutLocationNestedInput
  }

  export type locationUpsertWithWhereUniqueWithoutLocationInput = {
    where: locationWhereUniqueInput
    update: XOR<locationUpdateWithoutLocationInput, locationUncheckedUpdateWithoutLocationInput>
    create: XOR<locationCreateWithoutLocationInput, locationUncheckedCreateWithoutLocationInput>
  }

  export type locationUpdateWithWhereUniqueWithoutLocationInput = {
    where: locationWhereUniqueInput
    data: XOR<locationUpdateWithoutLocationInput, locationUncheckedUpdateWithoutLocationInput>
  }

  export type locationUpdateManyWithWhereWithoutLocationInput = {
    where: locationScalarWhereInput
    data: XOR<locationUpdateManyMutationInput, locationUncheckedUpdateManyWithoutLocationInput>
  }

  export type locationScalarWhereInput = {
    AND?: locationScalarWhereInput | locationScalarWhereInput[]
    OR?: locationScalarWhereInput[]
    NOT?: locationScalarWhereInput | locationScalarWhereInput[]
    id?: IntFilter<"location"> | number
    name?: StringFilter<"location"> | string
    lat?: StringFilter<"location"> | string
    lon?: StringFilter<"location"> | string
    type?: StringFilter<"location"> | string
    parentId?: IntNullableFilter<"location"> | number | null
    alias?: StringFilter<"location"> | string
  }

  export type reportUpsertWithWhereUniqueWithoutLocationInput = {
    where: reportWhereUniqueInput
    update: XOR<reportUpdateWithoutLocationInput, reportUncheckedUpdateWithoutLocationInput>
    create: XOR<reportCreateWithoutLocationInput, reportUncheckedCreateWithoutLocationInput>
  }

  export type reportUpdateWithWhereUniqueWithoutLocationInput = {
    where: reportWhereUniqueInput
    data: XOR<reportUpdateWithoutLocationInput, reportUncheckedUpdateWithoutLocationInput>
  }

  export type reportUpdateManyWithWhereWithoutLocationInput = {
    where: reportScalarWhereInput
    data: XOR<reportUpdateManyMutationInput, reportUncheckedUpdateManyWithoutLocationInput>
  }

  export type reportScalarWhereInput = {
    AND?: reportScalarWhereInput | reportScalarWhereInput[]
    OR?: reportScalarWhereInput[]
    NOT?: reportScalarWhereInput | reportScalarWhereInput[]
    id?: IntFilter<"report"> | number
    name?: StringFilter<"report"> | string
    desc?: StringFilter<"report"> | string
    created?: DateTimeFilter<"report"> | Date | string
    locId?: IntFilter<"report"> | number
    tag?: StringNullableFilter<"report"> | string | null
  }

  export type userUpsertWithWhereUniqueWithoutLocationInput = {
    where: userWhereUniqueInput
    update: XOR<userUpdateWithoutLocationInput, userUncheckedUpdateWithoutLocationInput>
    create: XOR<userCreateWithoutLocationInput, userUncheckedCreateWithoutLocationInput>
  }

  export type userUpdateWithWhereUniqueWithoutLocationInput = {
    where: userWhereUniqueInput
    data: XOR<userUpdateWithoutLocationInput, userUncheckedUpdateWithoutLocationInput>
  }

  export type userUpdateManyWithWhereWithoutLocationInput = {
    where: userScalarWhereInput
    data: XOR<userUpdateManyMutationInput, userUncheckedUpdateManyWithoutLocationInput>
  }

  export type userScalarWhereInput = {
    AND?: userScalarWhereInput | userScalarWhereInput[]
    OR?: userScalarWhereInput[]
    NOT?: userScalarWhereInput | userScalarWhereInput[]
    id?: IntFilter<"user"> | number
    username?: StringFilter<"user"> | string
    email?: StringFilter<"user"> | string
    password?: StringFilter<"user"> | string
    resetToken?: StringNullableFilter<"user"> | string | null
    resetTokenExpiry?: DateTimeNullableFilter<"user"> | Date | string | null
    age?: IntNullableFilter<"user"> | number | null
    description?: StringNullableFilter<"user"> | string | null
    firstName?: StringFilter<"user"> | string
    hometownId?: IntNullableFilter<"user"> | number | null
    lastName?: StringFilter<"user"> | string
    profilePic?: StringNullableFilter<"user"> | string | null
  }

  export type visitUpsertWithWhereUniqueWithoutLocationInput = {
    where: visitWhereUniqueInput
    update: XOR<visitUpdateWithoutLocationInput, visitUncheckedUpdateWithoutLocationInput>
    create: XOR<visitCreateWithoutLocationInput, visitUncheckedCreateWithoutLocationInput>
  }

  export type visitUpdateWithWhereUniqueWithoutLocationInput = {
    where: visitWhereUniqueInput
    data: XOR<visitUpdateWithoutLocationInput, visitUncheckedUpdateWithoutLocationInput>
  }

  export type visitUpdateManyWithWhereWithoutLocationInput = {
    where: visitScalarWhereInput
    data: XOR<visitUpdateManyMutationInput, visitUncheckedUpdateManyWithoutLocationInput>
  }

  export type visitScalarWhereInput = {
    AND?: visitScalarWhereInput | visitScalarWhereInput[]
    OR?: visitScalarWhereInput[]
    NOT?: visitScalarWhereInput | visitScalarWhereInput[]
    id?: IntFilter<"visit"> | number
    userId?: IntFilter<"visit"> | number
    locationId?: IntFilter<"visit"> | number
    past?: BoolFilter<"visit"> | boolean
    longTerm?: BoolFilter<"visit"> | boolean
  }

  export type userCreateWithoutReplyInput = {
    username: string
    email: string
    password: string
    resetToken?: string | null
    resetTokenExpiry?: Date | string | null
    age?: number | null
    description?: string | null
    firstName?: string
    lastName?: string
    profilePic?: string | null
    discussion?: discussionCreateNestedManyWithoutUserInput
    location?: locationCreateNestedOneWithoutUserInput
    visit?: visitCreateNestedManyWithoutUserInput
  }

  export type userUncheckedCreateWithoutReplyInput = {
    id?: number
    username: string
    email: string
    password: string
    resetToken?: string | null
    resetTokenExpiry?: Date | string | null
    age?: number | null
    description?: string | null
    firstName?: string
    hometownId?: number | null
    lastName?: string
    profilePic?: string | null
    discussion?: discussionUncheckedCreateNestedManyWithoutUserInput
    visit?: visitUncheckedCreateNestedManyWithoutUserInput
  }

  export type userCreateOrConnectWithoutReplyInput = {
    where: userWhereUniqueInput
    create: XOR<userCreateWithoutReplyInput, userUncheckedCreateWithoutReplyInput>
  }

  export type discussionCreateWithoutReplyInput = {
    title: string
    created_at?: Date | string
    content: string
    user: userCreateNestedOneWithoutDiscussionInput
    location: locationCreateNestedOneWithoutDiscussionInput
  }

  export type discussionUncheckedCreateWithoutReplyInput = {
    id?: number
    title: string
    created_at?: Date | string
    creatorId: number
    locationId: number
    content: string
  }

  export type discussionCreateOrConnectWithoutReplyInput = {
    where: discussionWhereUniqueInput
    create: XOR<discussionCreateWithoutReplyInput, discussionUncheckedCreateWithoutReplyInput>
  }

  export type replyCreateWithoutOther_replyInput = {
    content: string
    created_at?: Date | string
    user: userCreateNestedOneWithoutReplyInput
    discussions?: discussionCreateNestedOneWithoutReplyInput
    reply?: replyCreateNestedOneWithoutOther_replyInput
  }

  export type replyUncheckedCreateWithoutOther_replyInput = {
    id?: number
    content: string
    created_at?: Date | string
    creatorId: number
    discussionId?: number | null
    parentId?: number | null
  }

  export type replyCreateOrConnectWithoutOther_replyInput = {
    where: replyWhereUniqueInput
    create: XOR<replyCreateWithoutOther_replyInput, replyUncheckedCreateWithoutOther_replyInput>
  }

  export type replyCreateWithoutReplyInput = {
    content: string
    created_at?: Date | string
    user: userCreateNestedOneWithoutReplyInput
    discussions?: discussionCreateNestedOneWithoutReplyInput
    other_reply?: replyCreateNestedManyWithoutReplyInput
  }

  export type replyUncheckedCreateWithoutReplyInput = {
    id?: number
    content: string
    created_at?: Date | string
    creatorId: number
    discussionId?: number | null
    other_reply?: replyUncheckedCreateNestedManyWithoutReplyInput
  }

  export type replyCreateOrConnectWithoutReplyInput = {
    where: replyWhereUniqueInput
    create: XOR<replyCreateWithoutReplyInput, replyUncheckedCreateWithoutReplyInput>
  }

  export type replyCreateManyReplyInputEnvelope = {
    data: replyCreateManyReplyInput | replyCreateManyReplyInput[]
    skipDuplicates?: boolean
  }

  export type userUpsertWithoutReplyInput = {
    update: XOR<userUpdateWithoutReplyInput, userUncheckedUpdateWithoutReplyInput>
    create: XOR<userCreateWithoutReplyInput, userUncheckedCreateWithoutReplyInput>
    where?: userWhereInput
  }

  export type userUpdateToOneWithWhereWithoutReplyInput = {
    where?: userWhereInput
    data: XOR<userUpdateWithoutReplyInput, userUncheckedUpdateWithoutReplyInput>
  }

  export type userUpdateWithoutReplyInput = {
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    resetToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    age?: NullableIntFieldUpdateOperationsInput | number | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    profilePic?: NullableStringFieldUpdateOperationsInput | string | null
    discussion?: discussionUpdateManyWithoutUserNestedInput
    location?: locationUpdateOneWithoutUserNestedInput
    visit?: visitUpdateManyWithoutUserNestedInput
  }

  export type userUncheckedUpdateWithoutReplyInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    resetToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    age?: NullableIntFieldUpdateOperationsInput | number | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    hometownId?: NullableIntFieldUpdateOperationsInput | number | null
    lastName?: StringFieldUpdateOperationsInput | string
    profilePic?: NullableStringFieldUpdateOperationsInput | string | null
    discussion?: discussionUncheckedUpdateManyWithoutUserNestedInput
    visit?: visitUncheckedUpdateManyWithoutUserNestedInput
  }

  export type discussionUpsertWithoutReplyInput = {
    update: XOR<discussionUpdateWithoutReplyInput, discussionUncheckedUpdateWithoutReplyInput>
    create: XOR<discussionCreateWithoutReplyInput, discussionUncheckedCreateWithoutReplyInput>
    where?: discussionWhereInput
  }

  export type discussionUpdateToOneWithWhereWithoutReplyInput = {
    where?: discussionWhereInput
    data: XOR<discussionUpdateWithoutReplyInput, discussionUncheckedUpdateWithoutReplyInput>
  }

  export type discussionUpdateWithoutReplyInput = {
    title?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    content?: StringFieldUpdateOperationsInput | string
    user?: userUpdateOneRequiredWithoutDiscussionNestedInput
    location?: locationUpdateOneRequiredWithoutDiscussionNestedInput
  }

  export type discussionUncheckedUpdateWithoutReplyInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    creatorId?: IntFieldUpdateOperationsInput | number
    locationId?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
  }

  export type replyUpsertWithoutOther_replyInput = {
    update: XOR<replyUpdateWithoutOther_replyInput, replyUncheckedUpdateWithoutOther_replyInput>
    create: XOR<replyCreateWithoutOther_replyInput, replyUncheckedCreateWithoutOther_replyInput>
    where?: replyWhereInput
  }

  export type replyUpdateToOneWithWhereWithoutOther_replyInput = {
    where?: replyWhereInput
    data: XOR<replyUpdateWithoutOther_replyInput, replyUncheckedUpdateWithoutOther_replyInput>
  }

  export type replyUpdateWithoutOther_replyInput = {
    content?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: userUpdateOneRequiredWithoutReplyNestedInput
    discussions?: discussionUpdateOneWithoutReplyNestedInput
    reply?: replyUpdateOneWithoutOther_replyNestedInput
  }

  export type replyUncheckedUpdateWithoutOther_replyInput = {
    id?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    creatorId?: IntFieldUpdateOperationsInput | number
    discussionId?: NullableIntFieldUpdateOperationsInput | number | null
    parentId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type replyUpsertWithWhereUniqueWithoutReplyInput = {
    where: replyWhereUniqueInput
    update: XOR<replyUpdateWithoutReplyInput, replyUncheckedUpdateWithoutReplyInput>
    create: XOR<replyCreateWithoutReplyInput, replyUncheckedCreateWithoutReplyInput>
  }

  export type replyUpdateWithWhereUniqueWithoutReplyInput = {
    where: replyWhereUniqueInput
    data: XOR<replyUpdateWithoutReplyInput, replyUncheckedUpdateWithoutReplyInput>
  }

  export type replyUpdateManyWithWhereWithoutReplyInput = {
    where: replyScalarWhereInput
    data: XOR<replyUpdateManyMutationInput, replyUncheckedUpdateManyWithoutReplyInput>
  }

  export type replyScalarWhereInput = {
    AND?: replyScalarWhereInput | replyScalarWhereInput[]
    OR?: replyScalarWhereInput[]
    NOT?: replyScalarWhereInput | replyScalarWhereInput[]
    id?: IntFilter<"reply"> | number
    content?: StringFilter<"reply"> | string
    created_at?: DateTimeFilter<"reply"> | Date | string
    creatorId?: IntFilter<"reply"> | number
    discussionId?: IntNullableFilter<"reply"> | number | null
    parentId?: IntNullableFilter<"reply"> | number | null
  }

  export type locationCreateWithoutReportInput = {
    name: string
    lat: string
    lon: string
    type: string
    alias?: string
    discussion?: discussionCreateNestedManyWithoutLocationInput
    guideline?: guidelineCreateNestedManyWithoutLocationInput
    location?: locationCreateNestedOneWithoutOther_locationInput
    other_location?: locationCreateNestedManyWithoutLocationInput
    user?: userCreateNestedManyWithoutLocationInput
    visit?: visitCreateNestedManyWithoutLocationInput
  }

  export type locationUncheckedCreateWithoutReportInput = {
    id?: number
    name: string
    lat: string
    lon: string
    type: string
    parentId?: number | null
    alias?: string
    discussion?: discussionUncheckedCreateNestedManyWithoutLocationInput
    guideline?: guidelineUncheckedCreateNestedManyWithoutLocationInput
    other_location?: locationUncheckedCreateNestedManyWithoutLocationInput
    user?: userUncheckedCreateNestedManyWithoutLocationInput
    visit?: visitUncheckedCreateNestedManyWithoutLocationInput
  }

  export type locationCreateOrConnectWithoutReportInput = {
    where: locationWhereUniqueInput
    create: XOR<locationCreateWithoutReportInput, locationUncheckedCreateWithoutReportInput>
  }

  export type locationUpsertWithoutReportInput = {
    update: XOR<locationUpdateWithoutReportInput, locationUncheckedUpdateWithoutReportInput>
    create: XOR<locationCreateWithoutReportInput, locationUncheckedCreateWithoutReportInput>
    where?: locationWhereInput
  }

  export type locationUpdateToOneWithWhereWithoutReportInput = {
    where?: locationWhereInput
    data: XOR<locationUpdateWithoutReportInput, locationUncheckedUpdateWithoutReportInput>
  }

  export type locationUpdateWithoutReportInput = {
    name?: StringFieldUpdateOperationsInput | string
    lat?: StringFieldUpdateOperationsInput | string
    lon?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    alias?: StringFieldUpdateOperationsInput | string
    discussion?: discussionUpdateManyWithoutLocationNestedInput
    guideline?: guidelineUpdateManyWithoutLocationNestedInput
    location?: locationUpdateOneWithoutOther_locationNestedInput
    other_location?: locationUpdateManyWithoutLocationNestedInput
    user?: userUpdateManyWithoutLocationNestedInput
    visit?: visitUpdateManyWithoutLocationNestedInput
  }

  export type locationUncheckedUpdateWithoutReportInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    lat?: StringFieldUpdateOperationsInput | string
    lon?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    parentId?: NullableIntFieldUpdateOperationsInput | number | null
    alias?: StringFieldUpdateOperationsInput | string
    discussion?: discussionUncheckedUpdateManyWithoutLocationNestedInput
    guideline?: guidelineUncheckedUpdateManyWithoutLocationNestedInput
    other_location?: locationUncheckedUpdateManyWithoutLocationNestedInput
    user?: userUncheckedUpdateManyWithoutLocationNestedInput
    visit?: visitUncheckedUpdateManyWithoutLocationNestedInput
  }

  export type discussionCreateWithoutUserInput = {
    title: string
    created_at?: Date | string
    content: string
    location: locationCreateNestedOneWithoutDiscussionInput
    reply?: replyCreateNestedManyWithoutDiscussionsInput
  }

  export type discussionUncheckedCreateWithoutUserInput = {
    id?: number
    title: string
    created_at?: Date | string
    locationId: number
    content: string
    reply?: replyUncheckedCreateNestedManyWithoutDiscussionsInput
  }

  export type discussionCreateOrConnectWithoutUserInput = {
    where: discussionWhereUniqueInput
    create: XOR<discussionCreateWithoutUserInput, discussionUncheckedCreateWithoutUserInput>
  }

  export type discussionCreateManyUserInputEnvelope = {
    data: discussionCreateManyUserInput | discussionCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type replyCreateWithoutUserInput = {
    content: string
    created_at?: Date | string
    discussions?: discussionCreateNestedOneWithoutReplyInput
    reply?: replyCreateNestedOneWithoutOther_replyInput
    other_reply?: replyCreateNestedManyWithoutReplyInput
  }

  export type replyUncheckedCreateWithoutUserInput = {
    id?: number
    content: string
    created_at?: Date | string
    discussionId?: number | null
    parentId?: number | null
    other_reply?: replyUncheckedCreateNestedManyWithoutReplyInput
  }

  export type replyCreateOrConnectWithoutUserInput = {
    where: replyWhereUniqueInput
    create: XOR<replyCreateWithoutUserInput, replyUncheckedCreateWithoutUserInput>
  }

  export type replyCreateManyUserInputEnvelope = {
    data: replyCreateManyUserInput | replyCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type locationCreateWithoutUserInput = {
    name: string
    lat: string
    lon: string
    type: string
    alias?: string
    discussion?: discussionCreateNestedManyWithoutLocationInput
    guideline?: guidelineCreateNestedManyWithoutLocationInput
    location?: locationCreateNestedOneWithoutOther_locationInput
    other_location?: locationCreateNestedManyWithoutLocationInput
    report?: reportCreateNestedManyWithoutLocationInput
    visit?: visitCreateNestedManyWithoutLocationInput
  }

  export type locationUncheckedCreateWithoutUserInput = {
    id?: number
    name: string
    lat: string
    lon: string
    type: string
    parentId?: number | null
    alias?: string
    discussion?: discussionUncheckedCreateNestedManyWithoutLocationInput
    guideline?: guidelineUncheckedCreateNestedManyWithoutLocationInput
    other_location?: locationUncheckedCreateNestedManyWithoutLocationInput
    report?: reportUncheckedCreateNestedManyWithoutLocationInput
    visit?: visitUncheckedCreateNestedManyWithoutLocationInput
  }

  export type locationCreateOrConnectWithoutUserInput = {
    where: locationWhereUniqueInput
    create: XOR<locationCreateWithoutUserInput, locationUncheckedCreateWithoutUserInput>
  }

  export type visitCreateWithoutUserInput = {
    past: boolean
    longTerm: boolean
    location: locationCreateNestedOneWithoutVisitInput
  }

  export type visitUncheckedCreateWithoutUserInput = {
    id?: number
    locationId: number
    past: boolean
    longTerm: boolean
  }

  export type visitCreateOrConnectWithoutUserInput = {
    where: visitWhereUniqueInput
    create: XOR<visitCreateWithoutUserInput, visitUncheckedCreateWithoutUserInput>
  }

  export type visitCreateManyUserInputEnvelope = {
    data: visitCreateManyUserInput | visitCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type discussionUpsertWithWhereUniqueWithoutUserInput = {
    where: discussionWhereUniqueInput
    update: XOR<discussionUpdateWithoutUserInput, discussionUncheckedUpdateWithoutUserInput>
    create: XOR<discussionCreateWithoutUserInput, discussionUncheckedCreateWithoutUserInput>
  }

  export type discussionUpdateWithWhereUniqueWithoutUserInput = {
    where: discussionWhereUniqueInput
    data: XOR<discussionUpdateWithoutUserInput, discussionUncheckedUpdateWithoutUserInput>
  }

  export type discussionUpdateManyWithWhereWithoutUserInput = {
    where: discussionScalarWhereInput
    data: XOR<discussionUpdateManyMutationInput, discussionUncheckedUpdateManyWithoutUserInput>
  }

  export type replyUpsertWithWhereUniqueWithoutUserInput = {
    where: replyWhereUniqueInput
    update: XOR<replyUpdateWithoutUserInput, replyUncheckedUpdateWithoutUserInput>
    create: XOR<replyCreateWithoutUserInput, replyUncheckedCreateWithoutUserInput>
  }

  export type replyUpdateWithWhereUniqueWithoutUserInput = {
    where: replyWhereUniqueInput
    data: XOR<replyUpdateWithoutUserInput, replyUncheckedUpdateWithoutUserInput>
  }

  export type replyUpdateManyWithWhereWithoutUserInput = {
    where: replyScalarWhereInput
    data: XOR<replyUpdateManyMutationInput, replyUncheckedUpdateManyWithoutUserInput>
  }

  export type locationUpsertWithoutUserInput = {
    update: XOR<locationUpdateWithoutUserInput, locationUncheckedUpdateWithoutUserInput>
    create: XOR<locationCreateWithoutUserInput, locationUncheckedCreateWithoutUserInput>
    where?: locationWhereInput
  }

  export type locationUpdateToOneWithWhereWithoutUserInput = {
    where?: locationWhereInput
    data: XOR<locationUpdateWithoutUserInput, locationUncheckedUpdateWithoutUserInput>
  }

  export type locationUpdateWithoutUserInput = {
    name?: StringFieldUpdateOperationsInput | string
    lat?: StringFieldUpdateOperationsInput | string
    lon?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    alias?: StringFieldUpdateOperationsInput | string
    discussion?: discussionUpdateManyWithoutLocationNestedInput
    guideline?: guidelineUpdateManyWithoutLocationNestedInput
    location?: locationUpdateOneWithoutOther_locationNestedInput
    other_location?: locationUpdateManyWithoutLocationNestedInput
    report?: reportUpdateManyWithoutLocationNestedInput
    visit?: visitUpdateManyWithoutLocationNestedInput
  }

  export type locationUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    lat?: StringFieldUpdateOperationsInput | string
    lon?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    parentId?: NullableIntFieldUpdateOperationsInput | number | null
    alias?: StringFieldUpdateOperationsInput | string
    discussion?: discussionUncheckedUpdateManyWithoutLocationNestedInput
    guideline?: guidelineUncheckedUpdateManyWithoutLocationNestedInput
    other_location?: locationUncheckedUpdateManyWithoutLocationNestedInput
    report?: reportUncheckedUpdateManyWithoutLocationNestedInput
    visit?: visitUncheckedUpdateManyWithoutLocationNestedInput
  }

  export type visitUpsertWithWhereUniqueWithoutUserInput = {
    where: visitWhereUniqueInput
    update: XOR<visitUpdateWithoutUserInput, visitUncheckedUpdateWithoutUserInput>
    create: XOR<visitCreateWithoutUserInput, visitUncheckedCreateWithoutUserInput>
  }

  export type visitUpdateWithWhereUniqueWithoutUserInput = {
    where: visitWhereUniqueInput
    data: XOR<visitUpdateWithoutUserInput, visitUncheckedUpdateWithoutUserInput>
  }

  export type visitUpdateManyWithWhereWithoutUserInput = {
    where: visitScalarWhereInput
    data: XOR<visitUpdateManyMutationInput, visitUncheckedUpdateManyWithoutUserInput>
  }

  export type userCreateWithoutDiscussionInput = {
    username: string
    email: string
    password: string
    resetToken?: string | null
    resetTokenExpiry?: Date | string | null
    age?: number | null
    description?: string | null
    firstName?: string
    lastName?: string
    profilePic?: string | null
    reply?: replyCreateNestedManyWithoutUserInput
    location?: locationCreateNestedOneWithoutUserInput
    visit?: visitCreateNestedManyWithoutUserInput
  }

  export type userUncheckedCreateWithoutDiscussionInput = {
    id?: number
    username: string
    email: string
    password: string
    resetToken?: string | null
    resetTokenExpiry?: Date | string | null
    age?: number | null
    description?: string | null
    firstName?: string
    hometownId?: number | null
    lastName?: string
    profilePic?: string | null
    reply?: replyUncheckedCreateNestedManyWithoutUserInput
    visit?: visitUncheckedCreateNestedManyWithoutUserInput
  }

  export type userCreateOrConnectWithoutDiscussionInput = {
    where: userWhereUniqueInput
    create: XOR<userCreateWithoutDiscussionInput, userUncheckedCreateWithoutDiscussionInput>
  }

  export type locationCreateWithoutDiscussionInput = {
    name: string
    lat: string
    lon: string
    type: string
    alias?: string
    guideline?: guidelineCreateNestedManyWithoutLocationInput
    location?: locationCreateNestedOneWithoutOther_locationInput
    other_location?: locationCreateNestedManyWithoutLocationInput
    report?: reportCreateNestedManyWithoutLocationInput
    user?: userCreateNestedManyWithoutLocationInput
    visit?: visitCreateNestedManyWithoutLocationInput
  }

  export type locationUncheckedCreateWithoutDiscussionInput = {
    id?: number
    name: string
    lat: string
    lon: string
    type: string
    parentId?: number | null
    alias?: string
    guideline?: guidelineUncheckedCreateNestedManyWithoutLocationInput
    other_location?: locationUncheckedCreateNestedManyWithoutLocationInput
    report?: reportUncheckedCreateNestedManyWithoutLocationInput
    user?: userUncheckedCreateNestedManyWithoutLocationInput
    visit?: visitUncheckedCreateNestedManyWithoutLocationInput
  }

  export type locationCreateOrConnectWithoutDiscussionInput = {
    where: locationWhereUniqueInput
    create: XOR<locationCreateWithoutDiscussionInput, locationUncheckedCreateWithoutDiscussionInput>
  }

  export type replyCreateWithoutDiscussionsInput = {
    content: string
    created_at?: Date | string
    user: userCreateNestedOneWithoutReplyInput
    reply?: replyCreateNestedOneWithoutOther_replyInput
    other_reply?: replyCreateNestedManyWithoutReplyInput
  }

  export type replyUncheckedCreateWithoutDiscussionsInput = {
    id?: number
    content: string
    created_at?: Date | string
    creatorId: number
    parentId?: number | null
    other_reply?: replyUncheckedCreateNestedManyWithoutReplyInput
  }

  export type replyCreateOrConnectWithoutDiscussionsInput = {
    where: replyWhereUniqueInput
    create: XOR<replyCreateWithoutDiscussionsInput, replyUncheckedCreateWithoutDiscussionsInput>
  }

  export type replyCreateManyDiscussionsInputEnvelope = {
    data: replyCreateManyDiscussionsInput | replyCreateManyDiscussionsInput[]
    skipDuplicates?: boolean
  }

  export type userUpsertWithoutDiscussionInput = {
    update: XOR<userUpdateWithoutDiscussionInput, userUncheckedUpdateWithoutDiscussionInput>
    create: XOR<userCreateWithoutDiscussionInput, userUncheckedCreateWithoutDiscussionInput>
    where?: userWhereInput
  }

  export type userUpdateToOneWithWhereWithoutDiscussionInput = {
    where?: userWhereInput
    data: XOR<userUpdateWithoutDiscussionInput, userUncheckedUpdateWithoutDiscussionInput>
  }

  export type userUpdateWithoutDiscussionInput = {
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    resetToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    age?: NullableIntFieldUpdateOperationsInput | number | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    profilePic?: NullableStringFieldUpdateOperationsInput | string | null
    reply?: replyUpdateManyWithoutUserNestedInput
    location?: locationUpdateOneWithoutUserNestedInput
    visit?: visitUpdateManyWithoutUserNestedInput
  }

  export type userUncheckedUpdateWithoutDiscussionInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    resetToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    age?: NullableIntFieldUpdateOperationsInput | number | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    hometownId?: NullableIntFieldUpdateOperationsInput | number | null
    lastName?: StringFieldUpdateOperationsInput | string
    profilePic?: NullableStringFieldUpdateOperationsInput | string | null
    reply?: replyUncheckedUpdateManyWithoutUserNestedInput
    visit?: visitUncheckedUpdateManyWithoutUserNestedInput
  }

  export type locationUpsertWithoutDiscussionInput = {
    update: XOR<locationUpdateWithoutDiscussionInput, locationUncheckedUpdateWithoutDiscussionInput>
    create: XOR<locationCreateWithoutDiscussionInput, locationUncheckedCreateWithoutDiscussionInput>
    where?: locationWhereInput
  }

  export type locationUpdateToOneWithWhereWithoutDiscussionInput = {
    where?: locationWhereInput
    data: XOR<locationUpdateWithoutDiscussionInput, locationUncheckedUpdateWithoutDiscussionInput>
  }

  export type locationUpdateWithoutDiscussionInput = {
    name?: StringFieldUpdateOperationsInput | string
    lat?: StringFieldUpdateOperationsInput | string
    lon?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    alias?: StringFieldUpdateOperationsInput | string
    guideline?: guidelineUpdateManyWithoutLocationNestedInput
    location?: locationUpdateOneWithoutOther_locationNestedInput
    other_location?: locationUpdateManyWithoutLocationNestedInput
    report?: reportUpdateManyWithoutLocationNestedInput
    user?: userUpdateManyWithoutLocationNestedInput
    visit?: visitUpdateManyWithoutLocationNestedInput
  }

  export type locationUncheckedUpdateWithoutDiscussionInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    lat?: StringFieldUpdateOperationsInput | string
    lon?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    parentId?: NullableIntFieldUpdateOperationsInput | number | null
    alias?: StringFieldUpdateOperationsInput | string
    guideline?: guidelineUncheckedUpdateManyWithoutLocationNestedInput
    other_location?: locationUncheckedUpdateManyWithoutLocationNestedInput
    report?: reportUncheckedUpdateManyWithoutLocationNestedInput
    user?: userUncheckedUpdateManyWithoutLocationNestedInput
    visit?: visitUncheckedUpdateManyWithoutLocationNestedInput
  }

  export type replyUpsertWithWhereUniqueWithoutDiscussionsInput = {
    where: replyWhereUniqueInput
    update: XOR<replyUpdateWithoutDiscussionsInput, replyUncheckedUpdateWithoutDiscussionsInput>
    create: XOR<replyCreateWithoutDiscussionsInput, replyUncheckedCreateWithoutDiscussionsInput>
  }

  export type replyUpdateWithWhereUniqueWithoutDiscussionsInput = {
    where: replyWhereUniqueInput
    data: XOR<replyUpdateWithoutDiscussionsInput, replyUncheckedUpdateWithoutDiscussionsInput>
  }

  export type replyUpdateManyWithWhereWithoutDiscussionsInput = {
    where: replyScalarWhereInput
    data: XOR<replyUpdateManyMutationInput, replyUncheckedUpdateManyWithoutDiscussionsInput>
  }

  export type locationCreateWithoutVisitInput = {
    name: string
    lat: string
    lon: string
    type: string
    alias?: string
    discussion?: discussionCreateNestedManyWithoutLocationInput
    guideline?: guidelineCreateNestedManyWithoutLocationInput
    location?: locationCreateNestedOneWithoutOther_locationInput
    other_location?: locationCreateNestedManyWithoutLocationInput
    report?: reportCreateNestedManyWithoutLocationInput
    user?: userCreateNestedManyWithoutLocationInput
  }

  export type locationUncheckedCreateWithoutVisitInput = {
    id?: number
    name: string
    lat: string
    lon: string
    type: string
    parentId?: number | null
    alias?: string
    discussion?: discussionUncheckedCreateNestedManyWithoutLocationInput
    guideline?: guidelineUncheckedCreateNestedManyWithoutLocationInput
    other_location?: locationUncheckedCreateNestedManyWithoutLocationInput
    report?: reportUncheckedCreateNestedManyWithoutLocationInput
    user?: userUncheckedCreateNestedManyWithoutLocationInput
  }

  export type locationCreateOrConnectWithoutVisitInput = {
    where: locationWhereUniqueInput
    create: XOR<locationCreateWithoutVisitInput, locationUncheckedCreateWithoutVisitInput>
  }

  export type userCreateWithoutVisitInput = {
    username: string
    email: string
    password: string
    resetToken?: string | null
    resetTokenExpiry?: Date | string | null
    age?: number | null
    description?: string | null
    firstName?: string
    lastName?: string
    profilePic?: string | null
    discussion?: discussionCreateNestedManyWithoutUserInput
    reply?: replyCreateNestedManyWithoutUserInput
    location?: locationCreateNestedOneWithoutUserInput
  }

  export type userUncheckedCreateWithoutVisitInput = {
    id?: number
    username: string
    email: string
    password: string
    resetToken?: string | null
    resetTokenExpiry?: Date | string | null
    age?: number | null
    description?: string | null
    firstName?: string
    hometownId?: number | null
    lastName?: string
    profilePic?: string | null
    discussion?: discussionUncheckedCreateNestedManyWithoutUserInput
    reply?: replyUncheckedCreateNestedManyWithoutUserInput
  }

  export type userCreateOrConnectWithoutVisitInput = {
    where: userWhereUniqueInput
    create: XOR<userCreateWithoutVisitInput, userUncheckedCreateWithoutVisitInput>
  }

  export type locationUpsertWithoutVisitInput = {
    update: XOR<locationUpdateWithoutVisitInput, locationUncheckedUpdateWithoutVisitInput>
    create: XOR<locationCreateWithoutVisitInput, locationUncheckedCreateWithoutVisitInput>
    where?: locationWhereInput
  }

  export type locationUpdateToOneWithWhereWithoutVisitInput = {
    where?: locationWhereInput
    data: XOR<locationUpdateWithoutVisitInput, locationUncheckedUpdateWithoutVisitInput>
  }

  export type locationUpdateWithoutVisitInput = {
    name?: StringFieldUpdateOperationsInput | string
    lat?: StringFieldUpdateOperationsInput | string
    lon?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    alias?: StringFieldUpdateOperationsInput | string
    discussion?: discussionUpdateManyWithoutLocationNestedInput
    guideline?: guidelineUpdateManyWithoutLocationNestedInput
    location?: locationUpdateOneWithoutOther_locationNestedInput
    other_location?: locationUpdateManyWithoutLocationNestedInput
    report?: reportUpdateManyWithoutLocationNestedInput
    user?: userUpdateManyWithoutLocationNestedInput
  }

  export type locationUncheckedUpdateWithoutVisitInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    lat?: StringFieldUpdateOperationsInput | string
    lon?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    parentId?: NullableIntFieldUpdateOperationsInput | number | null
    alias?: StringFieldUpdateOperationsInput | string
    discussion?: discussionUncheckedUpdateManyWithoutLocationNestedInput
    guideline?: guidelineUncheckedUpdateManyWithoutLocationNestedInput
    other_location?: locationUncheckedUpdateManyWithoutLocationNestedInput
    report?: reportUncheckedUpdateManyWithoutLocationNestedInput
    user?: userUncheckedUpdateManyWithoutLocationNestedInput
  }

  export type userUpsertWithoutVisitInput = {
    update: XOR<userUpdateWithoutVisitInput, userUncheckedUpdateWithoutVisitInput>
    create: XOR<userCreateWithoutVisitInput, userUncheckedCreateWithoutVisitInput>
    where?: userWhereInput
  }

  export type userUpdateToOneWithWhereWithoutVisitInput = {
    where?: userWhereInput
    data: XOR<userUpdateWithoutVisitInput, userUncheckedUpdateWithoutVisitInput>
  }

  export type userUpdateWithoutVisitInput = {
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    resetToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    age?: NullableIntFieldUpdateOperationsInput | number | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    profilePic?: NullableStringFieldUpdateOperationsInput | string | null
    discussion?: discussionUpdateManyWithoutUserNestedInput
    reply?: replyUpdateManyWithoutUserNestedInput
    location?: locationUpdateOneWithoutUserNestedInput
  }

  export type userUncheckedUpdateWithoutVisitInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    resetToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    age?: NullableIntFieldUpdateOperationsInput | number | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    hometownId?: NullableIntFieldUpdateOperationsInput | number | null
    lastName?: StringFieldUpdateOperationsInput | string
    profilePic?: NullableStringFieldUpdateOperationsInput | string | null
    discussion?: discussionUncheckedUpdateManyWithoutUserNestedInput
    reply?: replyUncheckedUpdateManyWithoutUserNestedInput
  }

  export type discussionCreateManyLocationInput = {
    id?: number
    title: string
    created_at?: Date | string
    creatorId: number
    content: string
  }

  export type guidelineCreateManyLocationInput = {
    id?: number
    tags?: guidelineCreatetagsInput | string[]
    created: Date | string
    title: string
    content?: string
  }

  export type locationCreateManyLocationInput = {
    id?: number
    name: string
    lat: string
    lon: string
    type: string
    alias?: string
  }

  export type reportCreateManyLocationInput = {
    id?: number
    name: string
    desc: string
    created?: Date | string
    tag?: string | null
  }

  export type userCreateManyLocationInput = {
    id?: number
    username: string
    email: string
    password: string
    resetToken?: string | null
    resetTokenExpiry?: Date | string | null
    age?: number | null
    description?: string | null
    firstName?: string
    lastName?: string
    profilePic?: string | null
  }

  export type visitCreateManyLocationInput = {
    id?: number
    userId: number
    past: boolean
    longTerm: boolean
  }

  export type discussionUpdateWithoutLocationInput = {
    title?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    content?: StringFieldUpdateOperationsInput | string
    user?: userUpdateOneRequiredWithoutDiscussionNestedInput
    reply?: replyUpdateManyWithoutDiscussionsNestedInput
  }

  export type discussionUncheckedUpdateWithoutLocationInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    creatorId?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    reply?: replyUncheckedUpdateManyWithoutDiscussionsNestedInput
  }

  export type discussionUncheckedUpdateManyWithoutLocationInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    creatorId?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
  }

  export type guidelineUpdateWithoutLocationInput = {
    tags?: guidelineUpdatetagsInput | string[]
    created?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
  }

  export type guidelineUncheckedUpdateWithoutLocationInput = {
    id?: IntFieldUpdateOperationsInput | number
    tags?: guidelineUpdatetagsInput | string[]
    created?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
  }

  export type guidelineUncheckedUpdateManyWithoutLocationInput = {
    id?: IntFieldUpdateOperationsInput | number
    tags?: guidelineUpdatetagsInput | string[]
    created?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
  }

  export type locationUpdateWithoutLocationInput = {
    name?: StringFieldUpdateOperationsInput | string
    lat?: StringFieldUpdateOperationsInput | string
    lon?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    alias?: StringFieldUpdateOperationsInput | string
    discussion?: discussionUpdateManyWithoutLocationNestedInput
    guideline?: guidelineUpdateManyWithoutLocationNestedInput
    other_location?: locationUpdateManyWithoutLocationNestedInput
    report?: reportUpdateManyWithoutLocationNestedInput
    user?: userUpdateManyWithoutLocationNestedInput
    visit?: visitUpdateManyWithoutLocationNestedInput
  }

  export type locationUncheckedUpdateWithoutLocationInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    lat?: StringFieldUpdateOperationsInput | string
    lon?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    alias?: StringFieldUpdateOperationsInput | string
    discussion?: discussionUncheckedUpdateManyWithoutLocationNestedInput
    guideline?: guidelineUncheckedUpdateManyWithoutLocationNestedInput
    other_location?: locationUncheckedUpdateManyWithoutLocationNestedInput
    report?: reportUncheckedUpdateManyWithoutLocationNestedInput
    user?: userUncheckedUpdateManyWithoutLocationNestedInput
    visit?: visitUncheckedUpdateManyWithoutLocationNestedInput
  }

  export type locationUncheckedUpdateManyWithoutLocationInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    lat?: StringFieldUpdateOperationsInput | string
    lon?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    alias?: StringFieldUpdateOperationsInput | string
  }

  export type reportUpdateWithoutLocationInput = {
    name?: StringFieldUpdateOperationsInput | string
    desc?: StringFieldUpdateOperationsInput | string
    created?: DateTimeFieldUpdateOperationsInput | Date | string
    tag?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type reportUncheckedUpdateWithoutLocationInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    desc?: StringFieldUpdateOperationsInput | string
    created?: DateTimeFieldUpdateOperationsInput | Date | string
    tag?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type reportUncheckedUpdateManyWithoutLocationInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    desc?: StringFieldUpdateOperationsInput | string
    created?: DateTimeFieldUpdateOperationsInput | Date | string
    tag?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type userUpdateWithoutLocationInput = {
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    resetToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    age?: NullableIntFieldUpdateOperationsInput | number | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    profilePic?: NullableStringFieldUpdateOperationsInput | string | null
    discussion?: discussionUpdateManyWithoutUserNestedInput
    reply?: replyUpdateManyWithoutUserNestedInput
    visit?: visitUpdateManyWithoutUserNestedInput
  }

  export type userUncheckedUpdateWithoutLocationInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    resetToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    age?: NullableIntFieldUpdateOperationsInput | number | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    profilePic?: NullableStringFieldUpdateOperationsInput | string | null
    discussion?: discussionUncheckedUpdateManyWithoutUserNestedInput
    reply?: replyUncheckedUpdateManyWithoutUserNestedInput
    visit?: visitUncheckedUpdateManyWithoutUserNestedInput
  }

  export type userUncheckedUpdateManyWithoutLocationInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    resetToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    age?: NullableIntFieldUpdateOperationsInput | number | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    profilePic?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type visitUpdateWithoutLocationInput = {
    past?: BoolFieldUpdateOperationsInput | boolean
    longTerm?: BoolFieldUpdateOperationsInput | boolean
    user?: userUpdateOneRequiredWithoutVisitNestedInput
  }

  export type visitUncheckedUpdateWithoutLocationInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    past?: BoolFieldUpdateOperationsInput | boolean
    longTerm?: BoolFieldUpdateOperationsInput | boolean
  }

  export type visitUncheckedUpdateManyWithoutLocationInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    past?: BoolFieldUpdateOperationsInput | boolean
    longTerm?: BoolFieldUpdateOperationsInput | boolean
  }

  export type replyCreateManyReplyInput = {
    id?: number
    content: string
    created_at?: Date | string
    creatorId: number
    discussionId?: number | null
  }

  export type replyUpdateWithoutReplyInput = {
    content?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: userUpdateOneRequiredWithoutReplyNestedInput
    discussions?: discussionUpdateOneWithoutReplyNestedInput
    other_reply?: replyUpdateManyWithoutReplyNestedInput
  }

  export type replyUncheckedUpdateWithoutReplyInput = {
    id?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    creatorId?: IntFieldUpdateOperationsInput | number
    discussionId?: NullableIntFieldUpdateOperationsInput | number | null
    other_reply?: replyUncheckedUpdateManyWithoutReplyNestedInput
  }

  export type replyUncheckedUpdateManyWithoutReplyInput = {
    id?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    creatorId?: IntFieldUpdateOperationsInput | number
    discussionId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type discussionCreateManyUserInput = {
    id?: number
    title: string
    created_at?: Date | string
    locationId: number
    content: string
  }

  export type replyCreateManyUserInput = {
    id?: number
    content: string
    created_at?: Date | string
    discussionId?: number | null
    parentId?: number | null
  }

  export type visitCreateManyUserInput = {
    id?: number
    locationId: number
    past: boolean
    longTerm: boolean
  }

  export type discussionUpdateWithoutUserInput = {
    title?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    content?: StringFieldUpdateOperationsInput | string
    location?: locationUpdateOneRequiredWithoutDiscussionNestedInput
    reply?: replyUpdateManyWithoutDiscussionsNestedInput
  }

  export type discussionUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    locationId?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    reply?: replyUncheckedUpdateManyWithoutDiscussionsNestedInput
  }

  export type discussionUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    locationId?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
  }

  export type replyUpdateWithoutUserInput = {
    content?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    discussions?: discussionUpdateOneWithoutReplyNestedInput
    reply?: replyUpdateOneWithoutOther_replyNestedInput
    other_reply?: replyUpdateManyWithoutReplyNestedInput
  }

  export type replyUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    discussionId?: NullableIntFieldUpdateOperationsInput | number | null
    parentId?: NullableIntFieldUpdateOperationsInput | number | null
    other_reply?: replyUncheckedUpdateManyWithoutReplyNestedInput
  }

  export type replyUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    discussionId?: NullableIntFieldUpdateOperationsInput | number | null
    parentId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type visitUpdateWithoutUserInput = {
    past?: BoolFieldUpdateOperationsInput | boolean
    longTerm?: BoolFieldUpdateOperationsInput | boolean
    location?: locationUpdateOneRequiredWithoutVisitNestedInput
  }

  export type visitUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    locationId?: IntFieldUpdateOperationsInput | number
    past?: BoolFieldUpdateOperationsInput | boolean
    longTerm?: BoolFieldUpdateOperationsInput | boolean
  }

  export type visitUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    locationId?: IntFieldUpdateOperationsInput | number
    past?: BoolFieldUpdateOperationsInput | boolean
    longTerm?: BoolFieldUpdateOperationsInput | boolean
  }

  export type replyCreateManyDiscussionsInput = {
    id?: number
    content: string
    created_at?: Date | string
    creatorId: number
    parentId?: number | null
  }

  export type replyUpdateWithoutDiscussionsInput = {
    content?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: userUpdateOneRequiredWithoutReplyNestedInput
    reply?: replyUpdateOneWithoutOther_replyNestedInput
    other_reply?: replyUpdateManyWithoutReplyNestedInput
  }

  export type replyUncheckedUpdateWithoutDiscussionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    creatorId?: IntFieldUpdateOperationsInput | number
    parentId?: NullableIntFieldUpdateOperationsInput | number | null
    other_reply?: replyUncheckedUpdateManyWithoutReplyNestedInput
  }

  export type replyUncheckedUpdateManyWithoutDiscussionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    creatorId?: IntFieldUpdateOperationsInput | number
    parentId?: NullableIntFieldUpdateOperationsInput | number | null
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use LocationCountOutputTypeDefaultArgs instead
     */
    export type LocationCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = LocationCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ReplyCountOutputTypeDefaultArgs instead
     */
    export type ReplyCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ReplyCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserCountOutputTypeDefaultArgs instead
     */
    export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use DiscussionCountOutputTypeDefaultArgs instead
     */
    export type DiscussionCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = DiscussionCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use guidelineDefaultArgs instead
     */
    export type guidelineArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = guidelineDefaultArgs<ExtArgs>
    /**
     * @deprecated Use locationDefaultArgs instead
     */
    export type locationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = locationDefaultArgs<ExtArgs>
    /**
     * @deprecated Use replyDefaultArgs instead
     */
    export type replyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = replyDefaultArgs<ExtArgs>
    /**
     * @deprecated Use reportDefaultArgs instead
     */
    export type reportArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = reportDefaultArgs<ExtArgs>
    /**
     * @deprecated Use userDefaultArgs instead
     */
    export type userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = userDefaultArgs<ExtArgs>
    /**
     * @deprecated Use discussionDefaultArgs instead
     */
    export type discussionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = discussionDefaultArgs<ExtArgs>
    /**
     * @deprecated Use visitDefaultArgs instead
     */
    export type visitArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = visitDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}