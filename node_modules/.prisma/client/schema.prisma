generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model guideline {
  id       Int      @id @default(autoincrement())
  locId    Int
  tags     String[]
  created  DateTime
  title    String
  content  String   @default("")
  location location @relation(fields: [locId], references: [id])
}

model location {
  id             Int          @id @default(autoincrement())
  name           String       @db.VarChar(255)
  lat            String       @db.VarChar(15)
  lon            String       @db.VarChar(15)
  type           String       @db.VarChar(15)
  parentId       Int?
  alias          String       @default("") @db.VarChar(100)
  discussion     discussion[]
  guideline      guideline[]
  location       location?    @relation("locationTolocation", fields: [parentId], references: [id])
  other_location location[]   @relation("locationTolocation")
  report         report[]
  user           user[]
  visit          visit[]

  @@index([parentId], map: "fki_location_parentId_fkey")
}

model reply {
  id           Int         @id @default(autoincrement())
  content      String      @db.VarChar(400)
  created_at   DateTime    @default(now())
  creatorId    Int
  discussionId Int?
  parentId     Int?
  user         user        @relation(fields: [creatorId], references: [id])
  discussions  discussion? @relation(fields: [discussionId], references: [id])
  reply        reply?      @relation("replyToreply", fields: [parentId], references: [id])
  other_reply  reply[]     @relation("replyToreply")
}

model report {
  id       Int      @id @default(autoincrement())
  name     String   @db.VarChar(255)
  desc     String
  created  DateTime @default(now())
  locId    Int
  tag      String?  @default("NO-RISK") @db.VarChar(20)
  location location @relation(fields: [locId], references: [id])
}

model user {
  id               Int          @id @default(autoincrement())
  username         String       @unique @db.VarChar(255)
  email            String       @unique @db.VarChar(255)
  password         String       @db.VarChar(255)
  resetToken       String?      @db.VarChar(255)
  resetTokenExpiry DateTime?
  age              Int?
  description      String?      @db.VarChar(400)
  firstName        String       @default("") @db.VarChar(400)
  hometownId       Int?
  lastName         String       @default("") @db.VarChar(400)
  profilePic       String?
  discussion       discussion[]
  reply            reply[]
  location         location?    @relation(fields: [hometownId], references: [id])
  visit            visit[]
}

model discussion {
  id         Int      @id @default(autoincrement())
  title      String   @db.VarChar(400)
  created_at DateTime @default(now())
  creatorId  Int
  locationId Int
  content    String   @db.VarChar(400)
  user       user     @relation(fields: [creatorId], references: [id])
  location   location @relation(fields: [locationId], references: [id])
  reply      reply[]
}

model visit {
  id         Int      @id @default(autoincrement())
  userId     Int
  locationId Int
  past       Boolean
  longTerm   Boolean
  location   location @relation(fields: [locationId], references: [id])
  user       user     @relation(fields: [userId], references: [id])

  @@unique([userId, locationId])
}
