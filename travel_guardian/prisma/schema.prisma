generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model guideline {
  id      Int      @id @default(autoincrement())
  locId   Int
  tags    String[]
  title   String
  content String   @default("")
  links   String[]
  loc     location @relation(fields: [locId], references: [id])
}

model location {
  id             Int              @id @default(autoincrement())
  name           String           @db.VarChar(255)
  lat            String           @db.VarChar(15)
  lon            String           @db.VarChar(15)
  type           String           @db.VarChar(15)
  parentId       Int?
  alias          String           @default("") @db.VarChar(100)
  discussions    discussion[]
  guidelines     guideline[]
  parent         location?        @relation("LocationHierarchy", fields: [parentId], references: [id])
  children       location[]       @relation("LocationHierarchy")
  reports        report[]
  hometownOf     user[]           @relation("Hometown")
  visitors       visit[]
  companion_post companion_post[]

  @@index([parentId], map: "fki_location_parentId_fkey")
}

model companion_post {
  id          Int       @id @default(autoincrement())
  title       String    @db.VarChar(255)
  content     String
  startDate   DateTime?
  endDate     DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  creatorId   Int
  locationId  Int
  status      String    @default("ACTIVE") @db.VarChar(20) // ACTIVE, INACTIVE
  preferences String[]  @default([])

  creator  user                @relation(fields: [creatorId], references: [id])
  location location            @relation(fields: [locationId], references: [id])
  comments companion_comment[]
}

model companion_comment {
  id        Int      @id @default(autoincrement())
  content   String   @db.VarChar(400)
  createdAt DateTime @default(now())
  creatorId Int
  postId    Int
  parentId  Int?

  creator user                @relation(fields: [creatorId], references: [id])
  post    companion_post      @relation(fields: [postId], references: [id])
  parent  companion_comment?  @relation("CommentHierarchy", fields: [parentId], references: [id])
  replies companion_comment[] @relation("CommentHierarchy")
}

model report {
  id      Int      @id @default(autoincrement())
  name    String   @db.VarChar(255)
  desc    String
  created DateTime @default(now())
  locId   Int
  tag     String?  @default("NO-RISK") @db.VarChar(20)
  loc     location @relation(fields: [locId], references: [id])
}

model user {
  id                Int                 @id @default(autoincrement())
  username          String              @unique @db.VarChar(255)
  email             String              @unique @db.VarChar(255)
  password          String              @db.VarChar(255)
  resetToken        String?             @db.VarChar(255)
  resetTokenExpiry  DateTime?
  age               Int?
  description       String?             @db.VarChar(400)
  firstName         String              @default("") @db.VarChar(400)
  hometownId        Int?
  lastName          String              @default("") @db.VarChar(400)
  profilePic        String?
  discussions       discussion[]
  replies           reply[]
  hometown          location?           @relation("Hometown", fields: [hometownId], references: [id])
  visits            visit[]
  companion_post    companion_post[]
  companion_comment companion_comment[]
}

model discussion {
  id         Int      @id @default(autoincrement())
  title      String   @db.VarChar(400)
  created_at DateTime @default(now())
  creatorId  Int
  locationId Int
  content    String   @db.VarChar(400)
  user       user     @relation(fields: [creatorId], references: [id])
  location   location @relation(fields: [locationId], references: [id])
  replies    reply[]
}

model reply {
  id           Int         @id @default(autoincrement())
  content      String      @db.VarChar(400)
  created_at   DateTime    @default(now())
  creatorId    Int
  discussionId Int?
  parentId     Int?
  users        user        @relation(fields: [creatorId], references: [id])
  discussions  discussion? @relation(fields: [discussionId], references: [id])
  reply        reply?      @relation("replyToreply", fields: [parentId], references: [id])
  other_reply  reply[]     @relation("replyToreply")
}

model visit {
  id         Int      @id @default(autoincrement())
  userId     Int
  locationId Int
  past       Boolean
  longTerm   Boolean
  location   location @relation(fields: [locationId], references: [id])
  user       user     @relation(fields: [userId], references: [id])

  @@unique([userId, locationId])
}